[
    {
        "label": "my_module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "my_module",
        "description": "my_module",
        "detail": "my_module",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryDirectory",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryDirectory",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryDirectory",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "tracemalloc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "waste_memory",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "waste_memory",
        "description": "waste_memory",
        "detail": "waste_memory",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "mypackage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mypackage",
        "description": "mypackage",
        "detail": "mypackage",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "mypackage",
        "description": "mypackage",
        "isExtraImport": true,
        "detail": "mypackage",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "mypackage",
        "description": "mypackage",
        "isExtraImport": true,
        "detail": "mypackage",
        "documentation": {}
    },
    {
        "label": "analysis.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "log_base2_bucket",
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "isExtraImport": true,
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "isExtraImport": true,
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "isExtraImport": true,
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "frontend.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "frontend.utils",
        "description": "frontend.utils",
        "detail": "frontend.utils",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "frontend.utils",
        "description": "frontend.utils",
        "isExtraImport": true,
        "detail": "frontend.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "frontend.utils",
        "description": "frontend.utils",
        "isExtraImport": true,
        "detail": "frontend.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "frontend.utils",
        "description": "frontend.utils",
        "isExtraImport": true,
        "detail": "frontend.utils",
        "documentation": {}
    },
    {
        "label": "__main__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__main__",
        "description": "__main__",
        "detail": "__main__",
        "documentation": {}
    },
    {
        "label": "db_connection",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "db_connection",
        "description": "db_connection",
        "detail": "db_connection",
        "documentation": {}
    },
    {
        "label": "dialog",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dialog",
        "description": "dialog",
        "detail": "dialog",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app",
        "description": "app",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Barrier",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "WeakKeyDictionary",
        "importPath": "weakref",
        "description": "weakref",
        "isExtraImport": true,
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "copyreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copyreg",
        "description": "copyreg",
        "detail": "copyreg",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "cProfile",
        "description": "cProfile",
        "isExtraImport": true,
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "pstats",
        "description": "pstats",
        "isExtraImport": true,
        "detail": "pstats",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "DEFAULT",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "example_code.item_64.parallel.my_module",
        "description": "example_code.item_64.parallel.my_module",
        "peekOfCode": "def gcd(pair):\n    a, b = pair\n    low = min(a, b)\n    for i in range(low, 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i\n    assert False, 'Not reachable'",
        "detail": "example_code.item_64.parallel.my_module",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "example_code.item_64.parallel.run_parallel",
        "description": "example_code.item_64.parallel.run_parallel",
        "peekOfCode": "def main():\n    start = time.time()\n    pool = ProcessPoolExecutor(max_workers=2)  # The one change\n    results = list(pool.map(my_module.gcd, NUMBERS))\n    end = time.time()\n    delta = end - start\n    print(f'Took {delta:.3f} seconds')\nif __name__ == '__main__':\n    main()",
        "detail": "example_code.item_64.parallel.run_parallel",
        "documentation": {}
    },
    {
        "label": "NUMBERS",
        "kind": 5,
        "importPath": "example_code.item_64.parallel.run_parallel",
        "description": "example_code.item_64.parallel.run_parallel",
        "peekOfCode": "NUMBERS = [\n    (1963309, 2265973), (2030677, 3814172),\n    (1551645, 2229620), (2039045, 2020802),\n    (1823712, 1924928), (2293129, 1020491),\n    (1281238, 2273782), (3823812, 4237281),\n    (3812741, 4729139), (1292391, 2123811),\n]\ndef main():\n    start = time.time()\n    pool = ProcessPoolExecutor(max_workers=2)  # The one change",
        "detail": "example_code.item_64.parallel.run_parallel",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "example_code.item_64.parallel.run_serial",
        "description": "example_code.item_64.parallel.run_serial",
        "peekOfCode": "def main():\n    start = time.time()\n    results = list(map(my_module.gcd, NUMBERS))\n    end = time.time()\n    delta = end - start\n    print(f'Took {delta:.3f} seconds')\nif __name__ == '__main__':\n    main()",
        "detail": "example_code.item_64.parallel.run_serial",
        "documentation": {}
    },
    {
        "label": "NUMBERS",
        "kind": 5,
        "importPath": "example_code.item_64.parallel.run_serial",
        "description": "example_code.item_64.parallel.run_serial",
        "peekOfCode": "NUMBERS = [\n    (1963309, 2265973), (2030677, 3814172),\n    (1551645, 2229620), (2039045, 2020802),\n    (1823712, 1924928), (2293129, 1020491),\n    (1281238, 2273782), (3823812, 4237281),\n    (3812741, 4729139), (1292391, 2123811),\n]\ndef main():\n    start = time.time()\n    results = list(map(my_module.gcd, NUMBERS))",
        "detail": "example_code.item_64.parallel.run_serial",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "example_code.item_64.parallel.run_threads",
        "description": "example_code.item_64.parallel.run_threads",
        "peekOfCode": "def main():    \n    start = time.time()\n    pool = ThreadPoolExecutor(max_workers=2)\n    results = list(pool.map(my_module.gcd, NUMBERS))\n    end = time.time()\n    delta = end - start\n    print(f'Took {delta:.3f} seconds')\nif __name__ == '__main__':\n    main()",
        "detail": "example_code.item_64.parallel.run_threads",
        "documentation": {}
    },
    {
        "label": "NUMBERS",
        "kind": 5,
        "importPath": "example_code.item_64.parallel.run_threads",
        "description": "example_code.item_64.parallel.run_threads",
        "peekOfCode": "NUMBERS = [\n    (1963309, 2265973), (2030677, 3814172),\n    (1551645, 2229620), (2039045, 2020802),\n    (1823712, 1924928), (2293129, 1020491),\n    (1281238, 2273782), (3823812, 4237281),\n    (3812741, 4729139), (1292391, 2123811),\n]\ndef main():    \n    start = time.time()\n    pool = ThreadPoolExecutor(max_workers=2)",
        "detail": "example_code.item_64.parallel.run_threads",
        "documentation": {}
    },
    {
        "label": "AssertTestCase",
        "kind": 6,
        "importPath": "example_code.item_76.testing.assert_test",
        "description": "example_code.item_76.testing.assert_test",
        "peekOfCode": "class AssertTestCase(TestCase):\n    def test_assert_helper(self):\n        expected = 12\n        found = 2 * 5\n        self.assertEqual(expected, found)\n    def test_assert_statement(self):\n        expected = 12\n        found = 2 * 5\n        assert expected == found\nif __name__ == '__main__':",
        "detail": "example_code.item_76.testing.assert_test",
        "documentation": {}
    },
    {
        "label": "DataDrivenTestCase",
        "kind": 6,
        "importPath": "example_code.item_76.testing.data_driven_test",
        "description": "example_code.item_76.testing.data_driven_test",
        "peekOfCode": "class DataDrivenTestCase(TestCase):\n    def test_good(self):\n        good_cases = [\n            (b'my bytes', 'my bytes'),\n            ('no error', b'no error'),  # This one will fail\n            ('other str', 'other str'),\n        ]\n        for value, expected in good_cases:\n            with self.subTest(value):\n                self.assertEqual(expected, to_str(value))",
        "detail": "example_code.item_76.testing.data_driven_test",
        "documentation": {}
    },
    {
        "label": "HelperTestCase",
        "kind": 6,
        "importPath": "example_code.item_76.testing.helper_test",
        "description": "example_code.item_76.testing.helper_test",
        "peekOfCode": "class HelperTestCase(TestCase):\n    def verify_complex_case(self, values, expected):\n        expect_it = iter(expected)\n        found_it = iter(sum_squares(values))\n        test_it = zip(expect_it, found_it)\n        for i, (expect, found) in enumerate(test_it):\n            self.assertEqual(\n                expect,\n                found,\n                f'Index {i} is wrong')",
        "detail": "example_code.item_76.testing.helper_test",
        "documentation": {}
    },
    {
        "label": "sum_squares",
        "kind": 2,
        "importPath": "example_code.item_76.testing.helper_test",
        "description": "example_code.item_76.testing.helper_test",
        "peekOfCode": "def sum_squares(values):\n    cumulative = 0\n    for value in values:\n        cumulative += value ** 2\n        yield cumulative\nclass HelperTestCase(TestCase):\n    def verify_complex_case(self, values, expected):\n        expect_it = iter(expected)\n        found_it = iter(sum_squares(values))\n        test_it = zip(expect_it, found_it)",
        "detail": "example_code.item_76.testing.helper_test",
        "documentation": {}
    },
    {
        "label": "to_str",
        "kind": 2,
        "importPath": "example_code.item_76.testing.utils",
        "description": "example_code.item_76.testing.utils",
        "peekOfCode": "def to_str(data):\n    if isinstance(data, str):\n        return data\n    elif isinstance(data, bytes):\n        return data.decode('utf-8')\n    else:\n        raise TypeError('Must supply str or bytes, '\n                        'found: %r' % data)",
        "detail": "example_code.item_76.testing.utils",
        "documentation": {}
    },
    {
        "label": "UtilsErrorTestCase",
        "kind": 6,
        "importPath": "example_code.item_76.testing.utils_error_test",
        "description": "example_code.item_76.testing.utils_error_test",
        "peekOfCode": "class UtilsErrorTestCase(TestCase):\n    def test_to_str_bad(self):\n        with self.assertRaises(TypeError):\n            to_str(object())\n    def test_to_str_bad_encoding(self):\n        with self.assertRaises(UnicodeDecodeError):\n            to_str(b'\\xfa\\xfa')\nif __name__ == '__main__':\n    main()",
        "detail": "example_code.item_76.testing.utils_error_test",
        "documentation": {}
    },
    {
        "label": "UtilsTestCase",
        "kind": 6,
        "importPath": "example_code.item_76.testing.utils_test",
        "description": "example_code.item_76.testing.utils_test",
        "peekOfCode": "class UtilsTestCase(TestCase):\n    def test_to_str_bytes(self):\n        self.assertEqual('hello', to_str(b'hello'))\n    def test_to_str_str(self):\n        self.assertEqual('hello', to_str('hello'))\n    def test_failing(self):\n        self.assertEqual('incorrect', to_str('hello'))\nif __name__ == '__main__':\n    main()",
        "detail": "example_code.item_76.testing.utils_test",
        "documentation": {}
    },
    {
        "label": "EnvironmentTest",
        "kind": 6,
        "importPath": "example_code.item_77.testing.environment_test",
        "description": "example_code.item_77.testing.environment_test",
        "peekOfCode": "class EnvironmentTest(TestCase):\n    def setUp(self):\n        self.test_dir = TemporaryDirectory()\n        self.test_path = Path(self.test_dir.name)\n    def tearDown(self):\n        self.test_dir.cleanup()\n    def test_modify_file(self):\n        with open(self.test_path / 'data.bin', 'w') as f:\n            f.write('hello')\nif __name__ == '__main__':",
        "detail": "example_code.item_77.testing.environment_test",
        "documentation": {}
    },
    {
        "label": "IntegrationTest",
        "kind": 6,
        "importPath": "example_code.item_77.testing.integration_test",
        "description": "example_code.item_77.testing.integration_test",
        "peekOfCode": "class IntegrationTest(TestCase):\n    def setUp(self):\n        print('* Test setup')\n    def tearDown(self):\n        print('* Test clean-up')\n    def test_end_to_end1(self):\n        print('* Test 1')\n    def test_end_to_end2(self):\n        print('* Test 2')\nif __name__ == '__main__':",
        "detail": "example_code.item_77.testing.integration_test",
        "documentation": {}
    },
    {
        "label": "setUpModule",
        "kind": 2,
        "importPath": "example_code.item_77.testing.integration_test",
        "description": "example_code.item_77.testing.integration_test",
        "peekOfCode": "def setUpModule():\n    print('* Module setup')\ndef tearDownModule():\n    print('* Module clean-up')\nclass IntegrationTest(TestCase):\n    def setUp(self):\n        print('* Test setup')\n    def tearDown(self):\n        print('* Test clean-up')\n    def test_end_to_end1(self):",
        "detail": "example_code.item_77.testing.integration_test",
        "documentation": {}
    },
    {
        "label": "tearDownModule",
        "kind": 2,
        "importPath": "example_code.item_77.testing.integration_test",
        "description": "example_code.item_77.testing.integration_test",
        "peekOfCode": "def tearDownModule():\n    print('* Module clean-up')\nclass IntegrationTest(TestCase):\n    def setUp(self):\n        print('* Test setup')\n    def tearDown(self):\n        print('* Test clean-up')\n    def test_end_to_end1(self):\n        print('* Test 1')\n    def test_end_to_end2(self):",
        "detail": "example_code.item_77.testing.integration_test",
        "documentation": {}
    },
    {
        "label": "compute_rmse",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.always_breakpoint",
        "description": "example_code.item_80.debugging.always_breakpoint",
        "peekOfCode": "def compute_rmse(observed, ideal):\n    total_err_2 = 0\n    count = 0\n    for got, wanted in zip(observed, ideal):\n        err_2 = (got - wanted) ** 2\n        breakpoint()  # Start the debugger here\n        total_err_2 += err_2\n        count += 1\n    mean_err = total_err_2 / count\n    rmse = math.sqrt(mean_err)",
        "detail": "example_code.item_80.debugging.always_breakpoint",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_80.debugging.always_breakpoint",
        "description": "example_code.item_80.debugging.always_breakpoint",
        "peekOfCode": "result = compute_rmse(\n    [1.8, 1.7, 3.2, 6],\n    [2, 1.5, 3, 5])\nprint(result)",
        "detail": "example_code.item_80.debugging.always_breakpoint",
        "documentation": {}
    },
    {
        "label": "compute_rmse",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.conditional_breakpoint",
        "description": "example_code.item_80.debugging.conditional_breakpoint",
        "peekOfCode": "def compute_rmse(observed, ideal):\n    total_err_2 = 0\n    count = 0\n    for got, wanted in zip(observed, ideal):\n        err_2 = (got - wanted) ** 2\n        if err_2 >= 1:  # Start the debugger if True\n            breakpoint()\n        total_err_2 += err_2\n        count += 1\n    mean_err = total_err_2 / count",
        "detail": "example_code.item_80.debugging.conditional_breakpoint",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_80.debugging.conditional_breakpoint",
        "description": "example_code.item_80.debugging.conditional_breakpoint",
        "peekOfCode": "result = compute_rmse(\n    [1.8, 1.7, 3.2, 7],\n    [2, 1.5, 3, 5])\nprint(result)",
        "detail": "example_code.item_80.debugging.conditional_breakpoint",
        "documentation": {}
    },
    {
        "label": "squared_error",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.my_module",
        "description": "example_code.item_80.debugging.my_module",
        "peekOfCode": "def squared_error(point, mean):\n    err = point - mean\n    return err ** 2\ndef compute_variance(data):\n    mean = sum(data) / len(data)\n    err_2_sum = sum(squared_error(x, mean) for x in data)\n    variance = err_2_sum / (len(data) - 1)\n    return variance\ndef compute_stddev(data):\n    variance = compute_variance(data)",
        "detail": "example_code.item_80.debugging.my_module",
        "documentation": {}
    },
    {
        "label": "compute_variance",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.my_module",
        "description": "example_code.item_80.debugging.my_module",
        "peekOfCode": "def compute_variance(data):\n    mean = sum(data) / len(data)\n    err_2_sum = sum(squared_error(x, mean) for x in data)\n    variance = err_2_sum / (len(data) - 1)\n    return variance\ndef compute_stddev(data):\n    variance = compute_variance(data)\n    return math.sqrt(variance)",
        "detail": "example_code.item_80.debugging.my_module",
        "documentation": {}
    },
    {
        "label": "compute_stddev",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.my_module",
        "description": "example_code.item_80.debugging.my_module",
        "peekOfCode": "def compute_stddev(data):\n    variance = compute_variance(data)\n    return math.sqrt(variance)",
        "detail": "example_code.item_80.debugging.my_module",
        "documentation": {}
    },
    {
        "label": "compute_rmse",
        "kind": 2,
        "importPath": "example_code.item_80.debugging.postmortem_breakpoint",
        "description": "example_code.item_80.debugging.postmortem_breakpoint",
        "peekOfCode": "def compute_rmse(observed, ideal):\n    total_err_2 = 0\n    count = 0\n    for got, wanted in zip(observed, ideal):\n        err_2 = (got - wanted) ** 2\n        total_err_2 += err_2\n        count += 1\n    mean_err = total_err_2 / count\n    rmse = math.sqrt(mean_err)\n    return rmse",
        "detail": "example_code.item_80.debugging.postmortem_breakpoint",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_80.debugging.postmortem_breakpoint",
        "description": "example_code.item_80.debugging.postmortem_breakpoint",
        "peekOfCode": "result = compute_rmse(\n    [1.8, 1.7, 3.2, 7j],  # Bad input\n    [2, 1.5, 3, 5])\nprint(result)",
        "detail": "example_code.item_80.debugging.postmortem_breakpoint",
        "documentation": {}
    },
    {
        "label": "time1",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.top_n",
        "description": "example_code.item_81.tracemalloc.top_n",
        "peekOfCode": "time1 = tracemalloc.take_snapshot()        # Before snapshot\nimport waste_memory\nx = waste_memory.run()                     # Usage to debug\ntime2 = tracemalloc.take_snapshot()        # After snapshot\nstats = time2.compare_to(time1, 'lineno')  # Compare snapshots\nfor stat in stats[:3]:\n    print(stat)",
        "detail": "example_code.item_81.tracemalloc.top_n",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.top_n",
        "description": "example_code.item_81.tracemalloc.top_n",
        "peekOfCode": "x = waste_memory.run()                     # Usage to debug\ntime2 = tracemalloc.take_snapshot()        # After snapshot\nstats = time2.compare_to(time1, 'lineno')  # Compare snapshots\nfor stat in stats[:3]:\n    print(stat)",
        "detail": "example_code.item_81.tracemalloc.top_n",
        "documentation": {}
    },
    {
        "label": "time2",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.top_n",
        "description": "example_code.item_81.tracemalloc.top_n",
        "peekOfCode": "time2 = tracemalloc.take_snapshot()        # After snapshot\nstats = time2.compare_to(time1, 'lineno')  # Compare snapshots\nfor stat in stats[:3]:\n    print(stat)",
        "detail": "example_code.item_81.tracemalloc.top_n",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.top_n",
        "description": "example_code.item_81.tracemalloc.top_n",
        "peekOfCode": "stats = time2.compare_to(time1, 'lineno')  # Compare snapshots\nfor stat in stats[:3]:\n    print(stat)",
        "detail": "example_code.item_81.tracemalloc.top_n",
        "documentation": {}
    },
    {
        "label": "found_objects",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.using_gc",
        "description": "example_code.item_81.tracemalloc.using_gc",
        "peekOfCode": "found_objects = gc.get_objects()\nprint('Before:', len(found_objects))\nimport waste_memory\nhold_reference = waste_memory.run()\nfound_objects = gc.get_objects()\nprint('After: ', len(found_objects))\nfor obj in found_objects[:3]:\n    print(repr(obj)[:100])\nprint('...')",
        "detail": "example_code.item_81.tracemalloc.using_gc",
        "documentation": {}
    },
    {
        "label": "hold_reference",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.using_gc",
        "description": "example_code.item_81.tracemalloc.using_gc",
        "peekOfCode": "hold_reference = waste_memory.run()\nfound_objects = gc.get_objects()\nprint('After: ', len(found_objects))\nfor obj in found_objects[:3]:\n    print(repr(obj)[:100])\nprint('...')",
        "detail": "example_code.item_81.tracemalloc.using_gc",
        "documentation": {}
    },
    {
        "label": "found_objects",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.using_gc",
        "description": "example_code.item_81.tracemalloc.using_gc",
        "peekOfCode": "found_objects = gc.get_objects()\nprint('After: ', len(found_objects))\nfor obj in found_objects[:3]:\n    print(repr(obj)[:100])\nprint('...')",
        "detail": "example_code.item_81.tracemalloc.using_gc",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "example_code.item_81.tracemalloc.waste_memory",
        "description": "example_code.item_81.tracemalloc.waste_memory",
        "peekOfCode": "class MyObject:\n    def __init__(self):\n        self.data = os.urandom(100)\ndef get_data():\n    values = []\n    for _ in range(100):\n        obj = MyObject()\n        values.append(obj)\n    return values\ndef run():",
        "detail": "example_code.item_81.tracemalloc.waste_memory",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "example_code.item_81.tracemalloc.waste_memory",
        "description": "example_code.item_81.tracemalloc.waste_memory",
        "peekOfCode": "def get_data():\n    values = []\n    for _ in range(100):\n        obj = MyObject()\n        values.append(obj)\n    return values\ndef run():\n    deep_values = []\n    for _ in range(100):\n        deep_values.append(get_data())",
        "detail": "example_code.item_81.tracemalloc.waste_memory",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "example_code.item_81.tracemalloc.waste_memory",
        "description": "example_code.item_81.tracemalloc.waste_memory",
        "peekOfCode": "def run():\n    deep_values = []\n    for _ in range(100):\n        deep_values.append(get_data())\n    return deep_values",
        "detail": "example_code.item_81.tracemalloc.waste_memory",
        "documentation": {}
    },
    {
        "label": "time1",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.with_trace",
        "description": "example_code.item_81.tracemalloc.with_trace",
        "peekOfCode": "time1 = tracemalloc.take_snapshot()\nimport waste_memory\nx = waste_memory.run()\ntime2 = tracemalloc.take_snapshot()\nstats = time2.compare_to(time1, 'traceback')\ntop = stats[0]\nprint('Biggest offender is:')\nprint('\\n'.join(top.traceback.format()))",
        "detail": "example_code.item_81.tracemalloc.with_trace",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.with_trace",
        "description": "example_code.item_81.tracemalloc.with_trace",
        "peekOfCode": "x = waste_memory.run()\ntime2 = tracemalloc.take_snapshot()\nstats = time2.compare_to(time1, 'traceback')\ntop = stats[0]\nprint('Biggest offender is:')\nprint('\\n'.join(top.traceback.format()))",
        "detail": "example_code.item_81.tracemalloc.with_trace",
        "documentation": {}
    },
    {
        "label": "time2",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.with_trace",
        "description": "example_code.item_81.tracemalloc.with_trace",
        "peekOfCode": "time2 = tracemalloc.take_snapshot()\nstats = time2.compare_to(time1, 'traceback')\ntop = stats[0]\nprint('Biggest offender is:')\nprint('\\n'.join(top.traceback.format()))",
        "detail": "example_code.item_81.tracemalloc.with_trace",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.with_trace",
        "description": "example_code.item_81.tracemalloc.with_trace",
        "peekOfCode": "stats = time2.compare_to(time1, 'traceback')\ntop = stats[0]\nprint('Biggest offender is:')\nprint('\\n'.join(top.traceback.format()))",
        "detail": "example_code.item_81.tracemalloc.with_trace",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "example_code.item_81.tracemalloc.with_trace",
        "description": "example_code.item_81.tracemalloc.with_trace",
        "peekOfCode": "top = stats[0]\nprint('Biggest offender is:')\nprint('\\n'.join(top.traceback.format()))",
        "detail": "example_code.item_81.tracemalloc.with_trace",
        "documentation": {}
    },
    {
        "label": "Projectile",
        "kind": 6,
        "importPath": "example_code.item_85.api_package.mypackage.models",
        "description": "example_code.item_85.api_package.mypackage.models",
        "peekOfCode": "class Projectile:\n    def __init__(self, mass, velocity):\n        self.mass = mass\n        self.velocity = velocity",
        "detail": "example_code.item_85.api_package.mypackage.models",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "example_code.item_85.api_package.mypackage.models",
        "description": "example_code.item_85.api_package.mypackage.models",
        "peekOfCode": "__all__ = ['Projectile']\nclass Projectile:\n    def __init__(self, mass, velocity):\n        self.mass = mass\n        self.velocity = velocity",
        "detail": "example_code.item_85.api_package.mypackage.models",
        "documentation": {}
    },
    {
        "label": "simulate_collision",
        "kind": 2,
        "importPath": "example_code.item_85.api_package.mypackage.utils",
        "description": "example_code.item_85.api_package.mypackage.utils",
        "peekOfCode": "def simulate_collision(a, b):\n    after_a = Projectile(-a.mass, -a.velocity)\n    after_b = Projectile(-b.mass, -b.velocity)\n    return after_a, after_b",
        "detail": "example_code.item_85.api_package.mypackage.utils",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "example_code.item_85.api_package.mypackage.utils",
        "description": "example_code.item_85.api_package.mypackage.utils",
        "peekOfCode": "__all__ = ['simulate_collision']\ndef _dot_product(a, b):\n    pass\ndef simulate_collision(a, b):\n    after_a = Projectile(-a.mass, -a.velocity)\n    after_b = Projectile(-b.mass, -b.velocity)\n    return after_a, after_b",
        "detail": "example_code.item_85.api_package.mypackage.utils",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_85.api_package.api_consumer",
        "description": "example_code.item_85.api_package.api_consumer",
        "peekOfCode": "a = Projectile(1.5, 3)\nb = Projectile(4, 1.7)\nafter_a, after_b = simulate_collision(a, b)\nprint(after_a.__dict__, after_b.__dict__)\nimport mypackage\ntry:\n    mypackage._dot_product\n    assert False\nexcept AttributeError:\n    pass  # Expected",
        "detail": "example_code.item_85.api_package.api_consumer",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_85.api_package.api_consumer",
        "description": "example_code.item_85.api_package.api_consumer",
        "peekOfCode": "b = Projectile(4, 1.7)\nafter_a, after_b = simulate_collision(a, b)\nprint(after_a.__dict__, after_b.__dict__)\nimport mypackage\ntry:\n    mypackage._dot_product\n    assert False\nexcept AttributeError:\n    pass  # Expected\nmypackage.utils._dot_product  # But this is defined",
        "detail": "example_code.item_85.api_package.api_consumer",
        "documentation": {}
    },
    {
        "label": "log_base2_bucket",
        "kind": 2,
        "importPath": "example_code.item_85.namespace_package.analysis.utils",
        "description": "example_code.item_85.namespace_package.analysis.utils",
        "peekOfCode": "def log_base2_bucket(value):\n    return math.log(value, 2)\ndef inspect(value):\n    pass",
        "detail": "example_code.item_85.namespace_package.analysis.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "example_code.item_85.namespace_package.analysis.utils",
        "description": "example_code.item_85.namespace_package.analysis.utils",
        "peekOfCode": "def inspect(value):\n    pass",
        "detail": "example_code.item_85.namespace_package.analysis.utils",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "example_code.item_85.namespace_package.frontend.utils",
        "description": "example_code.item_85.namespace_package.frontend.utils",
        "peekOfCode": "def stringify(value):\n    return str(value)\ndef inspect(value):\n    pass",
        "detail": "example_code.item_85.namespace_package.frontend.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "example_code.item_85.namespace_package.frontend.utils",
        "description": "example_code.item_85.namespace_package.frontend.utils",
        "peekOfCode": "def inspect(value):\n    pass",
        "detail": "example_code.item_85.namespace_package.frontend.utils",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "example_code.item_85.namespace_package.main",
        "description": "example_code.item_85.namespace_package.main",
        "peekOfCode": "bucket = stringify(log_base2_bucket(33))\nprint(repr(bucket))",
        "detail": "example_code.item_85.namespace_package.main",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_85.namespace_package.main3",
        "description": "example_code.item_85.namespace_package.main3",
        "peekOfCode": "value = 33\nif analysis_inspect(value) == frontend_inspect(value):\n    print('Inspection equal!')",
        "detail": "example_code.item_85.namespace_package.main3",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_85.namespace_package.main4",
        "description": "example_code.item_85.namespace_package.main4",
        "peekOfCode": "value = 33\nif (analysis.utils.inspect(value) ==\n    frontend.utils.inspect(value)):\n    print('Inspection equal!')",
        "detail": "example_code.item_85.namespace_package.main4",
        "documentation": {}
    },
    {
        "label": "TestingDatabase",
        "kind": 6,
        "importPath": "example_code.item_86.module_scope.db_connection",
        "description": "example_code.item_86.module_scope.db_connection",
        "peekOfCode": "class TestingDatabase:\n    pass\nclass RealDatabase:\n    pass\nif __main__.TESTING:\n    Database = TestingDatabase\nelse:\n    Database = RealDatabase",
        "detail": "example_code.item_86.module_scope.db_connection",
        "documentation": {}
    },
    {
        "label": "RealDatabase",
        "kind": 6,
        "importPath": "example_code.item_86.module_scope.db_connection",
        "description": "example_code.item_86.module_scope.db_connection",
        "peekOfCode": "class RealDatabase:\n    pass\nif __main__.TESTING:\n    Database = TestingDatabase\nelse:\n    Database = RealDatabase",
        "detail": "example_code.item_86.module_scope.db_connection",
        "documentation": {}
    },
    {
        "label": "TESTING",
        "kind": 5,
        "importPath": "example_code.item_86.module_scope.dev_main",
        "description": "example_code.item_86.module_scope.dev_main",
        "peekOfCode": "TESTING = True\nimport db_connection\ndb = db_connection.Database()",
        "detail": "example_code.item_86.module_scope.dev_main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "example_code.item_86.module_scope.dev_main",
        "description": "example_code.item_86.module_scope.dev_main",
        "peekOfCode": "db = db_connection.Database()",
        "detail": "example_code.item_86.module_scope.dev_main",
        "documentation": {}
    },
    {
        "label": "TESTING",
        "kind": 5,
        "importPath": "example_code.item_86.module_scope.prod_main",
        "description": "example_code.item_86.module_scope.prod_main",
        "peekOfCode": "TESTING = False\nimport db_connection\ndb = db_connection.Database()",
        "detail": "example_code.item_86.module_scope.prod_main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "example_code.item_86.module_scope.prod_main",
        "description": "example_code.item_86.module_scope.prod_main",
        "peekOfCode": "db = db_connection.Database()",
        "detail": "example_code.item_86.module_scope.prod_main",
        "documentation": {}
    },
    {
        "label": "Prefs",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_bad.app",
        "description": "example_code.item_88.recursive_import_bad.app",
        "peekOfCode": "class Prefs:\n    def get(self, name):\n        pass\nprefs = Prefs()\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_bad.app",
        "documentation": {}
    },
    {
        "label": "prefs",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_bad.app",
        "description": "example_code.item_88.recursive_import_bad.app",
        "peekOfCode": "prefs = Prefs()\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_bad.app",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_bad.dialog",
        "description": "example_code.item_88.recursive_import_bad.dialog",
        "peekOfCode": "class Dialog:\n    def __init__(self, save_dir):\n        self.save_dir = save_dir\nsave_dialog = Dialog(app.prefs.get('save_dir'))\ndef show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_bad.dialog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_bad.dialog",
        "description": "example_code.item_88.recursive_import_bad.dialog",
        "peekOfCode": "def show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_bad.dialog",
        "documentation": {}
    },
    {
        "label": "save_dialog",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_bad.dialog",
        "description": "example_code.item_88.recursive_import_bad.dialog",
        "peekOfCode": "save_dialog = Dialog(app.prefs.get('save_dir'))\ndef show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_bad.dialog",
        "documentation": {}
    },
    {
        "label": "Prefs",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_dynamic.app",
        "description": "example_code.item_88.recursive_import_dynamic.app",
        "peekOfCode": "class Prefs:\n    def get(self, name):\n        pass\nprefs = Prefs()\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_dynamic.app",
        "documentation": {}
    },
    {
        "label": "prefs",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_dynamic.app",
        "description": "example_code.item_88.recursive_import_dynamic.app",
        "peekOfCode": "prefs = Prefs()\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_dynamic.app",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_dynamic.dialog",
        "description": "example_code.item_88.recursive_import_dynamic.dialog",
        "peekOfCode": "class Dialog:\n    def __init__(self):\n        pass\n# Using this instead will break things\n# save_dialog = Dialog(app.prefs.get('save_dir'))\nsave_dialog = Dialog()\ndef show():\n    import app  # Dynamic import\n    save_dialog.save_dir = app.prefs.get('save_dir')\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_dynamic.dialog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_dynamic.dialog",
        "description": "example_code.item_88.recursive_import_dynamic.dialog",
        "peekOfCode": "def show():\n    import app  # Dynamic import\n    save_dialog.save_dir = app.prefs.get('save_dir')\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_dynamic.dialog",
        "documentation": {}
    },
    {
        "label": "save_dialog",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_dynamic.dialog",
        "description": "example_code.item_88.recursive_import_dynamic.dialog",
        "peekOfCode": "save_dialog = Dialog()\ndef show():\n    import app  # Dynamic import\n    save_dialog.save_dir = app.prefs.get('save_dir')\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_dynamic.dialog",
        "documentation": {}
    },
    {
        "label": "Prefs",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.app",
        "description": "example_code.item_88.recursive_import_nosideeffects.app",
        "peekOfCode": "class Prefs:\n    def get(self, name):\n        pass\nprefs = Prefs()\ndef configure():\n    pass",
        "detail": "example_code.item_88.recursive_import_nosideeffects.app",
        "documentation": {}
    },
    {
        "label": "configure",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.app",
        "description": "example_code.item_88.recursive_import_nosideeffects.app",
        "peekOfCode": "def configure():\n    pass",
        "detail": "example_code.item_88.recursive_import_nosideeffects.app",
        "documentation": {}
    },
    {
        "label": "prefs",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.app",
        "description": "example_code.item_88.recursive_import_nosideeffects.app",
        "peekOfCode": "prefs = Prefs()\ndef configure():\n    pass",
        "detail": "example_code.item_88.recursive_import_nosideeffects.app",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "description": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "peekOfCode": "class Dialog:\n    def __init__(self):\n        pass\nsave_dialog = Dialog()\ndef show():\n    print('Showing the dialog!')\ndef configure():\n    save_dialog.save_dir = app.prefs.get('save_dir')",
        "detail": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "description": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "peekOfCode": "def show():\n    print('Showing the dialog!')\ndef configure():\n    save_dialog.save_dir = app.prefs.get('save_dir')",
        "detail": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "documentation": {}
    },
    {
        "label": "configure",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "description": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "peekOfCode": "def configure():\n    save_dialog.save_dir = app.prefs.get('save_dir')",
        "detail": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "documentation": {}
    },
    {
        "label": "save_dialog",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "description": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "peekOfCode": "save_dialog = Dialog()\ndef show():\n    print('Showing the dialog!')\ndef configure():\n    save_dialog.save_dir = app.prefs.get('save_dir')",
        "detail": "example_code.item_88.recursive_import_nosideeffects.dialog",
        "documentation": {}
    },
    {
        "label": "Prefs",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_ordering.app",
        "description": "example_code.item_88.recursive_import_ordering.app",
        "peekOfCode": "class Prefs:\n    def get(self, name):\n        pass\nprefs = Prefs()\nimport dialog  # Moved\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_ordering.app",
        "documentation": {}
    },
    {
        "label": "prefs",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_ordering.app",
        "description": "example_code.item_88.recursive_import_ordering.app",
        "peekOfCode": "prefs = Prefs()\nimport dialog  # Moved\ndialog.show()",
        "detail": "example_code.item_88.recursive_import_ordering.app",
        "documentation": {}
    },
    {
        "label": "Dialog",
        "kind": 6,
        "importPath": "example_code.item_88.recursive_import_ordering.dialog",
        "description": "example_code.item_88.recursive_import_ordering.dialog",
        "peekOfCode": "class Dialog:\n    def __init__(self, save_dir):\n        self.save_dir = save_dir\nsave_dialog = Dialog(app.prefs.get('save_dir'))\ndef show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_ordering.dialog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "example_code.item_88.recursive_import_ordering.dialog",
        "description": "example_code.item_88.recursive_import_ordering.dialog",
        "peekOfCode": "def show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_ordering.dialog",
        "documentation": {}
    },
    {
        "label": "save_dialog",
        "kind": 5,
        "importPath": "example_code.item_88.recursive_import_ordering.dialog",
        "description": "example_code.item_88.recursive_import_ordering.dialog",
        "peekOfCode": "save_dialog = Dialog(app.prefs.get('save_dir'))\ndef show():\n    print('Showing the dialog!')",
        "detail": "example_code.item_88.recursive_import_ordering.dialog",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_01",
        "description": "example_code.item_01",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport sys\nprint(sys.version_info)\nprint(sys.version)",
        "detail": "example_code.item_01",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_01",
        "description": "example_code.item_01",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_01",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_01",
        "description": "example_code.item_01",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_01",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\na = b'h\\x65llo'\nprint(list(a))\nprint(a)",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "to_str",
        "kind": 2,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "def to_str(bytes_or_str):\n    if isinstance(bytes_or_str, bytes):\n        value = bytes_or_str.decode('utf-8')\n    else:\n        value = bytes_or_str\n    return value  # Instance of str\nprint(repr(to_str(b'foo')))\nprint(repr(to_str('bar')))\n# Example 4\ndef to_bytes(bytes_or_str):",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "to_bytes",
        "kind": 2,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "def to_bytes(bytes_or_str):\n    if isinstance(bytes_or_str, str):\n        value = bytes_or_str.encode('utf-8')\n    else:\n        value = bytes_or_str\n    return value  # Instance of bytes\nprint(repr(to_bytes(b'foo')))\nprint(repr(to_bytes('bar')))\n# Example 5\nprint(b'one' + b'two')",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "a = b'h\\x65llo'\nprint(list(a))\nprint(a)\n# Example 2\na = 'a\\u0300 propos'\nprint(list(a))\nprint(a)\n# Example 3\ndef to_str(bytes_or_str):\n    if isinstance(bytes_or_str, bytes):",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "a = 'a\\u0300 propos'\nprint(list(a))\nprint(a)\n# Example 3\ndef to_str(bytes_or_str):\n    if isinstance(bytes_or_str, bytes):\n        value = bytes_or_str.decode('utf-8')\n    else:\n        value = bytes_or_str\n    return value  # Instance of str",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 5,
        "importPath": "example_code.item_03",
        "description": "example_code.item_03",
        "peekOfCode": "open = real_open\nwith open('data.bin', 'rb') as f:\n    data = f.read()\nassert data == b'\\xf1\\xf2\\xf3\\xf4\\xf5'\n# Example 19\nwith open('data.bin', 'r', encoding='cp1252') as f:\n    data = f.read()\nassert data == 'ñòóôõ'",
        "detail": "example_code.item_03",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\na = 0b10111011\nb = 0xc5f\nprint('Binary is %d, hex is %d' % (a, b))",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "a = 0b10111011\nb = 0xc5f\nprint('Binary is %d, hex is %d' % (a, b))\n# Example 2\nkey = 'my_var'\nvalue = 1.234\nformatted = '%-10s = %.2f' % (key, value)\nprint(formatted)\n# Example 3\ntry:",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "b = 0xc5f\nprint('Binary is %d, hex is %d' % (a, b))\n# Example 2\nkey = 'my_var'\nvalue = 1.234\nformatted = '%-10s = %.2f' % (key, value)\nprint(formatted)\n# Example 3\ntry:\n    reordered_tuple = '%-10s = %.2f' % (value, key)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "key = 'my_var'\nvalue = 1.234\nformatted = '%-10s = %.2f' % (key, value)\nprint(formatted)\n# Example 3\ntry:\n    reordered_tuple = '%-10s = %.2f' % (value, key)\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "value = 1.234\nformatted = '%-10s = %.2f' % (key, value)\nprint(formatted)\n# Example 3\ntry:\n    reordered_tuple = '%-10s = %.2f' % (value, key)\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = '%-10s = %.2f' % (key, value)\nprint(formatted)\n# Example 3\ntry:\n    reordered_tuple = '%-10s = %.2f' % (value, key)\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False\n# Example 4",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "pantry",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "pantry = [\n    ('avocados', 1.25),\n    ('bananas', 2.5),\n    ('cherries', 15),\n]\nfor i, (item, count) in enumerate(pantry):\n    print('#%d: %-10s = %.2f' % (i, item, count))\n# Example 6\nfor i, (item, count) in enumerate(pantry):\n    print('#%d: %-10s = %d' % (",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "template = '%s loves food. See %s cook.'\nname = 'Max'\nformatted = template % (name, name)\nprint(formatted)\n# Example 8\nname = 'brad'\nformatted = template % (name.title(), name.title())\nprint(formatted)\n# Example 9\nkey = 'my_var'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "name = 'Max'\nformatted = template % (name, name)\nprint(formatted)\n# Example 8\nname = 'brad'\nformatted = template % (name.title(), name.title())\nprint(formatted)\n# Example 9\nkey = 'my_var'\nvalue = 1.234",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = template % (name, name)\nprint(formatted)\n# Example 8\nname = 'brad'\nformatted = template % (name.title(), name.title())\nprint(formatted)\n# Example 9\nkey = 'my_var'\nvalue = 1.234\nold_way = '%-10s = %.2f' % (key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "name = 'brad'\nformatted = template % (name.title(), name.title())\nprint(formatted)\n# Example 9\nkey = 'my_var'\nvalue = 1.234\nold_way = '%-10s = %.2f' % (key, value)\nnew_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = template % (name.title(), name.title())\nprint(formatted)\n# Example 9\nkey = 'my_var'\nvalue = 1.234\nold_way = '%-10s = %.2f' % (key, value)\nnew_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "key = 'my_var'\nvalue = 1.234\nold_way = '%-10s = %.2f' % (key, value)\nnew_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped\nassert old_way == new_way == reordered\n# Example 10\nname = 'Max'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "value = 1.234\nold_way = '%-10s = %.2f' % (key, value)\nnew_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped\nassert old_way == new_way == reordered\n# Example 10\nname = 'Max'\ntemplate = '%s loves food. See %s cook.'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "old_way",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "old_way = '%-10s = %.2f' % (key, value)\nnew_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped\nassert old_way == new_way == reordered\n# Example 10\nname = 'Max'\ntemplate = '%s loves food. See %s cook.'\nbefore = template % (name, name)   # Tuple",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "new_way",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "new_way = '%(key)-10s = %(value).2f' % {\n    'key': key, 'value': value}  # Original\nreordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped\nassert old_way == new_way == reordered\n# Example 10\nname = 'Max'\ntemplate = '%s loves food. See %s cook.'\nbefore = template % (name, name)   # Tuple\ntemplate = '%(name)s loves food. See %(name)s cook.'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "reordered",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "reordered = '%(key)-10s = %(value).2f' % {\n    'value': value, 'key': key}  # Swapped\nassert old_way == new_way == reordered\n# Example 10\nname = 'Max'\ntemplate = '%s loves food. See %s cook.'\nbefore = template % (name, name)   # Tuple\ntemplate = '%(name)s loves food. See %(name)s cook.'\nafter = template % {'name': name}  # Dictionary\nassert before == after",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "name = 'Max'\ntemplate = '%s loves food. See %s cook.'\nbefore = template % (name, name)   # Tuple\ntemplate = '%(name)s loves food. See %(name)s cook.'\nafter = template % {'name': name}  # Dictionary\nassert before == after\n# Example 11\nfor i, (item, count) in enumerate(pantry):\n    before = '#%d: %-10s = %d' % (\n        i + 1,",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "template = '%s loves food. See %s cook.'\nbefore = template % (name, name)   # Tuple\ntemplate = '%(name)s loves food. See %(name)s cook.'\nafter = template % {'name': name}  # Dictionary\nassert before == after\n# Example 11\nfor i, (item, count) in enumerate(pantry):\n    before = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "before = template % (name, name)   # Tuple\ntemplate = '%(name)s loves food. See %(name)s cook.'\nafter = template % {'name': name}  # Dictionary\nassert before == after\n# Example 11\nfor i, (item, count) in enumerate(pantry):\n    before = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),\n        round(count))",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "template = '%(name)s loves food. See %(name)s cook.'\nafter = template % {'name': name}  # Dictionary\nassert before == after\n# Example 11\nfor i, (item, count) in enumerate(pantry):\n    before = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),\n        round(count))\n    after = '#%(loop)d: %(item)-10s = %(count)d' % {",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "after",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "after = template % {'name': name}  # Dictionary\nassert before == after\n# Example 11\nfor i, (item, count) in enumerate(pantry):\n    before = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),\n        round(count))\n    after = '#%(loop)d: %(item)-10s = %(count)d' % {\n        'loop': i + 1,",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "soup = 'lentil'\nformatted = 'Today\\'s soup is %(soup)s.' % {'soup': soup}\nprint(formatted)\n# Example 13\nmenu = {\n    'soup': 'lentil',\n    'oyster': 'kumamoto',\n    'special': 'schnitzel',\n}\ntemplate = ('Today\\'s soup is %(soup)s, '",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = 'Today\\'s soup is %(soup)s.' % {'soup': soup}\nprint(formatted)\n# Example 13\nmenu = {\n    'soup': 'lentil',\n    'oyster': 'kumamoto',\n    'special': 'schnitzel',\n}\ntemplate = ('Today\\'s soup is %(soup)s, '\n            'buy one get two %(oyster)s oysters, '",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "menu = {\n    'soup': 'lentil',\n    'oyster': 'kumamoto',\n    'special': 'schnitzel',\n}\ntemplate = ('Today\\'s soup is %(soup)s, '\n            'buy one get two %(oyster)s oysters, '\n            'and our special entrée is %(special)s.')\nformatted = template % menu\nprint(formatted)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "template = ('Today\\'s soup is %(soup)s, '\n            'buy one get two %(oyster)s oysters, '\n            'and our special entrée is %(special)s.')\nformatted = template % menu\nprint(formatted)\n# Example 14\na = 1234.5678\nformatted = format(a, ',.2f')\nprint(formatted)\nb = 'my string'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = template % menu\nprint(formatted)\n# Example 14\na = 1234.5678\nformatted = format(a, ',.2f')\nprint(formatted)\nb = 'my string'\nformatted = format(b, '^20s')\nprint('*', formatted, '*')\n# Example 15",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "a = 1234.5678\nformatted = format(a, ',.2f')\nprint(formatted)\nb = 'my string'\nformatted = format(b, '^20s')\nprint('*', formatted, '*')\n# Example 15\nkey = 'my_var'\nvalue = 1.234\nformatted = '{} = {}'.format(key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = format(a, ',.2f')\nprint(formatted)\nb = 'my string'\nformatted = format(b, '^20s')\nprint('*', formatted, '*')\n# Example 15\nkey = 'my_var'\nvalue = 1.234\nformatted = '{} = {}'.format(key, value)\nprint(formatted)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "b = 'my string'\nformatted = format(b, '^20s')\nprint('*', formatted, '*')\n# Example 15\nkey = 'my_var'\nvalue = 1.234\nformatted = '{} = {}'.format(key, value)\nprint(formatted)\n# Example 16\nformatted = '{:<10} = {:.2f}'.format(key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = format(b, '^20s')\nprint('*', formatted, '*')\n# Example 15\nkey = 'my_var'\nvalue = 1.234\nformatted = '{} = {}'.format(key, value)\nprint(formatted)\n# Example 16\nformatted = '{:<10} = {:.2f}'.format(key, value)\nprint(formatted)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "key = 'my_var'\nvalue = 1.234\nformatted = '{} = {}'.format(key, value)\nprint(formatted)\n# Example 16\nformatted = '{:<10} = {:.2f}'.format(key, value)\nprint(formatted)\n# Example 17\nprint('%.2f%%' % 12.5)\nprint('{} replaces {{}}'.format(1.23))",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "value = 1.234\nformatted = '{} = {}'.format(key, value)\nprint(formatted)\n# Example 16\nformatted = '{:<10} = {:.2f}'.format(key, value)\nprint(formatted)\n# Example 17\nprint('%.2f%%' % 12.5)\nprint('{} replaces {{}}'.format(1.23))\n# Example 18",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = '{} = {}'.format(key, value)\nprint(formatted)\n# Example 16\nformatted = '{:<10} = {:.2f}'.format(key, value)\nprint(formatted)\n# Example 17\nprint('%.2f%%' % 12.5)\nprint('{} replaces {{}}'.format(1.23))\n# Example 18\nformatted = '{1} = {0}'.format(key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = '{:<10} = {:.2f}'.format(key, value)\nprint(formatted)\n# Example 17\nprint('%.2f%%' % 12.5)\nprint('{} replaces {{}}'.format(1.23))\n# Example 18\nformatted = '{1} = {0}'.format(key, value)\nprint(formatted)\n# Example 19\nformatted = '{0} loves food. See {0} cook.'.format(name)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = '{1} = {0}'.format(key, value)\nprint(formatted)\n# Example 19\nformatted = '{0} loves food. See {0} cook.'.format(name)\nprint(formatted)\n# Example 20\nfor i, (item, count) in enumerate(pantry):\n    old_style = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = '{0} loves food. See {0} cook.'.format(name)\nprint(formatted)\n# Example 20\nfor i, (item, count) in enumerate(pantry):\n    old_style = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),\n        round(count))\n    new_style = '#{}: {:<10s} = {}'.format(\n        i + 1,",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = 'First letter is {menu[oyster][0]!r}'.format(\n    menu=menu)\nprint(formatted)\n# Example 22\nold_template = (\n    'Today\\'s soup is %(soup)s, '\n    'buy one get two %(oyster)s oysters, '\n    'and our special entrée is %(special)s.')\nold_formatted = old_template % {\n    'soup': 'lentil',",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "old_template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "old_template = (\n    'Today\\'s soup is %(soup)s, '\n    'buy one get two %(oyster)s oysters, '\n    'and our special entrée is %(special)s.')\nold_formatted = old_template % {\n    'soup': 'lentil',\n    'oyster': 'kumamoto',\n    'special': 'schnitzel',\n}\nnew_template = (",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "old_formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "old_formatted = old_template % {\n    'soup': 'lentil',\n    'oyster': 'kumamoto',\n    'special': 'schnitzel',\n}\nnew_template = (\n    'Today\\'s soup is {soup}, '\n    'buy one get two {oyster} oysters, '\n    'and our special entrée is {special}.')\nnew_formatted = new_template.format(",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "new_template",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "new_template = (\n    'Today\\'s soup is {soup}, '\n    'buy one get two {oyster} oysters, '\n    'and our special entrée is {special}.')\nnew_formatted = new_template.format(\n    soup='lentil',\n    oyster='kumamoto',\n    special='schnitzel',\n)\nassert old_formatted == new_formatted",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "new_formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "new_formatted = new_template.format(\n    soup='lentil',\n    oyster='kumamoto',\n    special='schnitzel',\n)\nassert old_formatted == new_formatted\n# Example 23\nkey = 'my_var'\nvalue = 1.234\nformatted = f'{key} = {value}'",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "key = 'my_var'\nvalue = 1.234\nformatted = f'{key} = {value}'\nprint(formatted)\n# Example 24\nformatted = f'{key!r:<10} = {value:.2f}'\nprint(formatted)\n# Example 25\nf_string = f'{key:<10} = {value:.2f}'\nc_tuple  = '%-10s = %.2f' % (key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "value = 1.234\nformatted = f'{key} = {value}'\nprint(formatted)\n# Example 24\nformatted = f'{key!r:<10} = {value:.2f}'\nprint(formatted)\n# Example 25\nf_string = f'{key:<10} = {value:.2f}'\nc_tuple  = '%-10s = %.2f' % (key, value)\nstr_args = '{:<10} = {:.2f}'.format(key, value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = f'{key} = {value}'\nprint(formatted)\n# Example 24\nformatted = f'{key!r:<10} = {value:.2f}'\nprint(formatted)\n# Example 25\nf_string = f'{key:<10} = {value:.2f}'\nc_tuple  = '%-10s = %.2f' % (key, value)\nstr_args = '{:<10} = {:.2f}'.format(key, value)\nstr_kw   = '{key:<10} = {value:.2f}'.format(key=key, value=value)",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "formatted",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "formatted = f'{key!r:<10} = {value:.2f}'\nprint(formatted)\n# Example 25\nf_string = f'{key:<10} = {value:.2f}'\nc_tuple  = '%-10s = %.2f' % (key, value)\nstr_args = '{:<10} = {:.2f}'.format(key, value)\nstr_kw   = '{key:<10} = {value:.2f}'.format(key=key, value=value)\nc_dict   = '%(key)-10s = %(value).2f' % {'key': key, 'value': value}\nassert c_tuple == c_dict == f_string\nassert str_args == str_kw == f_string",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "f_string",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "f_string = f'{key:<10} = {value:.2f}'\nc_tuple  = '%-10s = %.2f' % (key, value)\nstr_args = '{:<10} = {:.2f}'.format(key, value)\nstr_kw   = '{key:<10} = {value:.2f}'.format(key=key, value=value)\nc_dict   = '%(key)-10s = %(value).2f' % {'key': key, 'value': value}\nassert c_tuple == c_dict == f_string\nassert str_args == str_kw == f_string\n# Example 26\nfor i, (item, count) in enumerate(pantry):\n    old_style = '#%d: %-10s = %d' % (",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "str_args",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "str_args = '{:<10} = {:.2f}'.format(key, value)\nstr_kw   = '{key:<10} = {value:.2f}'.format(key=key, value=value)\nc_dict   = '%(key)-10s = %(value).2f' % {'key': key, 'value': value}\nassert c_tuple == c_dict == f_string\nassert str_args == str_kw == f_string\n# Example 26\nfor i, (item, count) in enumerate(pantry):\n    old_style = '#%d: %-10s = %d' % (\n        i + 1,\n        item.title(),",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "places",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "places = 3\nnumber = 1.23456\nprint(f'My number is {number:.{places}f}')",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "example_code.item_04",
        "description": "example_code.item_04",
        "peekOfCode": "number = 1.23456\nprint(f'My number is {number:.{places}f}')",
        "detail": "example_code.item_04",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom urllib.parse import parse_qs\nmy_values = parse_qs('red=5&blue=0&green=',\n                     keep_blank_values=True)",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "get_first_int",
        "kind": 2,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "def get_first_int(values, key, default=0):\n    found = values.get(key, [''])\n    if found[0]:\n        return int(found[0])\n    return default\n# Example 8\ngreen = get_first_int(my_values, 'green')\nprint(f'Green:   {green!r}')",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "my_values",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "my_values = parse_qs('red=5&blue=0&green=',\n                     keep_blank_values=True)\nprint(repr(my_values))\n# Example 2\nprint('Red:     ', my_values.get('red'))\nprint('Green:   ', my_values.get('green'))\nprint('Opacity: ', my_values.get('opacity'))\n# Example 3\n# For query string 'red=5&blue=0&green='\nred = my_values.get('red', [''])[0] or 0",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "red = my_values.get('red', [''])[0] or 0\ngreen = my_values.get('green', [''])[0] or 0\nopacity = my_values.get('opacity', [''])[0] or 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 4\nred = int(my_values.get('red', [''])[0] or 0)\ngreen = int(my_values.get('green', [''])[0] or 0)\nopacity = int(my_values.get('opacity', [''])[0] or 0)",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green = my_values.get('green', [''])[0] or 0\nopacity = my_values.get('opacity', [''])[0] or 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 4\nred = int(my_values.get('red', [''])[0] or 0)\ngreen = int(my_values.get('green', [''])[0] or 0)\nopacity = int(my_values.get('opacity', [''])[0] or 0)\nprint(f'Red:     {red!r}')",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "opacity",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "opacity = my_values.get('opacity', [''])[0] or 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 4\nred = int(my_values.get('red', [''])[0] or 0)\ngreen = int(my_values.get('green', [''])[0] or 0)\nopacity = int(my_values.get('opacity', [''])[0] or 0)\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "red = int(my_values.get('red', [''])[0] or 0)\ngreen = int(my_values.get('green', [''])[0] or 0)\nopacity = int(my_values.get('opacity', [''])[0] or 0)\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 5\nred_str = my_values.get('red', [''])\nred = int(red_str[0]) if red_str[0] else 0\ngreen_str = my_values.get('green', [''])",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green = int(my_values.get('green', [''])[0] or 0)\nopacity = int(my_values.get('opacity', [''])[0] or 0)\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 5\nred_str = my_values.get('red', [''])\nred = int(red_str[0]) if red_str[0] else 0\ngreen_str = my_values.get('green', [''])\ngreen = int(green_str[0]) if green_str[0] else 0",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "opacity",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "opacity = int(my_values.get('opacity', [''])[0] or 0)\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 5\nred_str = my_values.get('red', [''])\nred = int(red_str[0]) if red_str[0] else 0\ngreen_str = my_values.get('green', [''])\ngreen = int(green_str[0]) if green_str[0] else 0\nopacity_str = my_values.get('opacity', [''])",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "red_str",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "red_str = my_values.get('red', [''])\nred = int(red_str[0]) if red_str[0] else 0\ngreen_str = my_values.get('green', [''])\ngreen = int(green_str[0]) if green_str[0] else 0\nopacity_str = my_values.get('opacity', [''])\nopacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "red = int(red_str[0]) if red_str[0] else 0\ngreen_str = my_values.get('green', [''])\ngreen = int(green_str[0]) if green_str[0] else 0\nopacity_str = my_values.get('opacity', [''])\nopacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6\ngreen_str = my_values.get('green', [''])",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green_str",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green_str = my_values.get('green', [''])\ngreen = int(green_str[0]) if green_str[0] else 0\nopacity_str = my_values.get('opacity', [''])\nopacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6\ngreen_str = my_values.get('green', [''])\nif green_str[0]:",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green = int(green_str[0]) if green_str[0] else 0\nopacity_str = my_values.get('opacity', [''])\nopacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6\ngreen_str = my_values.get('green', [''])\nif green_str[0]:\n    green = int(green_str[0])",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "opacity_str",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "opacity_str = my_values.get('opacity', [''])\nopacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6\ngreen_str = my_values.get('green', [''])\nif green_str[0]:\n    green = int(green_str[0])\nelse:",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "opacity",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "opacity = int(opacity_str[0]) if opacity_str[0] else 0\nprint(f'Red:     {red!r}')\nprint(f'Green:   {green!r}')\nprint(f'Opacity: {opacity!r}')\n# Example 6\ngreen_str = my_values.get('green', [''])\nif green_str[0]:\n    green = int(green_str[0])\nelse:\n    green = 0",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green_str",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green_str = my_values.get('green', [''])\nif green_str[0]:\n    green = int(green_str[0])\nelse:\n    green = 0\nprint(f'Green:   {green!r}')\n# Example 7\ndef get_first_int(values, key, default=0):\n    found = values.get(key, [''])\n    if found[0]:",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "example_code.item_05",
        "description": "example_code.item_05",
        "peekOfCode": "green = get_first_int(my_values, 'green')\nprint(f'Green:   {green!r}')",
        "detail": "example_code.item_05",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nsnack_calories = {\n\t'chips': 140,\n\t'popcorn': 80,",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "def bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i] < a[i-1]:\n\t\t\t\ttemp = a[i]\n\t\t\t\ta[i] = a[i-1]\n\t\t\t\ta[i-1] = temp\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "def bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i] < a[i-1]:\n\t\t\t\ta[i-1], a[i] = a[i], a[i-1]  # Swap\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 8\nsnacks = [('bacon', 350), ('donut', 240), ('muffin', 190)]",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "snack_calories",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "snack_calories = {\n\t'chips': 140,\n\t'popcorn': 80,\n\t'nuts': 190,\n}\nitems = tuple(snack_calories.items())\nprint(items)\n# Example 2\nitem = ('Peanut butter', 'Jelly')\nfirst = item[0]",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "items = tuple(snack_calories.items())\nprint(items)\n# Example 2\nitem = ('Peanut butter', 'Jelly')\nfirst = item[0]\nsecond = item[1]\nprint(first, 'and', second)\n# Example 3\ntry:\n    pair = ('Chocolate', 'Peanut butter')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "item = ('Peanut butter', 'Jelly')\nfirst = item[0]\nsecond = item[1]\nprint(first, 'and', second)\n# Example 3\ntry:\n    pair = ('Chocolate', 'Peanut butter')\n    pair[0] = 'Honey'\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "first = item[0]\nsecond = item[1]\nprint(first, 'and', second)\n# Example 3\ntry:\n    pair = ('Chocolate', 'Peanut butter')\n    pair[0] = 'Honey'\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "second = item[1]\nprint(first, 'and', second)\n# Example 3\ntry:\n    pair = ('Chocolate', 'Peanut butter')\n    pair[0] = 'Honey'\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "item = ('Peanut butter', 'Jelly')\nfirst, second = item  # Unpacking\nprint(first, 'and', second)\n# Example 5\nfavorite_snacks = {\n\t'salty': ('pretzels', 100),\n\t'sweet': ('cookies', 180),\n\t'veggie': ('carrots', 20),\n}\n((type1, (name1, cals1)),",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "favorite_snacks",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "favorite_snacks = {\n\t'salty': ('pretzels', 100),\n\t'sweet': ('cookies', 180),\n\t'veggie': ('carrots', 20),\n}\n((type1, (name1, cals1)),\n (type2, (name2, cals2)),\n (type3, (name3, cals3))) = favorite_snacks.items()\nprint(f'Favorite {type1} is {name1} with {cals1} calories')\nprint(f'Favorite {type2} is {name2} with {cals2} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttemp",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\t\t\t\ttemp = a[i]\n\t\t\t\ta[i] = a[i-1]\n\t\t\t\ta[i-1] = temp\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 7\ndef bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ta[i]",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\t\t\t\ta[i] = a[i-1]\n\t\t\t\ta[i-1] = temp\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 7\ndef bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i] < a[i-1]:",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ta[i-1]",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\t\t\t\ta[i-1] = temp\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 7\ndef bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i] < a[i-1]:\n\t\t\t\ta[i-1], a[i] = a[i], a[i-1]  # Swap",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "names = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 7\ndef bubble_sort(a):\n\tfor _ in range(len(a)):\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i] < a[i-1]:\n\t\t\t\ta[i-1], a[i] = a[i], a[i-1]  # Swap\nnames = ['pretzels', 'carrots', 'arugula', 'bacon']",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "names = ['pretzels', 'carrots', 'arugula', 'bacon']\nbubble_sort(names)\nprint(names)\n# Example 8\nsnacks = [('bacon', 350), ('donut', 240), ('muffin', 190)]\nfor i in range(len(snacks)):\n\titem = snacks[i]\n\tname = item[0]\n\tcalories = item[1]\n\tprint(f'#{i+1}: {name} has {calories} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "snacks",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "snacks = [('bacon', 350), ('donut', 240), ('muffin', 190)]\nfor i in range(len(snacks)):\n\titem = snacks[i]\n\tname = item[0]\n\tcalories = item[1]\n\tprint(f'#{i+1}: {name} has {calories} calories')\n# Example 9\nfor rank, (name, calories) in enumerate(snacks, 1):\n\tprint(f'#{rank}: {name} has {calories} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\titem",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\titem = snacks[i]\n\tname = item[0]\n\tcalories = item[1]\n\tprint(f'#{i+1}: {name} has {calories} calories')\n# Example 9\nfor rank, (name, calories) in enumerate(snacks, 1):\n\tprint(f'#{rank}: {name} has {calories} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\tname = item[0]\n\tcalories = item[1]\n\tprint(f'#{i+1}: {name} has {calories} calories')\n# Example 9\nfor rank, (name, calories) in enumerate(snacks, 1):\n\tprint(f'#{rank}: {name} has {calories} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "\tcalories",
        "kind": 5,
        "importPath": "example_code.item_06",
        "description": "example_code.item_06",
        "peekOfCode": "\tcalories = item[1]\n\tprint(f'#{i+1}: {name} has {calories} calories')\n# Example 9\nfor rank, (name, calories) in enumerate(snacks, 1):\n\tprint(f'#{rank}: {name} has {calories} calories')",
        "detail": "example_code.item_06",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom random import randint\nrandom_bits = 0\nfor i in range(32):",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "random_bits",
        "kind": 5,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "random_bits = 0\nfor i in range(32):\n    if randint(0, 1):\n        random_bits |= 1 << i\nprint(bin(random_bits))\n# Example 2\nflavor_list = ['vanilla', 'chocolate', 'pecan', 'strawberry']\nfor flavor in flavor_list:\n    print(f'{flavor} is delicious')\n# Example 3",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "flavor_list",
        "kind": 5,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "flavor_list = ['vanilla', 'chocolate', 'pecan', 'strawberry']\nfor flavor in flavor_list:\n    print(f'{flavor} is delicious')\n# Example 3\nfor i in range(len(flavor_list)):\n    flavor = flavor_list[i]\n    print(f'{i + 1}: {flavor}')\n# Example 4\nit = enumerate(flavor_list)\nprint(next(it))",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_07",
        "description": "example_code.item_07",
        "peekOfCode": "it = enumerate(flavor_list)\nprint(next(it))\nprint(next(it))\n# Example 5\nfor i, flavor in enumerate(flavor_list):\n    print(f'{i + 1}: {flavor}')\n# Example 6\nfor i, flavor in enumerate(flavor_list, 1):\n    print(f'{i}: {flavor}')",
        "detail": "example_code.item_07",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nnames = ['Cecilia', 'Lise', 'Marie']\ncounts = [len(n) for n in names]\nprint(counts)",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "names = ['Cecilia', 'Lise', 'Marie']\ncounts = [len(n) for n in names]\nprint(counts)\n# Example 2\nlongest_name = None\nmax_count = 0\nfor i in range(len(names)):\n    count = counts[i]\n    if count > max_count:\n        longest_name = names[i]",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "counts = [len(n) for n in names]\nprint(counts)\n# Example 2\nlongest_name = None\nmax_count = 0\nfor i in range(len(names)):\n    count = counts[i]\n    if count > max_count:\n        longest_name = names[i]\n        max_count = count",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "longest_name",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "longest_name = None\nmax_count = 0\nfor i in range(len(names)):\n    count = counts[i]\n    if count > max_count:\n        longest_name = names[i]\n        max_count = count\nprint(longest_name)\n# Example 3\nlongest_name = None",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "max_count",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "max_count = 0\nfor i in range(len(names)):\n    count = counts[i]\n    if count > max_count:\n        longest_name = names[i]\n        max_count = count\nprint(longest_name)\n# Example 3\nlongest_name = None\nmax_count = 0",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "longest_name",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "longest_name = None\nmax_count = 0\nfor i, name in enumerate(names):\n    count = counts[i]\n    if count > max_count:\n        longest_name = name\n        max_count = count\nassert longest_name == 'Cecilia'\n# Example 4\nlongest_name = None",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "max_count",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "max_count = 0\nfor i, name in enumerate(names):\n    count = counts[i]\n    if count > max_count:\n        longest_name = name\n        max_count = count\nassert longest_name == 'Cecilia'\n# Example 4\nlongest_name = None\nmax_count = 0",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "longest_name",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "longest_name = None\nmax_count = 0\nfor name, count in zip(names, counts):\n    if count > max_count:\n        longest_name = name\n        max_count = count\nassert longest_name == 'Cecilia'\n# Example 5\nnames.append('Rosalind')\nfor name, count in zip(names, counts):",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "max_count",
        "kind": 5,
        "importPath": "example_code.item_08",
        "description": "example_code.item_08",
        "peekOfCode": "max_count = 0\nfor name, count in zip(names, counts):\n    if count > max_count:\n        longest_name = name\n        max_count = count\nassert longest_name == 'Cecilia'\n# Example 5\nnames.append('Rosalind')\nfor name, count in zip(names, counts):\n    print(name)",
        "detail": "example_code.item_08",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfor i in range(3):\n    print('Loop', i)\nelse:",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "coprime",
        "kind": 2,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "def coprime(a, b):\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True\nassert coprime(4, 9)\nassert not coprime(3, 6)\n# Example 7\ndef coprime_alternate(a, b):\n    is_coprime = True",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "coprime_alternate",
        "kind": 2,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "def coprime_alternate(a, b):\n    is_coprime = True\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            is_coprime = False\n            break\n    return is_coprime\nassert coprime_alternate(4, 9)\nassert not coprime_alternate(3, 6)",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "a = 4\nb = 9\nfor i in range(2, min(a, b) + 1):\n    print('Testing', i)\n    if a % i == 0 and b % i == 0:\n        print('Not coprime')\n        break\nelse:\n    print('Coprime')\n# Example 6",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_09",
        "description": "example_code.item_09",
        "peekOfCode": "b = 9\nfor i in range(2, min(a, b) + 1):\n    print('Testing', i)\n    if a % i == 0 and b % i == 0:\n        print('Not coprime')\n        break\nelse:\n    print('Coprime')\n# Example 6\ndef coprime(a, b):",
        "detail": "example_code.item_09",
        "documentation": {}
    },
    {
        "label": "OutOfBananas",
        "kind": 6,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "class OutOfBananas(Exception):\n    pass\ndef make_smoothies(count):\n    print(f'Making a smoothies with {count} banana slices')\npieces = 0\ncount = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\ntry:\n    smoothies = make_smoothies(pieces)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfresh_fruit = {\n    'apple': 10,\n    'banana': 8,",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "make_lemonade",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def make_lemonade(count):\n    print(f'Making {count} lemons into lemonade')\ndef out_of_stock():\n    print('Out of stock!')\ncount = fresh_fruit.get('lemon', 0)\nif count:\n    make_lemonade(count)\nelse:\n    out_of_stock()\n# Example 3",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "out_of_stock",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def out_of_stock():\n    print('Out of stock!')\ncount = fresh_fruit.get('lemon', 0)\nif count:\n    make_lemonade(count)\nelse:\n    out_of_stock()\n# Example 3\nif count := fresh_fruit.get('lemon', 0):\n    make_lemonade(count)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "make_cider",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def make_cider(count):\n    print(f'Making cider with {count} apples')\ncount = fresh_fruit.get('apple', 0)\nif count >= 4:\n    make_cider(count)\nelse:\n    out_of_stock()\n# Example 5\nif (count := fresh_fruit.get('apple', 0)) >= 4:\n    make_cider(count)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "slice_bananas",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def slice_bananas(count):\n    print(f'Slicing {count} bananas')\n    return count * 4\nclass OutOfBananas(Exception):\n    pass\ndef make_smoothies(count):\n    print(f'Making a smoothies with {count} banana slices')\npieces = 0\ncount = fresh_fruit.get('banana', 0)\nif count >= 2:",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "make_smoothies",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def make_smoothies(count):\n    print(f'Making a smoothies with {count} banana slices')\npieces = 0\ncount = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\ntry:\n    smoothies = make_smoothies(pieces)\nexcept OutOfBananas:\n    out_of_stock()",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "pick_fruit",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def pick_fruit():\n    if FRUIT_TO_PICK:\n        return FRUIT_TO_PICK.pop(0)\n    else:\n        return []\ndef make_juice(fruit, count):\n    return [(fruit, count)]\nbottles = []\nfresh_fruit = pick_fruit()\nwhile fresh_fruit:",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "make_juice",
        "kind": 2,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "def make_juice(fruit, count):\n    return [(fruit, count)]\nbottles = []\nfresh_fruit = pick_fruit()\nwhile fresh_fruit:\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)\n    fresh_fruit = pick_fruit()\nprint(bottles)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "fresh_fruit",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "fresh_fruit = {\n    'apple': 10,\n    'banana': 8,\n    'lemon': 5,\n}\n# Example 2\ndef make_lemonade(count):\n    print(f'Making {count} lemons into lemonade')\ndef out_of_stock():\n    print('Out of stock!')",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "count = fresh_fruit.get('lemon', 0)\nif count:\n    make_lemonade(count)\nelse:\n    out_of_stock()\n# Example 3\nif count := fresh_fruit.get('lemon', 0):\n    make_lemonade(count)\nelse:\n    out_of_stock()",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "count = fresh_fruit.get('apple', 0)\nif count >= 4:\n    make_cider(count)\nelse:\n    out_of_stock()\n# Example 5\nif (count := fresh_fruit.get('apple', 0)) >= 4:\n    make_cider(count)\nelse:\n    out_of_stock()",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "pieces",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "pieces = 0\ncount = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\ntry:\n    smoothies = make_smoothies(pieces)\nexcept OutOfBananas:\n    out_of_stock()\n# Example 7\ncount = fresh_fruit.get('banana', 0)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "count = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\ntry:\n    smoothies = make_smoothies(pieces)\nexcept OutOfBananas:\n    out_of_stock()\n# Example 7\ncount = fresh_fruit.get('banana', 0)\nif count >= 2:",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "count = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\nelse:\n    pieces = 0\ntry:\n    smoothies = make_smoothies(pieces)\nexcept OutOfBananas:\n    out_of_stock()\n# Example 8",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "pieces",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "pieces = 0\nif (count := fresh_fruit.get('banana', 0)) >= 2:\n    pieces = slice_bananas(count)\ntry:\n    smoothies = make_smoothies(pieces)\nexcept OutOfBananas:\n    out_of_stock()\n# Example 9\nif (count := fresh_fruit.get('banana', 0)) >= 2:\n    pieces = slice_bananas(count)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "count = fresh_fruit.get('banana', 0)\nif count >= 2:\n    pieces = slice_bananas(count)\n    to_enjoy = make_smoothies(pieces)\nelse:\n    count = fresh_fruit.get('apple', 0)\n    if count >= 4:\n        to_enjoy = make_cider(count)\n    else:\n        count = fresh_fruit.get('lemon', 0)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "FRUIT_TO_PICK",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "FRUIT_TO_PICK = [\n    {'apple': 1, 'banana': 3},\n    {'lemon': 2, 'lime': 5},\n    {'orange': 3, 'melon': 2},\n]\ndef pick_fruit():\n    if FRUIT_TO_PICK:\n        return FRUIT_TO_PICK.pop(0)\n    else:\n        return []",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "bottles",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "bottles = []\nfresh_fruit = pick_fruit()\nwhile fresh_fruit:\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)\n    fresh_fruit = pick_fruit()\nprint(bottles)\n# Example 13\nFRUIT_TO_PICK = [",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "fresh_fruit",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "fresh_fruit = pick_fruit()\nwhile fresh_fruit:\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)\n    fresh_fruit = pick_fruit()\nprint(bottles)\n# Example 13\nFRUIT_TO_PICK = [\n    {'apple': 1, 'banana': 3},",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "FRUIT_TO_PICK",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "FRUIT_TO_PICK = [\n    {'apple': 1, 'banana': 3},\n    {'lemon': 2, 'lime': 5},\n    {'orange': 3, 'melon': 2},\n]\nbottles = []\nwhile True:                     # Loop\n    fresh_fruit = pick_fruit()\n    if not fresh_fruit:         # And a half\n        break",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "bottles",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "bottles = []\nwhile True:                     # Loop\n    fresh_fruit = pick_fruit()\n    if not fresh_fruit:         # And a half\n        break\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)\nprint(bottles)\n# Example 14",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "FRUIT_TO_PICK",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "FRUIT_TO_PICK = [\n    {'apple': 1, 'banana': 3},\n    {'lemon': 2, 'lime': 5},\n    {'orange': 3, 'melon': 2},\n]\nbottles = []\nwhile fresh_fruit := pick_fruit():\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "bottles",
        "kind": 5,
        "importPath": "example_code.item_10",
        "description": "example_code.item_10",
        "peekOfCode": "bottles = []\nwhile fresh_fruit := pick_fruit():\n    for fruit, count in fresh_fruit.items():\n        batch = make_juice(fruit, count)\n        bottles.extend(batch)\nprint(bottles)",
        "detail": "example_code.item_10",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\na = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nprint('Middle two:  ', a[3:5])\nprint('All but ends:', a[1:7])",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nprint('Middle two:  ', a[3:5])\nprint('All but ends:', a[1:7])\n# Example 2\nassert a[:5] == a[0:5]\n# Example 3\nassert a[5:] == a[5:len(a)]\n# Example 4\nprint(a[:])\nprint(a[:5])",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "first_twenty_items",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "first_twenty_items = a[:20]\nlast_twenty_items = a[-20:]\n# Example 7\ntry:\n    a[20]\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False\n# Example 8",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "last_twenty_items",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "last_twenty_items = a[-20:]\n# Example 7\ntry:\n    a[20]\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False\n# Example 8\nb = a[3:]",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "b = a[3:]\nprint('Before:   ', b)\nb[1] = 99\nprint('After:    ', b)\nprint('No change:', a)\n# Example 9\nprint('Before ', a)\na[2:7] = [99, 22, 14]\nprint('After  ', a)\n# Example 10",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "b[1]",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "b[1] = 99\nprint('After:    ', b)\nprint('No change:', a)\n# Example 9\nprint('Before ', a)\na[2:7] = [99, 22, 14]\nprint('After  ', a)\n# Example 10\nprint('Before ', a)\na[2:3] = [47, 11]",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "a[2:7]",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "a[2:7] = [99, 22, 14]\nprint('After  ', a)\n# Example 10\nprint('Before ', a)\na[2:3] = [47, 11]\nprint('After  ', a)\n# Example 11\nb = a[:]\nassert b == a and b is not a\n# Example 12",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "a[2:3]",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "a[2:3] = [47, 11]\nprint('After  ', a)\n# Example 11\nb = a[:]\nassert b == a and b is not a\n# Example 12\nb = a\nprint('Before a', a)\nprint('Before b', b)\na[:] = [101, 102, 103]",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "b = a[:]\nassert b == a and b is not a\n# Example 12\nb = a\nprint('Before a', a)\nprint('Before b', b)\na[:] = [101, 102, 103]\nassert a is b             # Still the same list object\nprint('After a ', a)      # Now has different contents\nprint('After b ', b)      # Same list, so same contents as a",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "b = a\nprint('Before a', a)\nprint('Before b', b)\na[:] = [101, 102, 103]\nassert a is b             # Still the same list object\nprint('After a ', a)      # Now has different contents\nprint('After b ', b)      # Same list, so same contents as a",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "a[:]",
        "kind": 5,
        "importPath": "example_code.item_11",
        "description": "example_code.item_11",
        "peekOfCode": "a[:] = [101, 102, 103]\nassert a is b             # Still the same list object\nprint('After a ', a)      # Now has different contents\nprint('After b ', b)      # Same list, so same contents as a",
        "detail": "example_code.item_11",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nx = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']\nodds = x[::2]\nevens = x[1::2]",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "x = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']\nodds = x[::2]\nevens = x[1::2]\nprint(odds)\nprint(evens)\n# Example 2\nx = b'mongoose'\ny = x[::-1]\nprint(y)\n# Example 3",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "odds",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "odds = x[::2]\nevens = x[1::2]\nprint(odds)\nprint(evens)\n# Example 2\nx = b'mongoose'\ny = x[::-1]\nprint(y)\n# Example 3\nx = '寿司'",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "evens",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "evens = x[1::2]\nprint(odds)\nprint(evens)\n# Example 2\nx = b'mongoose'\ny = x[::-1]\nprint(y)\n# Example 3\nx = '寿司'\ny = x[::-1]",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "x = b'mongoose'\ny = x[::-1]\nprint(y)\n# Example 3\nx = '寿司'\ny = x[::-1]\nprint(y)\n# Example 4\ntry:\n    w = '寿司'",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "y = x[::-1]\nprint(y)\n# Example 3\nx = '寿司'\ny = x[::-1]\nprint(y)\n# Example 4\ntry:\n    w = '寿司'\n    x = w.encode('utf-8')",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "x = '寿司'\ny = x[::-1]\nprint(y)\n# Example 4\ntry:\n    w = '寿司'\n    x = w.encode('utf-8')\n    y = x[::-1]\n    z = y.decode('utf-8')\nexcept:",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "y = x[::-1]\nprint(y)\n# Example 4\ntry:\n    w = '寿司'\n    x = w.encode('utf-8')\n    y = x[::-1]\n    z = y.decode('utf-8')\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nx[::2]   # ['a', 'c', 'e', 'g']\nx[::-2]  # ['h', 'f', 'd', 'b']\n# Example 6\nx[2::2]     # ['c', 'e', 'g']\nx[-2::-2]   # ['g', 'e', 'c', 'a']\nx[-2:2:-2]  # ['g', 'e']\nx[2:2:-2]   # []\n# Example 7\ny = x[::2]   # ['a', 'c', 'e', 'g']",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "y = x[::2]   # ['a', 'c', 'e', 'g']\nz = y[1:-1]  # ['c', 'e']\nprint(x)\nprint(y)\nprint(z)",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "example_code.item_12",
        "description": "example_code.item_12",
        "peekOfCode": "z = y[1:-1]  # ['c', 'e']\nprint(x)\nprint(y)\nprint(z)",
        "detail": "example_code.item_12",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ntry:\n    car_ages = [0, 9, 4, 8, 7, 20, 19, 1, 6, 15]\n    car_ages_descending = sorted(car_ages, reverse=True)",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "generate_csv",
        "kind": 2,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "def generate_csv():\n\tyield ('Date', 'Make' , 'Model', 'Year', 'Price')\n\tfor i in range(100):\n\t\tyield ('2019-03-25', 'Honda', 'Fit' , '2010', '$3400')\n\t\tyield ('2019-03-26', 'Ford', 'F150' , '2008', '$2400')\n# Example 11\nall_csv_rows = list(generate_csv())\nheader = all_csv_rows[0]\nrows = all_csv_rows[1:]\nprint('CSV Header:', header)",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "oldest",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "oldest = car_ages_descending[0]\nsecond_oldest = car_ages_descending[1]\nothers = car_ages_descending[2:]\nprint(oldest, second_oldest, others)\n# Example 3\noldest, second_oldest, *others = car_ages_descending\nprint(oldest, second_oldest, others)\n# Example 4\noldest, *others, youngest = car_ages_descending\nprint(oldest, youngest, others)",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "second_oldest",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "second_oldest = car_ages_descending[1]\nothers = car_ages_descending[2:]\nprint(oldest, second_oldest, others)\n# Example 3\noldest, second_oldest, *others = car_ages_descending\nprint(oldest, second_oldest, others)\n# Example 4\noldest, *others, youngest = car_ages_descending\nprint(oldest, youngest, others)\n*others, second_youngest, youngest = car_ages_descending",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "others",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "others = car_ages_descending[2:]\nprint(oldest, second_oldest, others)\n# Example 3\noldest, second_oldest, *others = car_ages_descending\nprint(oldest, second_oldest, others)\n# Example 4\noldest, *others, youngest = car_ages_descending\nprint(oldest, youngest, others)\n*others, second_youngest, youngest = car_ages_descending\nprint(youngest, second_youngest, others)",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "car_inventory",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "car_inventory = {\n\t'Downtown': ('Silver Shadow', 'Pinto', 'DMC'),\n\t'Airport': ('Skyline', 'Viper', 'Gremlin', 'Nova'),\n}\n((loc1, (best1, *rest1)),\n (loc2, (best2, *rest2))) = car_inventory.items()\nprint(f'Best at {loc1} is {best1}, {len(rest1)} others')\nprint(f'Best at {loc2} is {best2}, {len(rest2)} others')\n# Example 8\nshort_list = [1, 2]",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "short_list",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "short_list = [1, 2]\nfirst, second, *rest = short_list\nprint(first, second, rest)\n# Example 9\nit = iter(range(1, 3))\nfirst, second = it\nprint(f'{first} and {second}')\n# Example 10\ndef generate_csv():\n\tyield ('Date', 'Make' , 'Model', 'Year', 'Price')",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "it = iter(range(1, 3))\nfirst, second = it\nprint(f'{first} and {second}')\n# Example 10\ndef generate_csv():\n\tyield ('Date', 'Make' , 'Model', 'Year', 'Price')\n\tfor i in range(100):\n\t\tyield ('2019-03-25', 'Honda', 'Fit' , '2010', '$3400')\n\t\tyield ('2019-03-26', 'Ford', 'F150' , '2008', '$2400')\n# Example 11",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "all_csv_rows",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "all_csv_rows = list(generate_csv())\nheader = all_csv_rows[0]\nrows = all_csv_rows[1:]\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))\n# Example 12\nit = generate_csv()\nheader, *rows = it\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "header = all_csv_rows[0]\nrows = all_csv_rows[1:]\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))\n# Example 12\nit = generate_csv()\nheader, *rows = it\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "rows = all_csv_rows[1:]\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))\n# Example 12\nit = generate_csv()\nheader, *rows = it\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_13",
        "description": "example_code.item_13",
        "peekOfCode": "it = generate_csv()\nheader, *rows = it\nprint('CSV Header:', header)\nprint('Row count: ', len(rows))",
        "detail": "example_code.item_13",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "class Tool:\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n    def __repr__(self):\n        return f'Tool({self.name!r}, {self.weight})'\ntools = [\n    Tool('level', 3.5),\n    Tool('hammer', 1.25),\n    Tool('screwdriver', 0.5),",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nnumbers = [93, 86, 11, 68, 70]\nnumbers.sort()\nprint(numbers)",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "numbers = [93, 86, 11, 68, 70]\nnumbers.sort()\nprint(numbers)\n# Example 2\nclass Tool:\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n    def __repr__(self):\n        return f'Tool({self.name!r}, {self.weight})'",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "tools = [\n    Tool('level', 3.5),\n    Tool('hammer', 1.25),\n    Tool('screwdriver', 0.5),\n    Tool('chisel', 0.25),\n]\n# Example 3\ntry:\n    tools.sort()\nexcept:",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "places",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "places = ['home', 'work', 'New York', 'Paris']\nplaces.sort()\nprint('Case sensitive:  ', places)\nplaces.sort(key=lambda x: x.lower())\nprint('Case insensitive:', places)\n# Example 7\npower_tools = [\n    Tool('drill', 4),\n    Tool('circular saw', 5),\n    Tool('jackhammer', 40),",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "power_tools",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "power_tools = [\n    Tool('drill', 4),\n    Tool('circular saw', 5),\n    Tool('jackhammer', 40),\n    Tool('sander', 4),\n]\n# Example 8\nsaw = (5, 'circular saw')\njackhammer = (40, 'jackhammer')\nassert not (jackhammer < saw)  # Matches expectations",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "saw",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "saw = (5, 'circular saw')\njackhammer = (40, 'jackhammer')\nassert not (jackhammer < saw)  # Matches expectations\n# Example 9\ndrill = (4, 'drill')\nsander = (4, 'sander')\nassert drill[0] == sander[0]  # Same weight\nassert drill[1] < sander[1]   # Alphabetically less\nassert drill < sander         # Thus, drill comes first\n# Example 10",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "jackhammer",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "jackhammer = (40, 'jackhammer')\nassert not (jackhammer < saw)  # Matches expectations\n# Example 9\ndrill = (4, 'drill')\nsander = (4, 'sander')\nassert drill[0] == sander[0]  # Same weight\nassert drill[1] < sander[1]   # Alphabetically less\nassert drill < sander         # Thus, drill comes first\n# Example 10\npower_tools.sort(key=lambda x: (x.weight, x.name))",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "drill",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "drill = (4, 'drill')\nsander = (4, 'sander')\nassert drill[0] == sander[0]  # Same weight\nassert drill[1] < sander[1]   # Alphabetically less\nassert drill < sander         # Thus, drill comes first\n# Example 10\npower_tools.sort(key=lambda x: (x.weight, x.name))\nprint(power_tools)\n# Example 11\npower_tools.sort(key=lambda x: (x.weight, x.name),",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "sander",
        "kind": 5,
        "importPath": "example_code.item_14",
        "description": "example_code.item_14",
        "peekOfCode": "sander = (4, 'sander')\nassert drill[0] == sander[0]  # Same weight\nassert drill[1] < sander[1]   # Alphabetically less\nassert drill < sander         # Thus, drill comes first\n# Example 10\npower_tools.sort(key=lambda x: (x.weight, x.name))\nprint(power_tools)\n# Example 11\npower_tools.sort(key=lambda x: (x.weight, x.name),\n                 reverse=True)  # Makes all criteria descending",
        "detail": "example_code.item_14",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "class MyClass:\n    def __init__(self):\n        self.alligator = 'hatchling'\n        self.elephant = 'calf'\na = MyClass()\nfor key, value in a.__dict__.items():\n    print(f'{key} = {value}')\n# Example 9\nvotes = {\n    'otter': 1281,",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "SortedDict",
        "kind": 6,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "class SortedDict(MutableMapping):\n    def __init__(self):\n        self.data = {}\n    def __getitem__(self, key):\n        return self.data[key]\n    def __setitem__(self, key, value):\n        self.data[key] = value\n    def __delitem__(self, key):\n        del self.data[key]\n    def __iter__(self):",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 2\nbaby_names = {\n    'cat': 'kitten',\n    'dog': 'puppy',",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "def my_func(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key} = {value}')\nmy_func(goose='gosling', kangaroo='joey')\n# Example 8\nclass MyClass:\n    def __init__(self):\n        self.alligator = 'hatchling'\n        self.elephant = 'calf'\na = MyClass()",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "populate_ranks",
        "kind": 2,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "def populate_ranks(votes, ranks):\n    names = list(votes.keys())\n    names.sort(key=votes.get, reverse=True)\n    for i, name in enumerate(names, 1):\n        ranks[name] = i\n# Example 11\ndef get_winner(ranks):\n    return next(iter(ranks))\n# Example 12\nranks = {}",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "get_winner",
        "kind": 2,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "def get_winner(ranks):\n    return next(iter(ranks))\n# Example 12\nranks = {}\npopulate_ranks(votes, ranks)\nprint(ranks)\nwinner = get_winner(ranks)\nprint(winner)\n# Example 13\nfrom collections.abc import MutableMapping",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "get_winner",
        "kind": 2,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "def get_winner(ranks):\n    for name, rank in ranks.items():\n        if rank == 1:\n            return name\nwinner = get_winner(sorted_ranks)\nprint(winner)\n# Example 16\ntry:\n    def get_winner(ranks):\n        if not isinstance(ranks, dict):",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 2",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "baby_names",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "baby_names = {\n    'cat': 'kitten',\n    'dog': 'puppy',\n}\nprint(baby_names)\n# Example 4\nprint(list(baby_names.keys()))\nprint(list(baby_names.values()))\nprint(list(baby_names.items()))\nprint(baby_names.popitem())  # Last item inserted",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "a = MyClass()\nfor key, value in a.__dict__.items():\n    print(f'{key} = {value}')\n# Example 9\nvotes = {\n    'otter': 1281,\n    'polar bear': 587,\n    'fox': 863,\n}\n# Example 10",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "votes",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "votes = {\n    'otter': 1281,\n    'polar bear': 587,\n    'fox': 863,\n}\n# Example 10\ndef populate_ranks(votes, ranks):\n    names = list(votes.keys())\n    names.sort(key=votes.get, reverse=True)\n    for i, name in enumerate(names, 1):",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "ranks",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "ranks = {}\npopulate_ranks(votes, ranks)\nprint(ranks)\nwinner = get_winner(ranks)\nprint(winner)\n# Example 13\nfrom collections.abc import MutableMapping\nclass SortedDict(MutableMapping):\n    def __init__(self):\n        self.data = {}",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "winner = get_winner(ranks)\nprint(winner)\n# Example 13\nfrom collections.abc import MutableMapping\nclass SortedDict(MutableMapping):\n    def __init__(self):\n        self.data = {}\n    def __getitem__(self, key):\n        return self.data[key]\n    def __setitem__(self, key, value):",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "my_dict = SortedDict()\nmy_dict['otter'] = 1\nmy_dict['cheeta'] = 2\nmy_dict['anteater'] = 3\nmy_dict['deer'] = 4\nassert my_dict['otter'] == 1\nassert 'cheeta' in my_dict\ndel my_dict['cheeta']\nassert 'cheeta' not in my_dict\nexpected = [('anteater', 3), ('deer', 4), ('otter', 1)]",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_dict['otter']",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "my_dict['otter'] = 1\nmy_dict['cheeta'] = 2\nmy_dict['anteater'] = 3\nmy_dict['deer'] = 4\nassert my_dict['otter'] == 1\nassert 'cheeta' in my_dict\ndel my_dict['cheeta']\nassert 'cheeta' not in my_dict\nexpected = [('anteater', 3), ('deer', 4), ('otter', 1)]\nassert list(my_dict.items()) == expected",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_dict['cheeta']",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "my_dict['cheeta'] = 2\nmy_dict['anteater'] = 3\nmy_dict['deer'] = 4\nassert my_dict['otter'] == 1\nassert 'cheeta' in my_dict\ndel my_dict['cheeta']\nassert 'cheeta' not in my_dict\nexpected = [('anteater', 3), ('deer', 4), ('otter', 1)]\nassert list(my_dict.items()) == expected\nassert not isinstance(my_dict, dict)",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_dict['anteater']",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "my_dict['anteater'] = 3\nmy_dict['deer'] = 4\nassert my_dict['otter'] == 1\nassert 'cheeta' in my_dict\ndel my_dict['cheeta']\nassert 'cheeta' not in my_dict\nexpected = [('anteater', 3), ('deer', 4), ('otter', 1)]\nassert list(my_dict.items()) == expected\nassert not isinstance(my_dict, dict)\n# Example 14",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "my_dict['deer']",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "my_dict['deer'] = 4\nassert my_dict['otter'] == 1\nassert 'cheeta' in my_dict\ndel my_dict['cheeta']\nassert 'cheeta' not in my_dict\nexpected = [('anteater', 3), ('deer', 4), ('otter', 1)]\nassert list(my_dict.items()) == expected\nassert not isinstance(my_dict, dict)\n# Example 14\nsorted_ranks = SortedDict()",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "expected",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "expected = [('anteater', 3), ('deer', 4), ('otter', 1)]\nassert list(my_dict.items()) == expected\nassert not isinstance(my_dict, dict)\n# Example 14\nsorted_ranks = SortedDict()\npopulate_ranks(votes, sorted_ranks)\nprint(sorted_ranks.data)\nwinner = get_winner(sorted_ranks)\nprint(winner)\n# Example 15",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "sorted_ranks",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "sorted_ranks = SortedDict()\npopulate_ranks(votes, sorted_ranks)\nprint(sorted_ranks.data)\nwinner = get_winner(sorted_ranks)\nprint(winner)\n# Example 15\ndef get_winner(ranks):\n    for name, rank in ranks.items():\n        if rank == 1:\n            return name",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "winner = get_winner(sorted_ranks)\nprint(winner)\n# Example 15\ndef get_winner(ranks):\n    for name, rank in ranks.items():\n        if rank == 1:\n            return name\nwinner = get_winner(sorted_ranks)\nprint(winner)\n# Example 16",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "example_code.item_15",
        "description": "example_code.item_15",
        "peekOfCode": "winner = get_winner(sorted_ranks)\nprint(winner)\n# Example 16\ntry:\n    def get_winner(ranks):\n        if not isinstance(ranks, dict):\n            raise TypeError('must provide a dict instance')\n        return next(iter(ranks))\n    assert get_winner(ranks) == 'otter'\n    get_winner(sorted_ranks)",
        "detail": "example_code.item_15",
        "documentation": {}
    },
    {
        "label": "baby_names",
        "kind": 5,
        "importPath": "example_code.item_15_example_01",
        "description": "example_code.item_15_example_01",
        "peekOfCode": "baby_names = {\n    'cat': 'kitten',\n    'dog': 'puppy',\n}\nprint(baby_names)",
        "detail": "example_code.item_15_example_01",
        "documentation": {}
    },
    {
        "label": "baby_names",
        "kind": 5,
        "importPath": "example_code.item_15_example_03",
        "description": "example_code.item_15_example_03",
        "peekOfCode": "baby_names = {\n    'cat': 'kitten',\n    'dog': 'puppy',\n}\nprint(list(baby_names.keys()))\nprint(list(baby_names.values()))\nprint(list(baby_names.items()))\nprint(baby_names.popitem())  # Randomly chooses an item",
        "detail": "example_code.item_15_example_03",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "example_code.item_15_example_05",
        "description": "example_code.item_15_example_05",
        "peekOfCode": "def my_func(**kwargs):\n    for key, value in kwargs.items():\n        print('%s = %s' % (key, value))\nmy_func(goose='gosling', kangaroo='joey')",
        "detail": "example_code.item_15_example_05",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "example_code.item_15_example_07",
        "description": "example_code.item_15_example_07",
        "peekOfCode": "class MyClass:\n    def __init__(self):\n        self.alligator = 'hatchling'\n        self.elephant = 'calf'\na = MyClass()\nfor key, value in a.__dict__.items():\n    print('%s = %s' % (key, value))",
        "detail": "example_code.item_15_example_07",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_15_example_07",
        "description": "example_code.item_15_example_07",
        "peekOfCode": "a = MyClass()\nfor key, value in a.__dict__.items():\n    print('%s = %s' % (key, value))",
        "detail": "example_code.item_15_example_07",
        "documentation": {}
    },
    {
        "label": "SortedDict",
        "kind": 6,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "class SortedDict(MutableMapping[str, int]):\n    def __init__(self) -> None:\n        self.data: Dict[str, int] = {}\n    def __getitem__(self, key: str) -> int:\n        return self.data[key]\n    def __setitem__(self, key: str, value: int) -> None:\n        self.data[key] = value\n    def __delitem__(self, key: str) -> None:\n        del self.data[key]\n    def __iter__(self) -> Iterator[str]:",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "populate_ranks",
        "kind": 2,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "def populate_ranks(votes: Dict[str, int],\n                   ranks: Dict[str, int]) -> None:\n    names = list(votes.keys())\n    names.sort(key=votes.get, reverse=True)\n    for i, name in enumerate(names, 1):\n        ranks[name] = i\ndef get_winner(ranks: Dict[str, int]) -> str:\n    return next(iter(ranks))\nfrom typing import Iterator, MutableMapping\nclass SortedDict(MutableMapping[str, int]):",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "get_winner",
        "kind": 2,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "def get_winner(ranks: Dict[str, int]) -> str:\n    return next(iter(ranks))\nfrom typing import Iterator, MutableMapping\nclass SortedDict(MutableMapping[str, int]):\n    def __init__(self) -> None:\n        self.data: Dict[str, int] = {}\n    def __getitem__(self, key: str) -> int:\n        return self.data[key]\n    def __setitem__(self, key: str, value: int) -> None:\n        self.data[key] = value",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "votes",
        "kind": 5,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "votes = {\n    'otter': 1281,\n    'polar bear': 587,\n    'fox': 863,\n}\nsorted_ranks = SortedDict()\npopulate_ranks(votes, sorted_ranks)\nprint(sorted_ranks.data)\nwinner = get_winner(sorted_ranks)\nprint(winner)",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "sorted_ranks",
        "kind": 5,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "sorted_ranks = SortedDict()\npopulate_ranks(votes, sorted_ranks)\nprint(sorted_ranks.data)\nwinner = get_winner(sorted_ranks)\nprint(winner)",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "example_code.item_15_example_17",
        "description": "example_code.item_15_example_17",
        "peekOfCode": "winner = get_winner(sorted_ranks)\nprint(winner)",
        "detail": "example_code.item_15_example_17",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ncounters = {\n    'pumpernickel': 2,\n    'sourdough': 1,",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "counters = {\n    'pumpernickel': 2,\n    'sourdough': 1,\n}\n# Example 2\nkey = 'wheat'\nif key in counters:\n    count = counters[key]\nelse:\n    count = 0",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'wheat'\nif key in counters:\n    count = counters[key]\nelse:\n    count = 0\ncounters[key] = count + 1\nprint(counters)\n# Example 3\nkey = 'brioche'\ntry:",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "counters[key]",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "counters[key] = count + 1\nprint(counters)\n# Example 3\nkey = 'brioche'\ntry:\n    count = counters[key]\nexcept KeyError:\n    count = 0\ncounters[key] = count + 1\nprint(counters)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'brioche'\ntry:\n    count = counters[key]\nexcept KeyError:\n    count = 0\ncounters[key] = count + 1\nprint(counters)\n# Example 4\nkey = 'multigrain'\ncount = counters.get(key, 0)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "counters[key]",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "counters[key] = count + 1\nprint(counters)\n# Example 4\nkey = 'multigrain'\ncount = counters.get(key, 0)\ncounters[key] = count + 1\nprint(counters)\n# Example 5\nkey = 'baguette'\nif key not in counters:",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'multigrain'\ncount = counters.get(key, 0)\ncounters[key] = count + 1\nprint(counters)\n# Example 5\nkey = 'baguette'\nif key not in counters:\n    counters[key] = 0\ncounters[key] += 1\nkey = 'ciabatta'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "count = counters.get(key, 0)\ncounters[key] = count + 1\nprint(counters)\n# Example 5\nkey = 'baguette'\nif key not in counters:\n    counters[key] = 0\ncounters[key] += 1\nkey = 'ciabatta'\nif key in counters:",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "counters[key]",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "counters[key] = count + 1\nprint(counters)\n# Example 5\nkey = 'baguette'\nif key not in counters:\n    counters[key] = 0\ncounters[key] += 1\nkey = 'ciabatta'\nif key in counters:\n    counters[key] += 1",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'baguette'\nif key not in counters:\n    counters[key] = 0\ncounters[key] += 1\nkey = 'ciabatta'\nif key in counters:\n    counters[key] += 1\nelse:\n    counters[key] = 1\nkey = 'ciabatta'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'ciabatta'\nif key in counters:\n    counters[key] += 1\nelse:\n    counters[key] = 1\nkey = 'ciabatta'\ntry:\n    counters[key] += 1\nexcept KeyError:\n    counters[key] = 1",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'ciabatta'\ntry:\n    counters[key] += 1\nexcept KeyError:\n    counters[key] = 1\nprint(counters)\n# Example 6\nvotes = {\n    'baguette': ['Bob', 'Alice'],\n    'ciabatta': ['Coco', 'Deb'],",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "votes",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "votes = {\n    'baguette': ['Bob', 'Alice'],\n    'ciabatta': ['Coco', 'Deb'],\n}\nkey = 'brioche'\nwho = 'Elmer'\nif key in votes:\n    names = votes[key]\nelse:\n    votes[key] = names = []",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'brioche'\nwho = 'Elmer'\nif key in votes:\n    names = votes[key]\nelse:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 7\nkey = 'rye'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "who",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "who = 'Elmer'\nif key in votes:\n    names = votes[key]\nelse:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 7\nkey = 'rye'\nwho = 'Felix'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'rye'\nwho = 'Felix'\ntry:\n    names = votes[key]\nexcept KeyError:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 8\nkey = 'wheat'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "who",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "who = 'Felix'\ntry:\n    names = votes[key]\nexcept KeyError:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 8\nkey = 'wheat'\nwho = 'Gertrude'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'wheat'\nwho = 'Gertrude'\nnames = votes.get(key)\nif names is None:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 9\nkey = 'brioche'\nwho = 'Hugh'",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "who",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "who = 'Gertrude'\nnames = votes.get(key)\nif names is None:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 9\nkey = 'brioche'\nwho = 'Hugh'\nif (names := votes.get(key)) is None:",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "names = votes.get(key)\nif names is None:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 9\nkey = 'brioche'\nwho = 'Hugh'\nif (names := votes.get(key)) is None:\n    votes[key] = names = []",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'brioche'\nwho = 'Hugh'\nif (names := votes.get(key)) is None:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 10\nkey = 'cornbread'\nwho = 'Kirk'\nnames = votes.setdefault(key, [])",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "who",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "who = 'Hugh'\nif (names := votes.get(key)) is None:\n    votes[key] = names = []\nnames.append(who)\nprint(votes)\n# Example 10\nkey = 'cornbread'\nwho = 'Kirk'\nnames = votes.setdefault(key, [])\nnames.append(who)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'cornbread'\nwho = 'Kirk'\nnames = votes.setdefault(key, [])\nnames.append(who)\nprint(votes)\n# Example 11\ndata = {}\nkey = 'foo'\nvalue = []\ndata.setdefault(key, value)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "who",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "who = 'Kirk'\nnames = votes.setdefault(key, [])\nnames.append(who)\nprint(votes)\n# Example 11\ndata = {}\nkey = 'foo'\nvalue = []\ndata.setdefault(key, value)\nprint('Before:', data)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "names = votes.setdefault(key, [])\nnames.append(who)\nprint(votes)\n# Example 11\ndata = {}\nkey = 'foo'\nvalue = []\ndata.setdefault(key, value)\nprint('Before:', data)\nvalue.append('hello')",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "data = {}\nkey = 'foo'\nvalue = []\ndata.setdefault(key, value)\nprint('Before:', data)\nvalue.append('hello')\nprint('After: ', data)\n# Example 12\nkey = 'dutch crunch'\ncount = counters.setdefault(key, 0)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'foo'\nvalue = []\ndata.setdefault(key, value)\nprint('Before:', data)\nvalue.append('hello')\nprint('After: ', data)\n# Example 12\nkey = 'dutch crunch'\ncount = counters.setdefault(key, 0)\ncounters[key] = count + 1",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "value = []\ndata.setdefault(key, value)\nprint('Before:', data)\nvalue.append('hello')\nprint('After: ', data)\n# Example 12\nkey = 'dutch crunch'\ncount = counters.setdefault(key, 0)\ncounters[key] = count + 1\nprint(counters)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "key = 'dutch crunch'\ncount = counters.setdefault(key, 0)\ncounters[key] = count + 1\nprint(counters)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "count = counters.setdefault(key, 0)\ncounters[key] = count + 1\nprint(counters)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "counters[key]",
        "kind": 5,
        "importPath": "example_code.item_16",
        "description": "example_code.item_16",
        "peekOfCode": "counters[key] = count + 1\nprint(counters)",
        "detail": "example_code.item_16",
        "documentation": {}
    },
    {
        "label": "Visits",
        "kind": 6,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "class Visits:\n    def __init__(self):\n        self.data = {}\n    def add(self, country, city):\n        city_set = self.data.setdefault(country, set())\n        city_set.add(city)\n# Example 4\nvisits = Visits()\nvisits.add('Russia', 'Yekaterinburg')\nvisits.add('Tanzania', 'Zanzibar')",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "Visits",
        "kind": 6,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "class Visits:\n    def __init__(self):\n        self.data = defaultdict(set)\n    def add(self, country, city):\n        self.data[country].add(city)\nvisits = Visits()\nvisits.add('England', 'Bath')\nvisits.add('England', 'London')\nprint(visits.data)",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nvisits = {\n    'Mexico': {'Tulum', 'Puerto Vallarta'},\n    'Japan': {'Hakone'},",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "visits = {\n    'Mexico': {'Tulum', 'Puerto Vallarta'},\n    'Japan': {'Hakone'},\n}\n# Example 2\nvisits.setdefault('France', set()).add('Arles')  # Short\nif (japan := visits.get('Japan')) is None:       # Long\n    visits['Japan'] = japan = set()\njapan.add('Kyoto')\noriginal_print = print",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "original_print",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "original_print = print\nprint = pprint\nprint(visits)\nprint = original_print\n# Example 3\nclass Visits:\n    def __init__(self):\n        self.data = {}\n    def add(self, country, city):\n        city_set = self.data.setdefault(country, set())",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "print = pprint\nprint(visits)\nprint = original_print\n# Example 3\nclass Visits:\n    def __init__(self):\n        self.data = {}\n    def add(self, country, city):\n        city_set = self.data.setdefault(country, set())\n        city_set.add(city)",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "print = original_print\n# Example 3\nclass Visits:\n    def __init__(self):\n        self.data = {}\n    def add(self, country, city):\n        city_set = self.data.setdefault(country, set())\n        city_set.add(city)\n# Example 4\nvisits = Visits()",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "visits = Visits()\nvisits.add('Russia', 'Yekaterinburg')\nvisits.add('Tanzania', 'Zanzibar')\nprint(visits.data)\n# Example 5\nfrom collections import defaultdict\nclass Visits:\n    def __init__(self):\n        self.data = defaultdict(set)\n    def add(self, country, city):",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_17",
        "description": "example_code.item_17",
        "peekOfCode": "visits = Visits()\nvisits.add('England', 'Bath')\nvisits.add('England', 'London')\nprint(visits.data)",
        "detail": "example_code.item_17",
        "documentation": {}
    },
    {
        "label": "Pictures",
        "kind": 6,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "class Pictures(dict):\n    def __missing__(self, key):\n        value = open_picture(key)\n        self[key] = value\n        return value\npictures = Pictures()\nhandle = pictures[path]\nhandle.seek(0)\nimage_data = handle.read()\nprint(pictures)",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\npictures = {}\npath = 'profile_1234.png'\nwith open(path, 'wb') as f:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "open_picture",
        "kind": 2,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "def open_picture(profile_path):\n    try:\n        return open(profile_path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {profile_path}')\n        raise\nclass Pictures(dict):\n    def __missing__(self, key):\n        value = open_picture(key)\n        self[key] = value",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "pictures",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "pictures = {}\npath = 'profile_1234.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 1234')\nif (handle := pictures.get(path)) is None:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {path}')\n        raise",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "path = 'profile_1234.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 1234')\nif (handle := pictures.get(path)) is None:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {path}')\n        raise\n    else:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "image_data",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "image_data = handle.read()\nprint(pictures)\nprint(image_data)\n# Example 2\n# Examples using in and KeyError\npictures = {}\npath = 'profile_9991.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\nif path in pictures:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "pictures",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "pictures = {}\npath = 'profile_9991.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\nif path in pictures:\n    handle = pictures[path]\nelse:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "path = 'profile_9991.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\nif path in pictures:\n    handle = pictures[path]\nelse:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {path}')",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "image_data",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "image_data = handle.read()\nprint(pictures)\nprint(image_data)\npictures = {}\npath = 'profile_9922.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\ntry:\n    handle = pictures[path]\nexcept KeyError:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "pictures",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "pictures = {}\npath = 'profile_9922.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\ntry:\n    handle = pictures[path]\nexcept KeyError:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "path = 'profile_9922.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9991')\ntry:\n    handle = pictures[path]\nexcept KeyError:\n    try:\n        handle = open(path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {path}')",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "image_data",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "image_data = handle.read()\nprint(pictures)\nprint(image_data)\n# Example 3\npictures = {}\npath = 'profile_9239.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9239')\ntry:\n    handle = pictures.setdefault(path, open(path, 'a+b'))",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "pictures",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "pictures = {}\npath = 'profile_9239.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9239')\ntry:\n    handle = pictures.setdefault(path, open(path, 'a+b'))\nexcept OSError:\n    print(f'Failed to open path {path}')\n    raise\nelse:",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "path = 'profile_9239.png'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9239')\ntry:\n    handle = pictures.setdefault(path, open(path, 'a+b'))\nexcept OSError:\n    print(f'Failed to open path {path}')\n    raise\nelse:\n    handle.seek(0)",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "path = 'account_9090.csv'\nwith open(path, 'wb') as f:\n    f.write(b'image data here 9090')\ndef open_picture(profile_path):\n    try:\n        return open(profile_path, 'a+b')\n    except OSError:\n        print(f'Failed to open path {profile_path}')\n        raise\nclass Pictures(dict):",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "pictures",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "pictures = Pictures()\nhandle = pictures[path]\nhandle.seek(0)\nimage_data = handle.read()\nprint(pictures)\nprint(image_data)",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "handle",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "handle = pictures[path]\nhandle.seek(0)\nimage_data = handle.read()\nprint(pictures)\nprint(image_data)",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "image_data",
        "kind": 5,
        "importPath": "example_code.item_18",
        "description": "example_code.item_18",
        "peekOfCode": "image_data = handle.read()\nprint(pictures)\nprint(image_data)",
        "detail": "example_code.item_18",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef get_stats(numbers):\n    minimum = min(numbers)\n    maximum = max(numbers)",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "def get_stats(numbers):\n    minimum = min(numbers)\n    maximum = max(numbers)\n    return minimum, maximum\nlengths = [63, 73, 72, 60, 67, 66, 71, 61, 72, 70]\nminimum, maximum = get_stats(lengths)  # Two return values\nprint(f'Min: {minimum}, Max: {maximum}')\n# Example 2\nfirst, second = 1, 2\nassert first == 1",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "def my_function():\n    return 1, 2\nfirst, second = my_function()\nassert first == 1\nassert second == 2\n# Example 3\ndef get_avg_ratio(numbers):\n    average = sum(numbers) / len(numbers)\n    scaled = [x / average for x in numbers]\n    scaled.sort(reverse=True)",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "get_avg_ratio",
        "kind": 2,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "def get_avg_ratio(numbers):\n    average = sum(numbers) / len(numbers)\n    scaled = [x / average for x in numbers]\n    scaled.sort(reverse=True)\n    return scaled\nlongest, *middle, shortest = get_avg_ratio(lengths)\nprint(f'Longest:  {longest:>4.0%}')\nprint(f'Shortest: {shortest:>4.0%}')\n# Example 4\ndef get_stats(numbers):",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "def get_stats(numbers):\n    minimum = min(numbers)\n    maximum = max(numbers)\n    count = len(numbers)\n    average = sum(numbers) / count\n    sorted_numbers = sorted(numbers)\n    middle = count // 2\n    if count % 2 == 0:\n        lower = sorted_numbers[middle - 1]\n        upper = sorted_numbers[middle]",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "lengths",
        "kind": 5,
        "importPath": "example_code.item_19",
        "description": "example_code.item_19",
        "peekOfCode": "lengths = [63, 73, 72, 60, 67, 66, 71, 61, 72, 70]\nminimum, maximum = get_stats(lengths)  # Two return values\nprint(f'Min: {minimum}, Max: {maximum}')\n# Example 2\nfirst, second = 1, 2\nassert first == 1\nassert second == 2\ndef my_function():\n    return 1, 2\nfirst, second = my_function()",
        "detail": "example_code.item_19",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef careful_divide(a, b):\n    try:\n        return a / b",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "careful_divide",
        "kind": 2,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "def careful_divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return None\nassert careful_divide(4, 2) == 2\nassert careful_divide(0, 1) == 0\nassert careful_divide(3, 6) == 0.5\nassert careful_divide(1, 0) == None\n# Example 2",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "careful_divide",
        "kind": 2,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "def careful_divide(a, b):\n    try:\n        return True, a / b\n    except ZeroDivisionError:\n        return False, None\nassert careful_divide(4, 2) == (True, 2)\nassert careful_divide(0, 1) == (True, 0)\nassert careful_divide(3, 6) == (True, 0.5)\nassert careful_divide(1, 0) == (False, None)\n# Example 5",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "careful_divide",
        "kind": 2,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "def careful_divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        raise ValueError('Invalid inputs')\n# Example 8\nx, y = 5, 2\ntry:\n    result = careful_divide(x, y)\nexcept ValueError:",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "careful_divide",
        "kind": 2,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "def careful_divide(a: float, b: float) -> float:\n    \"\"\"Divides a by b.\n    Raises:\n        ValueError: When the inputs cannot be divided.\n    \"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        raise ValueError('Invalid inputs')\ntry:",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "result = careful_divide(x, y)\nif result is None:\n    print('Invalid inputs')\nelse:\n    print('Result is %.1f' % result)\n# Example 3\nx, y = 0, 5\nresult = careful_divide(x, y)\nif not result:\n    print('Invalid inputs')  # This runs! But shouldn't",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_20",
        "description": "example_code.item_20",
        "peekOfCode": "result = careful_divide(x, y)\nif not result:\n    print('Invalid inputs')  # This runs! But shouldn't\nelse:\n    assert False\n# Example 4\ndef careful_divide(a, b):\n    try:\n        return True, a / b\n    except ZeroDivisionError:",
        "detail": "example_code.item_20",
        "documentation": {}
    },
    {
        "label": "Sorter",
        "kind": 6,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "class Sorter:\n    def __init__(self, group):\n        self.group = group\n        self.found = False\n    def __call__(self, x):\n        if x in self.group:\n            self.found = True\n            return (0, x)\n        return (1, x)\nsorter = Sorter(group)",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef sort_priority(values, group):\n    def helper(x):\n        if x in group:",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "sort_priority",
        "kind": 2,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "def sort_priority(values, group):\n    def helper(x):\n        if x in group:\n            return (0, x)\n        return (1, x)\n    values.sort(key=helper)\n# Example 2\nnumbers = [8, 3, 1, 2, 5, 4, 7, 6]\ngroup = {2, 3, 5, 7}\nsort_priority(numbers, group)",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "sort_priority2",
        "kind": 2,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "def sort_priority2(numbers, group):\n    found = False\n    def helper(x):\n        if x in group:\n            found = True  # Seems simple\n            return (0, x)\n        return (1, x)\n    numbers.sort(key=helper)\n    return found\n# Example 4",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "sort_priority2",
        "kind": 2,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "def sort_priority2(numbers, group):\n    found = False         # Scope: 'sort_priority2'\n    def helper(x):\n        if x in group:\n            found = True  # Scope: 'helper' -- Bad!\n            return (0, x)\n        return (1, x)\n    numbers.sort(key=helper)\n    return found\n# Example 7",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "sort_priority3",
        "kind": 2,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "def sort_priority3(numbers, group):\n    found = False\n    def helper(x):\n        nonlocal found  # Added\n        if x in group:\n            found = True\n            return (0, x)\n        return (1, x)\n    numbers.sort(key=helper)\n    return found",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "numbers = [8, 3, 1, 2, 5, 4, 7, 6]\ngroup = {2, 3, 5, 7}\nsort_priority(numbers, group)\nprint(numbers)\n# Example 3\ndef sort_priority2(numbers, group):\n    found = False\n    def helper(x):\n        if x in group:\n            found = True  # Seems simple",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "group = {2, 3, 5, 7}\nsort_priority(numbers, group)\nprint(numbers)\n# Example 3\ndef sort_priority2(numbers, group):\n    found = False\n    def helper(x):\n        if x in group:\n            found = True  # Seems simple\n            return (0, x)",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "numbers = [8, 3, 1, 2, 5, 4, 7, 6]\nfound = sort_priority2(numbers, group)\nprint('Found:', found)\nprint(numbers)\n# Example 5\ntry:\n    foo = does_not_exist * 5\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "found = sort_priority2(numbers, group)\nprint('Found:', found)\nprint(numbers)\n# Example 5\ntry:\n    foo = does_not_exist * 5\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "numbers = [8, 3, 1, 2, 5, 4, 7, 6]\nfound = sort_priority3(numbers, group)\nassert found\nassert numbers == [2, 3, 5, 7, 1, 4, 6, 8]\n# Example 9\nnumbers = [8, 3, 1, 2, 5, 4, 7, 6]\nclass Sorter:\n    def __init__(self, group):\n        self.group = group\n        self.found = False",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "found = sort_priority3(numbers, group)\nassert found\nassert numbers == [2, 3, 5, 7, 1, 4, 6, 8]\n# Example 9\nnumbers = [8, 3, 1, 2, 5, 4, 7, 6]\nclass Sorter:\n    def __init__(self, group):\n        self.group = group\n        self.found = False\n    def __call__(self, x):",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "numbers = [8, 3, 1, 2, 5, 4, 7, 6]\nclass Sorter:\n    def __init__(self, group):\n        self.group = group\n        self.found = False\n    def __call__(self, x):\n        if x in self.group:\n            self.found = True\n            return (0, x)\n        return (1, x)",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "sorter",
        "kind": 5,
        "importPath": "example_code.item_21",
        "description": "example_code.item_21",
        "peekOfCode": "sorter = Sorter(group)\nnumbers.sort(key=sorter)\nassert sorter.found is True\nassert numbers == [2, 3, 5, 7, 1, 4, 6, 8]",
        "detail": "example_code.item_21",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef log(message, values):\n    if not values:\n        print(message)",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def log(message, values):\n    if not values:\n        print(message)\n    else:\n        values_str = ', '.join(str(x) for x in values)\n        print(f'{message}: {values_str}')\nlog('My numbers are', [1, 2])\nlog('Hi there', [])\n# Example 2\ndef log(message, *values):  # The only difference",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def log(message, *values):  # The only difference\n    if not values:\n        print(message)\n    else:\n        values_str = ', '.join(str(x) for x in values)\n        print(f'{message}: {values_str}')\nlog('My numbers are', 1, 2)\nlog('Hi there')  # Much better\n# Example 3\nfavorites = [7, 33, 99]",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "my_generator",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def my_generator():\n    for i in range(10):\n        yield i\ndef my_func(*args):\n    print(args)\nit = my_generator()\nmy_func(*it)\n# Example 5\ndef log(sequence, message, *values):\n    if not values:",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def my_func(*args):\n    print(args)\nit = my_generator()\nmy_func(*it)\n# Example 5\ndef log(sequence, message, *values):\n    if not values:\n        print(f'{sequence} - {message}')\n    else:\n        values_str = ', '.join(str(x) for x in values)",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "def log(sequence, message, *values):\n    if not values:\n        print(f'{sequence} - {message}')\n    else:\n        values_str = ', '.join(str(x) for x in values)\n        print(f'{sequence} - {message}: {values_str}')\nlog(1, 'Favorites', 7, 33)      # New with *args OK\nlog(1, 'Hi there')              # New message only OK\nlog('Favorite numbers', 7, 33)  # Old usage breaks",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "favorites",
        "kind": 5,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "favorites = [7, 33, 99]\nlog('Favorite colors', *favorites)\n# Example 4\ndef my_generator():\n    for i in range(10):\n        yield i\ndef my_func(*args):\n    print(args)\nit = my_generator()\nmy_func(*it)",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_22",
        "description": "example_code.item_22",
        "peekOfCode": "it = my_generator()\nmy_func(*it)\n# Example 5\ndef log(sequence, message, *values):\n    if not values:\n        print(f'{sequence} - {message}')\n    else:\n        values_str = ', '.join(str(x) for x in values)\n        print(f'{sequence} - {message}: {values_str}')\nlog(1, 'Favorites', 7, 33)      # New with *args OK",
        "detail": "example_code.item_22",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef remainder(number, divisor):\n    return number % divisor\nassert remainder(20, 7) == 6",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "remainder",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def remainder(number, divisor):\n    return number % divisor\nassert remainder(20, 7) == 6\n# Example 2\nremainder(20, 7)\nremainder(20, divisor=7)\nremainder(number=20, divisor=7)\nremainder(divisor=7, number=20)\n# Example 3\ntry:",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "print_parameters",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def print_parameters(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key} = {value}')\nprint_parameters(alpha=1.5, beta=9, gamma=4)\n# Example 9\ndef flow_rate(weight_diff, time_diff):\n    return weight_diff / time_diff\nweight_diff = 0.5\ntime_diff = 3\nflow = flow_rate(weight_diff, time_diff)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_rate",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def flow_rate(weight_diff, time_diff):\n    return weight_diff / time_diff\nweight_diff = 0.5\ntime_diff = 3\nflow = flow_rate(weight_diff, time_diff)\nprint(f'{flow:.3} kg per second')\n# Example 10\ndef flow_rate(weight_diff, time_diff, period):\n    return (weight_diff / time_diff) * period\n# Example 11",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_rate",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def flow_rate(weight_diff, time_diff, period):\n    return (weight_diff / time_diff) * period\n# Example 11\nflow_per_second = flow_rate(weight_diff, time_diff, 1)\n# Example 12\ndef flow_rate(weight_diff, time_diff, period=1):\n    return (weight_diff / time_diff) * period\n# Example 13\nflow_per_second = flow_rate(weight_diff, time_diff)\nflow_per_hour = flow_rate(weight_diff, time_diff, period=3600)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_rate",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def flow_rate(weight_diff, time_diff, period=1):\n    return (weight_diff / time_diff) * period\n# Example 13\nflow_per_second = flow_rate(weight_diff, time_diff)\nflow_per_hour = flow_rate(weight_diff, time_diff, period=3600)\nprint(flow_per_second)\nprint(flow_per_hour)\n# Example 14\ndef flow_rate(weight_diff, time_diff,\n              period=1, units_per_kg=1):",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_rate",
        "kind": 2,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "def flow_rate(weight_diff, time_diff,\n              period=1, units_per_kg=1):\n    return ((weight_diff * units_per_kg) / time_diff) * period\n# Example 15\npounds_per_hour = flow_rate(weight_diff, time_diff,\n                            period=3600, units_per_kg=2.2)\nprint(pounds_per_hour)\n# Example 16\npounds_per_hour = flow_rate(weight_diff, time_diff, 3600, 2.2)\nprint(pounds_per_hour)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "my_kwargs",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "my_kwargs = {\n\t'number': 20,\n\t'divisor': 7,\n}\nassert remainder(**my_kwargs) == 6\n# Example 6\nmy_kwargs = {\n\t'divisor': 7,\n}\nassert remainder(number=20, **my_kwargs) == 6",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "my_kwargs",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "my_kwargs = {\n\t'divisor': 7,\n}\nassert remainder(number=20, **my_kwargs) == 6\n# Example 7\nmy_kwargs = {\n\t'number': 20,\n}\nother_kwargs = {\n\t'divisor': 7,",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "my_kwargs",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "my_kwargs = {\n\t'number': 20,\n}\nother_kwargs = {\n\t'divisor': 7,\n}\nassert remainder(**my_kwargs, **other_kwargs) == 6\n# Example 8\ndef print_parameters(**kwargs):\n    for key, value in kwargs.items():",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "other_kwargs",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "other_kwargs = {\n\t'divisor': 7,\n}\nassert remainder(**my_kwargs, **other_kwargs) == 6\n# Example 8\ndef print_parameters(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key} = {value}')\nprint_parameters(alpha=1.5, beta=9, gamma=4)\n# Example 9",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "weight_diff",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "weight_diff = 0.5\ntime_diff = 3\nflow = flow_rate(weight_diff, time_diff)\nprint(f'{flow:.3} kg per second')\n# Example 10\ndef flow_rate(weight_diff, time_diff, period):\n    return (weight_diff / time_diff) * period\n# Example 11\nflow_per_second = flow_rate(weight_diff, time_diff, 1)\n# Example 12",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "time_diff",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "time_diff = 3\nflow = flow_rate(weight_diff, time_diff)\nprint(f'{flow:.3} kg per second')\n# Example 10\ndef flow_rate(weight_diff, time_diff, period):\n    return (weight_diff / time_diff) * period\n# Example 11\nflow_per_second = flow_rate(weight_diff, time_diff, 1)\n# Example 12\ndef flow_rate(weight_diff, time_diff, period=1):",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "flow = flow_rate(weight_diff, time_diff)\nprint(f'{flow:.3} kg per second')\n# Example 10\ndef flow_rate(weight_diff, time_diff, period):\n    return (weight_diff / time_diff) * period\n# Example 11\nflow_per_second = flow_rate(weight_diff, time_diff, 1)\n# Example 12\ndef flow_rate(weight_diff, time_diff, period=1):\n    return (weight_diff / time_diff) * period",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_per_second",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "flow_per_second = flow_rate(weight_diff, time_diff, 1)\n# Example 12\ndef flow_rate(weight_diff, time_diff, period=1):\n    return (weight_diff / time_diff) * period\n# Example 13\nflow_per_second = flow_rate(weight_diff, time_diff)\nflow_per_hour = flow_rate(weight_diff, time_diff, period=3600)\nprint(flow_per_second)\nprint(flow_per_hour)\n# Example 14",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_per_second",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "flow_per_second = flow_rate(weight_diff, time_diff)\nflow_per_hour = flow_rate(weight_diff, time_diff, period=3600)\nprint(flow_per_second)\nprint(flow_per_hour)\n# Example 14\ndef flow_rate(weight_diff, time_diff,\n              period=1, units_per_kg=1):\n    return ((weight_diff * units_per_kg) / time_diff) * period\n# Example 15\npounds_per_hour = flow_rate(weight_diff, time_diff,",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "flow_per_hour",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "flow_per_hour = flow_rate(weight_diff, time_diff, period=3600)\nprint(flow_per_second)\nprint(flow_per_hour)\n# Example 14\ndef flow_rate(weight_diff, time_diff,\n              period=1, units_per_kg=1):\n    return ((weight_diff * units_per_kg) / time_diff) * period\n# Example 15\npounds_per_hour = flow_rate(weight_diff, time_diff,\n                            period=3600, units_per_kg=2.2)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "pounds_per_hour",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "pounds_per_hour = flow_rate(weight_diff, time_diff,\n                            period=3600, units_per_kg=2.2)\nprint(pounds_per_hour)\n# Example 16\npounds_per_hour = flow_rate(weight_diff, time_diff, 3600, 2.2)\nprint(pounds_per_hour)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "pounds_per_hour",
        "kind": 5,
        "importPath": "example_code.item_23",
        "description": "example_code.item_23",
        "peekOfCode": "pounds_per_hour = flow_rate(weight_diff, time_diff, 3600, 2.2)\nprint(pounds_per_hour)",
        "detail": "example_code.item_23",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom time import sleep\nfrom datetime import datetime\ndef log(message, when=datetime.now()):",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "def log(message, when=datetime.now()):\n    print(f'{when}: {message}')\nlog('Hi there!')\nsleep(0.1)\nlog('Hello again!')\n# Example 2\ndef log(message, when=None):\n    \"\"\"Log a message with a timestamp.\n    Args:\n        message: Message to print.",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "def log(message, when=None):\n    \"\"\"Log a message with a timestamp.\n    Args:\n        message: Message to print.\n        when: datetime of when the message occurred.\n            Defaults to the present time.\n    \"\"\"\n    if when is None:\n        when = datetime.now()\n    print(f'{when}: {message}')",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "def decode(data, default={}):\n    try:\n        return json.loads(data)\n    except ValueError:\n        return default\n# Example 5\nfoo = decode('bad data')\nfoo['stuff'] = 5\nbar = decode('also bad')\nbar['meep'] = 1",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "def decode(data, default=None):\n    \"\"\"Load JSON data from a string.\n    Args:\n        data: JSON data to decode.\n        default: Value to return if decoding fails.\n            Defaults to an empty dictionary.\n    \"\"\"\n    try:\n        return json.loads(data)\n    except ValueError:",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "foo = decode('bad data')\nfoo['stuff'] = 5\nbar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\n# Example 6\nassert foo is bar\n# Example 7\ndef decode(data, default=None):",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "foo['stuff']",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "foo['stuff'] = 5\nbar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\n# Example 6\nassert foo is bar\n# Example 7\ndef decode(data, default=None):\n    \"\"\"Load JSON data from a string.",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "bar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\n# Example 6\nassert foo is bar\n# Example 7\ndef decode(data, default=None):\n    \"\"\"Load JSON data from a string.\n    Args:",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "bar['meep']",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "bar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\n# Example 6\nassert foo is bar\n# Example 7\ndef decode(data, default=None):\n    \"\"\"Load JSON data from a string.\n    Args:\n        data: JSON data to decode.",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "foo = decode('bad data')\nfoo['stuff'] = 5\nbar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\nassert foo is not bar",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "foo['stuff']",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "foo['stuff'] = 5\nbar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\nassert foo is not bar",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "bar = decode('also bad')\nbar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\nassert foo is not bar",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "bar['meep']",
        "kind": 5,
        "importPath": "example_code.item_24",
        "description": "example_code.item_24",
        "peekOfCode": "bar['meep'] = 1\nprint('Foo:', foo)\nprint('Bar:', bar)\nassert foo is not bar",
        "detail": "example_code.item_24",
        "documentation": {}
    },
    {
        "label": "log_typed",
        "kind": 2,
        "importPath": "example_code.item_24_example_09",
        "description": "example_code.item_24_example_09",
        "peekOfCode": "def log_typed(message: str,\n              when: Optional[datetime]=None) -> None:\n    \"\"\"Log a message with a timestamp.\n    Args:\n        message: Message to print.\n        when: datetime of when the message occurred.\n            Defaults to the present time.\n    \"\"\"\n    if when is None:\n        when = datetime.now()",
        "detail": "example_code.item_24_example_09",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef safe_division(number, divisor,\n                  ignore_overflow,\n                  ignore_zero_division):",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division(number, divisor,\n                  ignore_overflow,\n                  ignore_zero_division):\n    try:\n        return number / divisor\n    except OverflowError:\n        if ignore_overflow:\n            return 0\n        else:\n            raise",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division_b",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division_b(number, divisor,\n                    ignore_overflow=False,        # Changed\n                    ignore_zero_division=False):  # Changed\n    try:\n        return number / divisor\n    except OverflowError:\n        if ignore_overflow:\n            return 0\n        else:\n            raise",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division_c",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division_c(number, divisor, *,  # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):\n    try:\n        return number / divisor\n    except OverflowError:\n        if ignore_overflow:\n            return 0\n        else:\n            raise",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division_c",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division_c(numerator, denominator, *,  # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):\n    try:\n        return numerator / denominator\n    except OverflowError:\n        if ignore_overflow:\n            return 0\n        else:\n            raise",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division_d",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division_d(numerator, denominator, /, *,  # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):\n    try:\n        return numerator / denominator\n    except OverflowError:\n        if ignore_overflow:\n            return 0\n        else:\n            raise",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "safe_division_e",
        "kind": 2,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "def safe_division_e(numerator, denominator, /,\n                    ndigits=10, *,                # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):\n    try:\n        fraction = numerator / denominator        # Changed\n        return round(fraction, ndigits)           # Changed\n    except OverflowError:\n        if ignore_overflow:\n            return 0",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division(1.0, 10**500, True, False)\nprint(result)\n# Example 3\nresult = safe_division(1.0, 0, False, True)\nprint(result)\n# Example 4\ndef safe_division_b(number, divisor,\n                    ignore_overflow=False,        # Changed\n                    ignore_zero_division=False):  # Changed\n    try:",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division(1.0, 0, False, True)\nprint(result)\n# Example 4\ndef safe_division_b(number, divisor,\n                    ignore_overflow=False,        # Changed\n                    ignore_zero_division=False):  # Changed\n    try:\n        return number / divisor\n    except OverflowError:\n        if ignore_overflow:",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_b(1.0, 10**500, ignore_overflow=True)\nprint(result)\nresult = safe_division_b(1.0, 0, ignore_zero_division=True)\nprint(result)\n# Example 6\nassert safe_division_b(1.0, 10**500, True, False) == 0\n# Example 7\ndef safe_division_c(number, divisor, *,  # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_b(1.0, 0, ignore_zero_division=True)\nprint(result)\n# Example 6\nassert safe_division_b(1.0, 10**500, True, False) == 0\n# Example 7\ndef safe_division_c(number, divisor, *,  # Changed\n                    ignore_overflow=False,\n                    ignore_zero_division=False):\n    try:\n        return number / divisor",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_c(1.0, 0, ignore_zero_division=True)\nassert result == float('inf')\ntry:\n    result = safe_division_c(1.0, 0)\nexcept ZeroDivisionError:\n    pass  # Expected\nelse:\n    assert False\n# Example 10\nassert safe_division_c(number=2, divisor=5) == 0.4",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_e(22, 7)\nprint(result)\nresult = safe_division_e(22, 7, 5)\nprint(result)\nresult = safe_division_e(22, 7, ndigits=2)\nprint(result)",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_e(22, 7, 5)\nprint(result)\nresult = safe_division_e(22, 7, ndigits=2)\nprint(result)",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_25",
        "description": "example_code.item_25",
        "peekOfCode": "result = safe_division_e(22, 7, ndigits=2)\nprint(result)",
        "detail": "example_code.item_25",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef trace(func):\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "trace",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def trace(func):\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        print(f'{func.__name__}({args!r}, {kwargs!r}) '\n              f'-> {result!r}')\n        return result\n    return wrapper\n# Example 2\n@trace\ndef fibonacci(n):",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def fibonacci(n):\n    \"\"\"Return the n-th Fibonacci number\"\"\"\n    if n in (0, 1):\n        return n\n    return (fibonacci(n - 2) + fibonacci(n - 1))\n# Example 3\ndef fibonacci(n):\n    \"\"\"Return the n-th Fibonacci number\"\"\"\n    if n in (0, 1):\n        return n",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def fibonacci(n):\n    \"\"\"Return the n-th Fibonacci number\"\"\"\n    if n in (0, 1):\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)\nfibonacci = trace(fibonacci)\n# Example 4\nfibonacci(4)\n# Example 5\nprint(fibonacci)",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "trace",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def trace(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        print(f'{func.__name__}({args!r}, {kwargs!r}) '\n              f'-> {result!r}')\n        return result\n    return wrapper\n@trace\ndef fibonacci(n):",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "def fibonacci(n):\n    \"\"\"Return the n-th Fibonacci number\"\"\"\n    if n in (0, 1):\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)\n# Example 9\nhelp(fibonacci)\n# Example 10\nprint(pickle.dumps(fibonacci))",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 5,
        "importPath": "example_code.item_26",
        "description": "example_code.item_26",
        "peekOfCode": "fibonacci = trace(fibonacci)\n# Example 4\nfibonacci(4)\n# Example 5\nprint(fibonacci)\n# Example 6\nhelp(fibonacci)\n# Example 7\ntry:\n    import pickle",
        "detail": "example_code.item_26",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsquares = []\nfor x in a:",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsquares = []\nfor x in a:\n    squares.append(x**2)\nprint(squares)\n# Example 2\nsquares = [x**2 for x in a]  # List comprehension\nprint(squares)\n# Example 3\nalt = map(lambda x: x ** 2, a)",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "squares = []\nfor x in a:\n    squares.append(x**2)\nprint(squares)\n# Example 2\nsquares = [x**2 for x in a]  # List comprehension\nprint(squares)\n# Example 3\nalt = map(lambda x: x ** 2, a)\nassert list(alt) == squares, f'{alt} {squares}'",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "squares = [x**2 for x in a]  # List comprehension\nprint(squares)\n# Example 3\nalt = map(lambda x: x ** 2, a)\nassert list(alt) == squares, f'{alt} {squares}'\n# Example 4\neven_squares = [x**2 for x in a if x % 2 == 0]\nprint(even_squares)\n# Example 5\nalt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "alt",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "alt = map(lambda x: x ** 2, a)\nassert list(alt) == squares, f'{alt} {squares}'\n# Example 4\neven_squares = [x**2 for x in a if x % 2 == 0]\nprint(even_squares)\n# Example 5\nalt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))\nassert even_squares == list(alt)\n# Example 6\neven_squares_dict = {x: x**2 for x in a if x % 2 == 0}",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "even_squares",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "even_squares = [x**2 for x in a if x % 2 == 0]\nprint(even_squares)\n# Example 5\nalt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))\nassert even_squares == list(alt)\n# Example 6\neven_squares_dict = {x: x**2 for x in a if x % 2 == 0}\nthrees_cubed_set = {x**3 for x in a if x % 3 == 0}\nprint(even_squares_dict)\nprint(threes_cubed_set)",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "alt",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "alt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))\nassert even_squares == list(alt)\n# Example 6\neven_squares_dict = {x: x**2 for x in a if x % 2 == 0}\nthrees_cubed_set = {x**3 for x in a if x % 3 == 0}\nprint(even_squares_dict)\nprint(threes_cubed_set)\n# Example 7\nalt_dict = dict(map(lambda x: (x, x**2),\n\t\t\t\tfilter(lambda x: x % 2 == 0, a)))",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "even_squares_dict",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "even_squares_dict = {x: x**2 for x in a if x % 2 == 0}\nthrees_cubed_set = {x**3 for x in a if x % 3 == 0}\nprint(even_squares_dict)\nprint(threes_cubed_set)\n# Example 7\nalt_dict = dict(map(lambda x: (x, x**2),\n\t\t\t\tfilter(lambda x: x % 2 == 0, a)))\nalt_set = set(map(lambda x: x**3,\n\t          filter(lambda x: x % 3 == 0, a)))\nassert even_squares_dict == alt_dict",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "threes_cubed_set",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "threes_cubed_set = {x**3 for x in a if x % 3 == 0}\nprint(even_squares_dict)\nprint(threes_cubed_set)\n# Example 7\nalt_dict = dict(map(lambda x: (x, x**2),\n\t\t\t\tfilter(lambda x: x % 2 == 0, a)))\nalt_set = set(map(lambda x: x**3,\n\t          filter(lambda x: x % 3 == 0, a)))\nassert even_squares_dict == alt_dict\nassert threes_cubed_set == alt_set",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "alt_dict",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "alt_dict = dict(map(lambda x: (x, x**2),\n\t\t\t\tfilter(lambda x: x % 2 == 0, a)))\nalt_set = set(map(lambda x: x**3,\n\t          filter(lambda x: x % 3 == 0, a)))\nassert even_squares_dict == alt_dict\nassert threes_cubed_set == alt_set",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "alt_set",
        "kind": 5,
        "importPath": "example_code.item_27",
        "description": "example_code.item_27",
        "peekOfCode": "alt_set = set(map(lambda x: x**3,\n\t          filter(lambda x: x % 3 == 0, a)))\nassert even_squares_dict == alt_dict\nassert threes_cubed_set == alt_set",
        "detail": "example_code.item_27",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflat = [x for row in matrix for x in row]\nprint(flat)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflat = [x for row in matrix for x in row]\nprint(flat)\n# Example 2\nsquared = [[x**2 for x in row] for row in matrix]\nprint(squared)\n# Example 3\nmy_lists = [\n    [[1, 2, 3], [4, 5, 6]],\n    [[7, 8, 9], [10, 11, 12]],",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "flat",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "flat = [x for row in matrix for x in row]\nprint(flat)\n# Example 2\nsquared = [[x**2 for x in row] for row in matrix]\nprint(squared)\n# Example 3\nmy_lists = [\n    [[1, 2, 3], [4, 5, 6]],\n    [[7, 8, 9], [10, 11, 12]],\n]",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "squared",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "squared = [[x**2 for x in row] for row in matrix]\nprint(squared)\n# Example 3\nmy_lists = [\n    [[1, 2, 3], [4, 5, 6]],\n    [[7, 8, 9], [10, 11, 12]],\n]\nflat = [x for sublist1 in my_lists\n        for sublist2 in sublist1\n        for x in sublist2]",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "my_lists",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "my_lists = [\n    [[1, 2, 3], [4, 5, 6]],\n    [[7, 8, 9], [10, 11, 12]],\n]\nflat = [x for sublist1 in my_lists\n        for sublist2 in sublist1\n        for x in sublist2]\nprint(flat)\n# Example 4\nflat = []",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "flat",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "flat = [x for sublist1 in my_lists\n        for sublist2 in sublist1\n        for x in sublist2]\nprint(flat)\n# Example 4\nflat = []\nfor sublist1 in my_lists:\n    for sublist2 in sublist1:\n        flat.extend(sublist2)\nprint(flat)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "flat",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "flat = []\nfor sublist1 in my_lists:\n    for sublist2 in sublist1:\n        flat.extend(sublist2)\nprint(flat)\n# Example 5\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = [x for x in a if x > 4 if x % 2 == 0]\nc = [x for x in a if x > 4 and x % 2 == 0]\nprint(b)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = [x for x in a if x > 4 if x % 2 == 0]\nc = [x for x in a if x > 4 and x % 2 == 0]\nprint(b)\nprint(c)\nassert b and c\nassert b == c\n# Example 6\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfiltered = [[x for x in row if x % 3 == 0]",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "b = [x for x in a if x > 4 if x % 2 == 0]\nc = [x for x in a if x > 4 and x % 2 == 0]\nprint(b)\nprint(c)\nassert b and c\nassert b == c\n# Example 6\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfiltered = [[x for x in row if x % 3 == 0]\n            for row in matrix if sum(row) >= 10]",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "c = [x for x in a if x > 4 and x % 2 == 0]\nprint(b)\nprint(c)\nassert b and c\nassert b == c\n# Example 6\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfiltered = [[x for x in row if x % 3 == 0]\n            for row in matrix if sum(row) >= 10]\nprint(filtered)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfiltered = [[x for x in row if x % 3 == 0]\n            for row in matrix if sum(row) >= 10]\nprint(filtered)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "filtered",
        "kind": 5,
        "importPath": "example_code.item_28",
        "description": "example_code.item_28",
        "peekOfCode": "filtered = [[x for x in row if x % 3 == 0]\n            for row in matrix if sum(row) >= 10]\nprint(filtered)",
        "detail": "example_code.item_28",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nstock = {\n    'nails': 125,\n    'screws': 35,",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "get_batches",
        "kind": 2,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "def get_batches(count, size):\n    return count // size\nresult = {}\nfor name in order:\n  count = stock.get(name, 0)\n  batches = get_batches(count, 8)\n  if batches:\n    result[name] = batches\nprint(result)\n# Example 2",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "stock",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "stock = {\n    'nails': 125,\n    'screws': 35,\n    'wingnuts': 8,\n    'washers': 24,\n}\norder = ['screws', 'wingnuts', 'clips']\ndef get_batches(count, size):\n    return count // size\nresult = {}",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "order = ['screws', 'wingnuts', 'clips']\ndef get_batches(count, size):\n    return count // size\nresult = {}\nfor name in order:\n  count = stock.get(name, 0)\n  batches = get_batches(count, 8)\n  if batches:\n    result[name] = batches\nprint(result)",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "result = {}\nfor name in order:\n  count = stock.get(name, 0)\n  batches = get_batches(count, 8)\n  if batches:\n    result[name] = batches\nprint(result)\n# Example 2\nfound = {name: get_batches(stock.get(name, 0), 8)\n         for name in order",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "found = {name: get_batches(stock.get(name, 0), 8)\n         for name in order\n         if get_batches(stock.get(name, 0), 8)}\nprint(found)\n# Example 3\nhas_bug = {name: get_batches(stock.get(name, 0), 4)\n           for name in order\n           if get_batches(stock.get(name, 0), 8)}\nprint('Expected:', found)\nprint('Found:   ', has_bug)",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "has_bug",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "has_bug = {name: get_batches(stock.get(name, 0), 4)\n           for name in order\n           if get_batches(stock.get(name, 0), 8)}\nprint('Expected:', found)\nprint('Found:   ', has_bug)\n# Example 4\nfound = {name: batches for name in order\n         if (batches := get_batches(stock.get(name, 0), 8))}\nassert found == {'screws': 4, 'wingnuts': 1}, found\n# Example 5",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "found = {name: batches for name in order\n         if (batches := get_batches(stock.get(name, 0), 8))}\nassert found == {'screws': 4, 'wingnuts': 1}, found\n# Example 5\ntry:\n    result = {name: (tenth := count // 10)\n              for name, count in stock.items() if tenth > 0}\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "result = {name: tenth for name, count in stock.items()\n          if (tenth := count // 10) > 0}\nprint(result)\n# Example 7\nhalf = [(last := count // 2) for count in stock.values()]\nprint(f'Last item of {half} is {last}')\n# Example 8\nfor count in stock.values():  # Leaks loop variable\n    pass\nprint(f'Last item of {list(stock.values())} is {count}')",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "half",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "half = [(last := count // 2) for count in stock.values()]\nprint(f'Last item of {half} is {last}')\n# Example 8\nfor count in stock.values():  # Leaks loop variable\n    pass\nprint(f'Last item of {list(stock.values())} is {count}')\n# Example 9\ntry:\n    del count\n    half = [count // 2 for count in stock.values()]",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_29",
        "description": "example_code.item_29",
        "peekOfCode": "found = ((name, batches) for name in order\n         if (batches := get_batches(stock.get(name, 0), 8)))\nprint(next(found))\nprint(next(found))",
        "detail": "example_code.item_29",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef index_words(text):\n    result = []\n    if text:",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "index_words",
        "kind": 2,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "def index_words(text):\n    result = []\n    if text:\n        result.append(0)\n    for index, letter in enumerate(text):\n        if letter == ' ':\n            result.append(index + 1)\n    return result\n# Example 2\naddress = 'Four score and seven years ago...'",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "index_words_iter",
        "kind": 2,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "def index_words_iter(text):\n    if text:\n        yield 0\n    for index, letter in enumerate(text):\n        if letter == ' ':\n            yield index + 1\n# Example 4\nit = index_words_iter(address)\nprint(next(it))\nprint(next(it))",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "index_file",
        "kind": 2,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "def index_file(handle):\n    offset = 0\n    for line in handle:\n        if line:\n            yield offset\n        for letter in line:\n            offset += 1\n            if letter == ' ':\n                yield offset\n# Example 7",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "address = 'Four score and seven years ago...'\naddress = 'Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal.'\nresult = index_words(address)\nprint(result[:10])\n# Example 3\ndef index_words_iter(text):\n    if text:\n        yield 0\n    for index, letter in enumerate(text):\n        if letter == ' ':",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "address = 'Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal.'\nresult = index_words(address)\nprint(result[:10])\n# Example 3\ndef index_words_iter(text):\n    if text:\n        yield 0\n    for index, letter in enumerate(text):\n        if letter == ' ':\n            yield index + 1",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "result = index_words(address)\nprint(result[:10])\n# Example 3\ndef index_words_iter(text):\n    if text:\n        yield 0\n    for index, letter in enumerate(text):\n        if letter == ' ':\n            yield index + 1\n# Example 4",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "it = index_words_iter(address)\nprint(next(it))\nprint(next(it))\n# Example 5\nresult = list(index_words_iter(address))\nprint(result[:10])\n# Example 6\ndef index_file(handle):\n    offset = 0\n    for line in handle:",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "result = list(index_words_iter(address))\nprint(result[:10])\n# Example 6\ndef index_file(handle):\n    offset = 0\n    for line in handle:\n        if line:\n            yield offset\n        for letter in line:\n            offset += 1",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "address_lines",
        "kind": 5,
        "importPath": "example_code.item_30",
        "description": "example_code.item_30",
        "peekOfCode": "address_lines = \"\"\"Four score and seven years\nago our fathers brought forth on this\ncontinent a new nation, conceived in liberty,\nand dedicated to the proposition that all men\nare created equal.\"\"\"\nwith open('address.txt', 'w') as f:\n    f.write(address_lines)\nimport itertools\nwith open('address.txt', 'r') as f:\n    it = index_file(f)",
        "detail": "example_code.item_30",
        "documentation": {}
    },
    {
        "label": "ReadVisits",
        "kind": 6,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "class ReadVisits:\n    def __init__(self, data_path):\n        self.data_path = data_path\n    def __iter__(self):\n        with open(self.data_path) as f:\n            for line in f:\n                yield int(line)\n# Example 11\nvisits = ReadVisits(path)\npercentages = normalize(visits)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef normalize(numbers):\n    total = sum(numbers)\n    result = []",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def normalize(numbers):\n    total = sum(numbers)\n    result = []\n    for value in numbers:\n        percent = 100 * value / total\n        result.append(percent)\n    return result\n# Example 2\nvisits = [15, 35, 80]\npercentages = normalize(visits)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "read_visits",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def read_visits(data_path):\n    with open(data_path) as f:\n        for line in f:\n            yield int(line)\n# Example 4\nit = read_visits('my_numbers.txt')\npercentages = normalize(it)\nprint(percentages)\n# Example 5\nit = read_visits('my_numbers.txt')",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "normalize_copy",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def normalize_copy(numbers):\n    numbers_copy = list(numbers)  # Copy the iterator\n    total = sum(numbers_copy)\n    result = []\n    for value in numbers_copy:\n        percent = 100 * value / total\n        result.append(percent)\n    return result\n# Example 7\nit = read_visits('my_numbers.txt')",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "normalize_func",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def normalize_func(get_iter):\n    total = sum(get_iter())   # New iterator\n    result = []\n    for value in get_iter():  # New iterator\n        percent = 100 * value / total\n        result.append(percent)\n    return result\n# Example 9\npath = 'my_numbers.txt'\npercentages = normalize_func(lambda: read_visits(path))",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "normalize_defensive",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def normalize_defensive(numbers):\n    if iter(numbers) is numbers:  # An iterator -- bad!\n        raise TypeError('Must supply a container')\n    total = sum(numbers)\n    result = []\n    for value in numbers:\n        percent = 100 * value / total\n        result.append(percent)\n    return result\nvisits = [15, 35, 80]",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "normalize_defensive",
        "kind": 2,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "def normalize_defensive(numbers):\n    if isinstance(numbers, Iterator):  # Another way to check\n        raise TypeError('Must supply a container')\n    total = sum(numbers)\n    result = []\n    for value in numbers:\n        percent = 100 * value / total\n        result.append(percent)\n    return result\nvisits = [15, 35, 80]",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = [15, 35, 80]\npercentages = normalize(visits)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 3\npath = 'my_numbers.txt'\nwith open(path, 'w') as f:\n    for i in (15, 35, 80):\n        f.write('%d\\n' % i)\ndef read_visits(data_path):",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize(visits)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 3\npath = 'my_numbers.txt'\nwith open(path, 'w') as f:\n    for i in (15, 35, 80):\n        f.write('%d\\n' % i)\ndef read_visits(data_path):\n    with open(data_path) as f:",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "path = 'my_numbers.txt'\nwith open(path, 'w') as f:\n    for i in (15, 35, 80):\n        f.write('%d\\n' % i)\ndef read_visits(data_path):\n    with open(data_path) as f:\n        for line in f:\n            yield int(line)\n# Example 4\nit = read_visits('my_numbers.txt')",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "it = read_visits('my_numbers.txt')\npercentages = normalize(it)\nprint(percentages)\n# Example 5\nit = read_visits('my_numbers.txt')\nprint(list(it))\nprint(list(it))  # Already exhausted\n# Example 6\ndef normalize_copy(numbers):\n    numbers_copy = list(numbers)  # Copy the iterator",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize(it)\nprint(percentages)\n# Example 5\nit = read_visits('my_numbers.txt')\nprint(list(it))\nprint(list(it))  # Already exhausted\n# Example 6\ndef normalize_copy(numbers):\n    numbers_copy = list(numbers)  # Copy the iterator\n    total = sum(numbers_copy)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "it = read_visits('my_numbers.txt')\nprint(list(it))\nprint(list(it))  # Already exhausted\n# Example 6\ndef normalize_copy(numbers):\n    numbers_copy = list(numbers)  # Copy the iterator\n    total = sum(numbers_copy)\n    result = []\n    for value in numbers_copy:\n        percent = 100 * value / total",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "it = read_visits('my_numbers.txt')\npercentages = normalize_copy(it)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 8\ndef normalize_func(get_iter):\n    total = sum(get_iter())   # New iterator\n    result = []\n    for value in get_iter():  # New iterator\n        percent = 100 * value / total",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize_copy(it)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 8\ndef normalize_func(get_iter):\n    total = sum(get_iter())   # New iterator\n    result = []\n    for value in get_iter():  # New iterator\n        percent = 100 * value / total\n        result.append(percent)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "path = 'my_numbers.txt'\npercentages = normalize_func(lambda: read_visits(path))\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 10\nclass ReadVisits:\n    def __init__(self, data_path):\n        self.data_path = data_path\n    def __iter__(self):\n        with open(self.data_path) as f:",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize_func(lambda: read_visits(path))\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 10\nclass ReadVisits:\n    def __init__(self, data_path):\n        self.data_path = data_path\n    def __iter__(self):\n        with open(self.data_path) as f:\n            for line in f:",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = ReadVisits(path)\npercentages = normalize(visits)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 12\ndef normalize_defensive(numbers):\n    if iter(numbers) is numbers:  # An iterator -- bad!\n        raise TypeError('Must supply a container')\n    total = sum(numbers)\n    result = []",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize(visits)\nprint(percentages)\nassert sum(percentages) == 100.0\n# Example 12\ndef normalize_defensive(numbers):\n    if iter(numbers) is numbers:  # An iterator -- bad!\n        raise TypeError('Must supply a container')\n    total = sum(numbers)\n    result = []\n    for value in numbers:",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = [15, 35, 80]\nnormalize_defensive(visits)  # No error\nit = iter(visits)\ntry:\n    normalize_defensive(it)\nexcept TypeError:\n    pass\nelse:\n    assert False\n# Example 13",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "it = iter(visits)\ntry:\n    normalize_defensive(it)\nexcept TypeError:\n    pass\nelse:\n    assert False\n# Example 13\nfrom collections.abc import Iterator \ndef normalize_defensive(numbers):",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = [15, 35, 80]\nnormalize_defensive(visits)  # No error\nit = iter(visits)\ntry:\n    normalize_defensive(it)\nexcept TypeError:\n    pass\nelse:\n    assert False\n# Example 14",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "it = iter(visits)\ntry:\n    normalize_defensive(it)\nexcept TypeError:\n    pass\nelse:\n    assert False\n# Example 14\nvisits = [15, 35, 80]\npercentages = normalize_defensive(visits)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = [15, 35, 80]\npercentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\nvisits = ReadVisits(path)\npercentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\n# Example 15\ntry:\n    visits = [15, 35, 80]\n    it = iter(visits)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\nvisits = ReadVisits(path)\npercentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\n# Example 15\ntry:\n    visits = [15, 35, 80]\n    it = iter(visits)\n    normalize_defensive(it)",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "visits",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "visits = ReadVisits(path)\npercentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\n# Example 15\ntry:\n    visits = [15, 35, 80]\n    it = iter(visits)\n    normalize_defensive(it)\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "percentages",
        "kind": 5,
        "importPath": "example_code.item_31",
        "description": "example_code.item_31",
        "peekOfCode": "percentages = normalize_defensive(visits)\nassert sum(percentages) == 100.0\n# Example 15\ntry:\n    visits = [15, 35, 80]\n    it = iter(visits)\n    normalize_defensive(it)\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_31",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport random\nwith open('my_file.txt', 'w') as f:\n    for _ in range(10):",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "value = [len(x) for x in open('my_file.txt')]\nprint(value)\n# Example 2\nit = (len(x) for x in open('my_file.txt'))\nprint(it)\n# Example 3\nprint(next(it))\nprint(next(it))\n# Example 4\nroots = ((x, x**0.5) for x in it)",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "it = (len(x) for x in open('my_file.txt'))\nprint(it)\n# Example 3\nprint(next(it))\nprint(next(it))\n# Example 4\nroots = ((x, x**0.5) for x in it)\n# Example 5\nprint(next(roots))",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "roots",
        "kind": 5,
        "importPath": "example_code.item_32",
        "description": "example_code.item_32",
        "peekOfCode": "roots = ((x, x**0.5) for x in it)\n# Example 5\nprint(next(roots))",
        "detail": "example_code.item_32",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef move(period, speed):\n    for _ in range(period):\n        yield speed",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def move(period, speed):\n    for _ in range(period):\n        yield speed\ndef pause(delay):\n    for _ in range(delay):\n        yield 0\n# Example 2\ndef animate():\n    for delta in move(4, 5.0):\n        yield delta",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "pause",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def pause(delay):\n    for _ in range(delay):\n        yield 0\n# Example 2\ndef animate():\n    for delta in move(4, 5.0):\n        yield delta\n    for delta in pause(3):\n        yield delta\n    for delta in move(2, 3.0):",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "animate",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def animate():\n    for delta in move(4, 5.0):\n        yield delta\n    for delta in pause(3):\n        yield delta\n    for delta in move(2, 3.0):\n        yield delta\n# Example 3\ndef render(delta):\n    print(f'Delta: {delta:.1f}')",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "render",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def render(delta):\n    print(f'Delta: {delta:.1f}')\n    # Move the images onscreen\ndef run(func):\n    for delta in func():\n        render(delta)\nrun(animate)\n# Example 4\ndef animate_composed():\n    yield from move(4, 5.0)",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def run(func):\n    for delta in func():\n        render(delta)\nrun(animate)\n# Example 4\ndef animate_composed():\n    yield from move(4, 5.0)\n    yield from pause(3)\n    yield from move(2, 3.0)\nrun(animate_composed)",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "animate_composed",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def animate_composed():\n    yield from move(4, 5.0)\n    yield from pause(3)\n    yield from move(2, 3.0)\nrun(animate_composed)\n# Example 5\nimport timeit\ndef child():\n    for i in range(1_000_000):\n        yield i",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "child",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def child():\n    for i in range(1_000_000):\n        yield i\ndef slow():\n    for i in child():\n        yield i\ndef fast():\n    yield from child()\nbaseline = timeit.timeit(\n    stmt='for _ in slow(): pass',",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "slow",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def slow():\n    for i in child():\n        yield i\ndef fast():\n    yield from child()\nbaseline = timeit.timeit(\n    stmt='for _ in slow(): pass',\n    globals=globals(),\n    number=50)\nprint(f'Manual nesting {baseline:.2f}s')",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "fast",
        "kind": 2,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "def fast():\n    yield from child()\nbaseline = timeit.timeit(\n    stmt='for _ in slow(): pass',\n    globals=globals(),\n    number=50)\nprint(f'Manual nesting {baseline:.2f}s')\ncomparison = timeit.timeit(\n    stmt='for _ in fast(): pass',\n    globals=globals(),",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "baseline = timeit.timeit(\n    stmt='for _ in slow(): pass',\n    globals=globals(),\n    number=50)\nprint(f'Manual nesting {baseline:.2f}s')\ncomparison = timeit.timeit(\n    stmt='for _ in fast(): pass',\n    globals=globals(),\n    number=50)\nprint(f'Composed nesting {comparison:.2f}s')",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "comparison",
        "kind": 5,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "comparison = timeit.timeit(\n    stmt='for _ in fast(): pass',\n    globals=globals(),\n    number=50)\nprint(f'Composed nesting {comparison:.2f}s')\nreduction = -(comparison - baseline) / baseline\nprint(f'{reduction:.1%} less time')",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "reduction",
        "kind": 5,
        "importPath": "example_code.item_33",
        "description": "example_code.item_33",
        "peekOfCode": "reduction = -(comparison - baseline) / baseline\nprint(f'{reduction:.1%} less time')",
        "detail": "example_code.item_33",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport math\ndef wave(amplitude, steps):\n    step_size = 2 * math.pi / steps",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "wave",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def wave(amplitude, steps):\n    step_size = 2 * math.pi / steps\n    for step in range(steps):\n        radians = step * step_size\n        fraction = math.sin(radians)\n        output = amplitude * fraction\n        yield output\n# Example 2\ndef transmit(output):\n    if output is None:",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "transmit",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def transmit(output):\n    if output is None:\n        print(f'Output is None')\n    else:\n        print(f'Output: {output:>5.1f}')\ndef run(it):\n    for output in it:\n        transmit(output)\nrun(wave(3.0, 8))\n# Example 3",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def run(it):\n    for output in it:\n        transmit(output)\nrun(wave(3.0, 8))\n# Example 3\ndef my_generator():\n    received = yield 1\n    print(f'received = {received}')\nit = my_generator()\noutput = next(it)       # Get first generator output",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "my_generator",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def my_generator():\n    received = yield 1\n    print(f'received = {received}')\nit = my_generator()\noutput = next(it)       # Get first generator output\nprint(f'output = {output}')\ntry:\n    next(it)            # Run generator until it exits\nexcept StopIteration:\n    pass",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "wave_modulating",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def wave_modulating(steps):\n    step_size = 2 * math.pi / steps\n    amplitude = yield             # Receive initial amplitude\n    for step in range(steps):\n        radians = step * step_size\n        fraction = math.sin(radians)\n        output = amplitude * fraction\n        amplitude = yield output  # Receive next amplitude\n# Example 6\ndef run_modulating(it):",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "run_modulating",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def run_modulating(it):\n    amplitudes = [\n        None, 7, 7, 7, 2, 2, 2, 2, 10, 10, 10, 10, 10]\n    for amplitude in amplitudes:\n        output = it.send(amplitude)\n        transmit(output)\nrun_modulating(wave_modulating(12))\n# Example 7\ndef complex_wave():\n    yield from wave(7.0, 3)",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "complex_wave",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def complex_wave():\n    yield from wave(7.0, 3)\n    yield from wave(2.0, 4)\n    yield from wave(10.0, 5)\nrun(complex_wave())\n# Example 8\ndef complex_wave_modulating():\n    yield from wave_modulating(3)\n    yield from wave_modulating(4)\n    yield from wave_modulating(5)",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "complex_wave_modulating",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def complex_wave_modulating():\n    yield from wave_modulating(3)\n    yield from wave_modulating(4)\n    yield from wave_modulating(5)\nrun_modulating(complex_wave_modulating())\n# Example 9\ndef wave_cascading(amplitude_it, steps):\n    step_size = 2 * math.pi / steps\n    for step in range(steps):\n        radians = step * step_size",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "wave_cascading",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def wave_cascading(amplitude_it, steps):\n    step_size = 2 * math.pi / steps\n    for step in range(steps):\n        radians = step * step_size\n        fraction = math.sin(radians)\n        amplitude = next(amplitude_it)  # Get next input\n        output = amplitude * fraction\n        yield output\n# Example 10\ndef complex_wave_cascading(amplitude_it):",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "complex_wave_cascading",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def complex_wave_cascading(amplitude_it):\n    yield from wave_cascading(amplitude_it, 3)\n    yield from wave_cascading(amplitude_it, 4)\n    yield from wave_cascading(amplitude_it, 5)\n# Example 11\ndef run_cascading():\n    amplitudes = [7, 7, 7, 2, 2, 2, 2, 10, 10, 10, 10, 10]\n    it = complex_wave_cascading(iter(amplitudes))\n    for amplitude in amplitudes:\n        output = next(it)",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "run_cascading",
        "kind": 2,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "def run_cascading():\n    amplitudes = [7, 7, 7, 2, 2, 2, 2, 10, 10, 10, 10, 10]\n    it = complex_wave_cascading(iter(amplitudes))\n    for amplitude in amplitudes:\n        output = next(it)\n        transmit(output)\nrun_cascading()",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "it = my_generator()\noutput = next(it)       # Get first generator output\nprint(f'output = {output}')\ntry:\n    next(it)            # Run generator until it exits\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 4",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "output = next(it)       # Get first generator output\nprint(f'output = {output}')\ntry:\n    next(it)            # Run generator until it exits\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 4\nit = my_generator()",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "print(f'output",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "print(f'output = {output}')\ntry:\n    next(it)            # Run generator until it exits\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 4\nit = my_generator()\noutput = it.send(None)  # Get first generator output",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "it = my_generator()\noutput = it.send(None)  # Get first generator output\nprint(f'output = {output}')\ntry:\n    it.send('hello!')   # Send value into the generator\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 5",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "output = it.send(None)  # Get first generator output\nprint(f'output = {output}')\ntry:\n    it.send('hello!')   # Send value into the generator\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 5\ndef wave_modulating(steps):",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "print(f'output",
        "kind": 5,
        "importPath": "example_code.item_34",
        "description": "example_code.item_34",
        "peekOfCode": "print(f'output = {output}')\ntry:\n    it.send('hello!')   # Send value into the generator\nexcept StopIteration:\n    pass\nelse:\n    assert False\n# Example 5\ndef wave_modulating(steps):\n    step_size = 2 * math.pi / steps",
        "detail": "example_code.item_34",
        "documentation": {}
    },
    {
        "label": "Reset",
        "kind": 6,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "class Reset(Exception):\n    pass\ndef timer(period):\n    current = period\n    while current:\n        current -= 1\n        try:\n            yield current\n        except Reset:\n            current = period",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "class Timer:\n    def __init__(self, period):\n        self.current = period\n        self.period = period\n    def reset(self):\n        self.current = self.period\n    def __iter__(self):\n        while self.current:\n            self.current -= 1\n            yield self.current",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ntry:\n    class MyError(Exception):\n        pass",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "my_generator",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def my_generator():\n    yield 1\n    try:\n        yield 2\n    except MyError:\n        print('Got MyError!')\n    else:\n        yield 3\n    yield 4\nit = my_generator()",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def timer(period):\n    current = period\n    while current:\n        current -= 1\n        try:\n            yield current\n        except Reset:\n            current = period\n# Example 4\nRESETS = [",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "check_for_reset",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def check_for_reset():\n    # Poll for external event\n    return RESETS.pop(0)\ndef announce(remaining):\n    print(f'{remaining} ticks remaining')\ndef run():\n    it = timer(4)    \n    while True:\n        try:\n            if check_for_reset():",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "announce",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def announce(remaining):\n    print(f'{remaining} ticks remaining')\ndef run():\n    it = timer(4)    \n    while True:\n        try:\n            if check_for_reset():\n                current = it.throw(Reset())\n            else:\n                current = next(it)",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def run():\n    it = timer(4)    \n    while True:\n        try:\n            if check_for_reset():\n                current = it.throw(Reset())\n            else:\n                current = next(it)\n        except StopIteration:\n            break",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "def run():\n    timer = Timer(4)\n    for current in timer:\n        if check_for_reset():\n            timer.reset()\n        announce(current)\nrun()",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "it = my_generator()\nprint(next(it))  # Yield 1\nprint(next(it))  # Yield 2\nprint(it.throw(MyError('test error')))\n# Example 3\nclass Reset(Exception):\n    pass\ndef timer(period):\n    current = period\n    while current:",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "RESETS",
        "kind": 5,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "RESETS = [\n    False, False, False, True, False, True, False,\n    False, False, False, False, False, False, False]\ndef check_for_reset():\n    # Poll for external event\n    return RESETS.pop(0)\ndef announce(remaining):\n    print(f'{remaining} ticks remaining')\ndef run():\n    it = timer(4)    ",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "RESETS",
        "kind": 5,
        "importPath": "example_code.item_35",
        "description": "example_code.item_35",
        "peekOfCode": "RESETS = [\n    False, False, True, False, True, False,\n    False, False, False, False, False, False, False]\ndef run():\n    timer = Timer(4)\n    for current in timer:\n        if check_for_reset():\n            timer.reset()\n        announce(current)\nrun()",
        "detail": "example_code.item_35",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport itertools\n# Example 2\nit = itertools.chain([1, 2, 3], [4, 5, 6])",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "sum_modulo_20",
        "kind": 2,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "def sum_modulo_20(first, second):\n    output = first + second\n    return output % 20\nmodulo_reduce = itertools.accumulate(values, sum_modulo_20)\nprint('Modulo:', list(modulo_reduce))\n# Example 12\nsingle = itertools.product([1, 2], repeat=2)\nprint('Single:  ', list(single))\nmultiple = itertools.product([1, 2], ['a', 'b'])\nprint('Multiple:', list(multiple))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.chain([1, 2, 3], [4, 5, 6])\nprint(list(it))\n# Example 3\nit = itertools.repeat('hello', 3)\nprint(list(it))\n# Example 4\nit = itertools.cycle([1, 2])\nresult = [next(it) for _ in range (10)]\nprint(result)\n# Example 5",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.repeat('hello', 3)\nprint(list(it))\n# Example 4\nit = itertools.cycle([1, 2])\nresult = [next(it) for _ in range (10)]\nprint(result)\n# Example 5\nit1, it2, it3 = itertools.tee(['first', 'second'], 3)\nprint(list(it1))\nprint(list(it2))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.cycle([1, 2])\nresult = [next(it) for _ in range (10)]\nprint(result)\n# Example 5\nit1, it2, it3 = itertools.tee(['first', 'second'], 3)\nprint(list(it1))\nprint(list(it2))\nprint(list(it3))\n# Example 6\nkeys = ['one', 'two', 'three']",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "result = [next(it) for _ in range (10)]\nprint(result)\n# Example 5\nit1, it2, it3 = itertools.tee(['first', 'second'], 3)\nprint(list(it1))\nprint(list(it2))\nprint(list(it3))\n# Example 6\nkeys = ['one', 'two', 'three']\nvalues = [1, 2]",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "keys = ['one', 'two', 'three']\nvalues = [1, 2]\nnormal = list(zip(keys, values))\nprint('zip:        ', normal)\nit = itertools.zip_longest(keys, values, fillvalue='nope')\nlongest = list(it)\nprint('zip_longest:', longest)\n# Example 7\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2]\nnormal = list(zip(keys, values))\nprint('zip:        ', normal)\nit = itertools.zip_longest(keys, values, fillvalue='nope')\nlongest = list(it)\nprint('zip_longest:', longest)\n# Example 7\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "normal",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "normal = list(zip(keys, values))\nprint('zip:        ', normal)\nit = itertools.zip_longest(keys, values, fillvalue='nope')\nlongest = list(it)\nprint('zip_longest:', longest)\n# Example 7\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))\nmiddle_odds = itertools.islice(values, 2, 8, 2)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.zip_longest(keys, values, fillvalue='nope')\nlongest = list(it)\nprint('zip_longest:', longest)\n# Example 7\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))\nmiddle_odds = itertools.islice(values, 2, 8, 2)\nprint('Middle odds:', list(middle_odds))\n# Example 8",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "longest",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "longest = list(it)\nprint('zip_longest:', longest)\n# Example 7\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))\nmiddle_odds = itertools.islice(values, 2, 8, 2)\nprint('Middle odds:', list(middle_odds))\n# Example 8\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfirst_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))\nmiddle_odds = itertools.islice(values, 2, 8, 2)\nprint('Middle odds:', list(middle_odds))\n# Example 8\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.takewhile(less_than_seven, values)\nprint(list(it))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "first_five",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "first_five = itertools.islice(values, 5)\nprint('First five: ', list(first_five))\nmiddle_odds = itertools.islice(values, 2, 8, 2)\nprint('Middle odds:', list(middle_odds))\n# Example 8\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.takewhile(less_than_seven, values)\nprint(list(it))\n# Example 9",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "middle_odds",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "middle_odds = itertools.islice(values, 2, 8, 2)\nprint('Middle odds:', list(middle_odds))\n# Example 8\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.takewhile(less_than_seven, values)\nprint(list(it))\n# Example 9\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.takewhile(less_than_seven, values)\nprint(list(it))\n# Example 9\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "less_than_seven",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "less_than_seven = lambda x: x < 7\nit = itertools.takewhile(less_than_seven, values)\nprint(list(it))\n# Example 9\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.takewhile(less_than_seven, values)\nprint(list(it))\n# Example 9\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = lambda x: x % 2 == 0",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nless_than_seven = lambda x: x < 7\nit = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = lambda x: x % 2 == 0\nfilter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "less_than_seven",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "less_than_seven = lambda x: x < 7\nit = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = lambda x: x % 2 == 0\nfilter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.dropwhile(less_than_seven, values)\nprint(list(it))\n# Example 10\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = lambda x: x % 2 == 0\nfilter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))\n# Example 11",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = lambda x: x % 2 == 0\nfilter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))\n# Example 11\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "evens",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "evens = lambda x: x % 2 == 0\nfilter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))\n# Example 11\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))\ndef sum_modulo_20(first, second):",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "filter_result",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "filter_result = filter(evens, values)\nprint('Filter:      ', list(filter_result))\nfilter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))\n# Example 11\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))\ndef sum_modulo_20(first, second):\n    output = first + second",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "filter_false_result",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "filter_false_result = itertools.filterfalse(evens, values)\nprint('Filter false:', list(filter_false_result))\n# Example 11\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))\ndef sum_modulo_20(first, second):\n    output = first + second\n    return output % 20\nmodulo_reduce = itertools.accumulate(values, sum_modulo_20)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))\ndef sum_modulo_20(first, second):\n    output = first + second\n    return output % 20\nmodulo_reduce = itertools.accumulate(values, sum_modulo_20)\nprint('Modulo:', list(modulo_reduce))\n# Example 12\nsingle = itertools.product([1, 2], repeat=2)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "sum_reduce",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "sum_reduce = itertools.accumulate(values)\nprint('Sum:   ', list(sum_reduce))\ndef sum_modulo_20(first, second):\n    output = first + second\n    return output % 20\nmodulo_reduce = itertools.accumulate(values, sum_modulo_20)\nprint('Modulo:', list(modulo_reduce))\n# Example 12\nsingle = itertools.product([1, 2], repeat=2)\nprint('Single:  ', list(single))",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "modulo_reduce",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "modulo_reduce = itertools.accumulate(values, sum_modulo_20)\nprint('Modulo:', list(modulo_reduce))\n# Example 12\nsingle = itertools.product([1, 2], repeat=2)\nprint('Single:  ', list(single))\nmultiple = itertools.product([1, 2], ['a', 'b'])\nprint('Multiple:', list(multiple))\n# Example 13\nit = itertools.permutations([1, 2, 3, 4], 2)\noriginal_print = print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "single = itertools.product([1, 2], repeat=2)\nprint('Single:  ', list(single))\nmultiple = itertools.product([1, 2], ['a', 'b'])\nprint('Multiple:', list(multiple))\n# Example 13\nit = itertools.permutations([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "multiple",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "multiple = itertools.product([1, 2], ['a', 'b'])\nprint('Multiple:', list(multiple))\n# Example 13\nit = itertools.permutations([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print\n# Example 14\nit = itertools.combinations([1, 2, 3, 4], 2)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.permutations([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print\n# Example 14\nit = itertools.combinations([1, 2, 3, 4], 2)\nprint(list(it))\n# Example 15\nit = itertools.combinations_with_replacement([1, 2, 3, 4], 2)",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "original_print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "original_print = print\nprint = pprint\nprint(list(it))\nprint = original_print\n# Example 14\nit = itertools.combinations([1, 2, 3, 4], 2)\nprint(list(it))\n# Example 15\nit = itertools.combinations_with_replacement([1, 2, 3, 4], 2)\noriginal_print = print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "print = pprint\nprint(list(it))\nprint = original_print\n# Example 14\nit = itertools.combinations([1, 2, 3, 4], 2)\nprint(list(it))\n# Example 15\nit = itertools.combinations_with_replacement([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "print = original_print\n# Example 14\nit = itertools.combinations([1, 2, 3, 4], 2)\nprint(list(it))\n# Example 15\nit = itertools.combinations_with_replacement([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.combinations([1, 2, 3, 4], 2)\nprint(list(it))\n# Example 15\nit = itertools.combinations_with_replacement([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "it = itertools.combinations_with_replacement([1, 2, 3, 4], 2)\noriginal_print = print\nprint = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "original_print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "original_print = print\nprint = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "print = pprint\nprint(list(it))\nprint = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_36",
        "description": "example_code.item_36",
        "peekOfCode": "print = original_print",
        "detail": "example_code.item_36",
        "documentation": {}
    },
    {
        "label": "SimpleGradebook",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class SimpleGradebook:\n    def __init__(self):\n        self._grades = {}\n    def add_student(self, name):\n        self._grades[name] = []\n    def report_grade(self, name, score):\n        self._grades[name].append(score)\n    def average_grade(self, name):\n        grades = self._grades[name]\n        return sum(grades) / len(grades)",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "BySubjectGradebook",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class BySubjectGradebook:\n    def __init__(self):\n        self._grades = {}                       # Outer dict\n    def add_student(self, name):\n        self._grades[name] = defaultdict(list)  # Inner dict\n# Example 4\n    def report_grade(self, name, subject, grade):\n        by_subject = self._grades[name]\n        grade_list = by_subject[subject]\n        grade_list.append(grade)",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "WeightedGradebook",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class WeightedGradebook:\n    def __init__(self):\n        self._grades = {}\n    def add_student(self, name):\n        self._grades[name] = defaultdict(list)\n    def report_grade(self, name, subject, score, weight):\n        by_subject = self._grades[name]\n        grade_list = by_subject[subject]\n        grade_list.append((score, weight))\n# Example 7",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class Subject:\n    def __init__(self):\n        self._grades = []\n    def report_grade(self, score, weight):\n        self._grades.append(Grade(score, weight))\n    def average_grade(self):\n        total, total_weight = 0, 0\n        for grade in self._grades:\n            total += grade.score * grade.weight\n            total_weight += grade.weight",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class Student:\n    def __init__(self):\n        self._subjects = defaultdict(Subject)\n    def get_subject(self, name):\n        return self._subjects[name]\n    def average_grade(self):\n        total, count = 0, 0\n        for subject in self._subjects.values():\n            total += subject.average_grade()\n            count += 1",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "Gradebook",
        "kind": 6,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "class Gradebook:\n    def __init__(self):\n        self._students = defaultdict(Student)\n    def get_student(self, name):\n        return self._students[name]\n# Example 15\nbook = Gradebook()\nalbert = book.get_student('Albert Einstein')\nmath = albert.get_subject('Math')\nmath.report_grade(75, 0.05)",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass SimpleGradebook:\n    def __init__(self):\n        self._grades = {}",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "book = SimpleGradebook()\nbook.add_student('Isaac Newton')\nbook.report_grade('Isaac Newton', 90)\nbook.report_grade('Isaac Newton', 95)\nbook.report_grade('Isaac Newton', 85)\nprint(book.average_grade('Isaac Newton'))\n# Example 3\nfrom collections import defaultdict\nclass BySubjectGradebook:\n    def __init__(self):",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "book = BySubjectGradebook()\nbook.add_student('Albert Einstein')\nbook.report_grade('Albert Einstein', 'Math', 75)\nbook.report_grade('Albert Einstein', 'Math', 65)\nbook.report_grade('Albert Einstein', 'Gym', 90)\nbook.report_grade('Albert Einstein', 'Gym', 95)\nprint(book.average_grade('Albert Einstein'))\n# Example 6\nclass WeightedGradebook:\n    def __init__(self):",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "book = WeightedGradebook()\nbook.add_student('Albert Einstein')\nbook.report_grade('Albert Einstein', 'Math', 75, 0.05)\nbook.report_grade('Albert Einstein', 'Math', 65, 0.15)\nbook.report_grade('Albert Einstein', 'Math', 70, 0.80)\nbook.report_grade('Albert Einstein', 'Gym', 100, 0.40)\nbook.report_grade('Albert Einstein', 'Gym', 85, 0.60)\nprint(book.average_grade('Albert Einstein'))\n# Example 9\ngrades = []",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "grades = []\ngrades.append((95, 0.45))\ngrades.append((85, 0.55))\ntotal = sum(score * weight for score, weight in grades)\ntotal_weight = sum(weight for _, weight in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 10\ngrades = []\ngrades.append((95, 0.45, 'Great job'))",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "total = sum(score * weight for score, weight in grades)\ntotal_weight = sum(weight for _, weight in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 10\ngrades = []\ngrades.append((95, 0.45, 'Great job'))\ngrades.append((85, 0.55, 'Better next time'))\ntotal = sum(score * weight for score, weight, _ in grades)\ntotal_weight = sum(weight for _, weight, _ in grades)",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "total_weight",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "total_weight = sum(weight for _, weight in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 10\ngrades = []\ngrades.append((95, 0.45, 'Great job'))\ngrades.append((85, 0.55, 'Better next time'))\ntotal = sum(score * weight for score, weight, _ in grades)\ntotal_weight = sum(weight for _, weight, _ in grades)\naverage_grade = total / total_weight",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "average_grade",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "average_grade = total / total_weight\nprint(average_grade)\n# Example 10\ngrades = []\ngrades.append((95, 0.45, 'Great job'))\ngrades.append((85, 0.55, 'Better next time'))\ntotal = sum(score * weight for score, weight, _ in grades)\ntotal_weight = sum(weight for _, weight, _ in grades)\naverage_grade = total / total_weight\nprint(average_grade)",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "grades = []\ngrades.append((95, 0.45, 'Great job'))\ngrades.append((85, 0.55, 'Better next time'))\ntotal = sum(score * weight for score, weight, _ in grades)\ntotal_weight = sum(weight for _, weight, _ in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 11\nfrom collections import namedtuple\nGrade = namedtuple('Grade', ('score', 'weight'))",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "total = sum(score * weight for score, weight, _ in grades)\ntotal_weight = sum(weight for _, weight, _ in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 11\nfrom collections import namedtuple\nGrade = namedtuple('Grade', ('score', 'weight'))\n# Example 12\nclass Subject:\n    def __init__(self):",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "total_weight",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "total_weight = sum(weight for _, weight, _ in grades)\naverage_grade = total / total_weight\nprint(average_grade)\n# Example 11\nfrom collections import namedtuple\nGrade = namedtuple('Grade', ('score', 'weight'))\n# Example 12\nclass Subject:\n    def __init__(self):\n        self._grades = []",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "average_grade",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "average_grade = total / total_weight\nprint(average_grade)\n# Example 11\nfrom collections import namedtuple\nGrade = namedtuple('Grade', ('score', 'weight'))\n# Example 12\nclass Subject:\n    def __init__(self):\n        self._grades = []\n    def report_grade(self, score, weight):",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "Grade = namedtuple('Grade', ('score', 'weight'))\n# Example 12\nclass Subject:\n    def __init__(self):\n        self._grades = []\n    def report_grade(self, score, weight):\n        self._grades.append(Grade(score, weight))\n    def average_grade(self):\n        total, total_weight = 0, 0\n        for grade in self._grades:",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "book = Gradebook()\nalbert = book.get_student('Albert Einstein')\nmath = albert.get_subject('Math')\nmath.report_grade(75, 0.05)\nmath.report_grade(65, 0.15)\nmath.report_grade(70, 0.80)\ngym = albert.get_subject('Gym')\ngym.report_grade(100, 0.40)\ngym.report_grade(85, 0.60)\nprint(albert.average_grade())",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "albert",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "albert = book.get_student('Albert Einstein')\nmath = albert.get_subject('Math')\nmath.report_grade(75, 0.05)\nmath.report_grade(65, 0.15)\nmath.report_grade(70, 0.80)\ngym = albert.get_subject('Gym')\ngym.report_grade(100, 0.40)\ngym.report_grade(85, 0.60)\nprint(albert.average_grade())",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "math = albert.get_subject('Math')\nmath.report_grade(75, 0.05)\nmath.report_grade(65, 0.15)\nmath.report_grade(70, 0.80)\ngym = albert.get_subject('Gym')\ngym.report_grade(100, 0.40)\ngym.report_grade(85, 0.60)\nprint(albert.average_grade())",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 5,
        "importPath": "example_code.item_37",
        "description": "example_code.item_37",
        "peekOfCode": "gym = albert.get_subject('Gym')\ngym.report_grade(100, 0.40)\ngym.report_grade(85, 0.60)\nprint(albert.average_grade())",
        "detail": "example_code.item_37",
        "documentation": {}
    },
    {
        "label": "CountMissing",
        "kind": 6,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "class CountMissing:\n    def __init__(self):\n        self.added = 0\n    def missing(self):\n        self.added += 1\n        return 0\n# Example 7\ncounter = CountMissing()\nresult = defaultdict(counter.missing, current)  # Method ref\nfor key, amount in increments:",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "BetterCountMissing",
        "kind": 6,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "class BetterCountMissing:\n    def __init__(self):\n        self.added = 0\n    def __call__(self):\n        self.added += 1\n        return 0\ncounter = BetterCountMissing()\nassert counter() == 0\nassert callable(counter)\n# Example 9",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nnames = ['Socrates', 'Archimedes', 'Plato', 'Aristotle']\nnames.sort(key=len)\nprint(names)",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "log_missing",
        "kind": 2,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "def log_missing():\n    print('Key added')\n    return 0\n# Example 3\nfrom collections import defaultdict\ncurrent = {'green': 12, 'blue': 3}\nincrements = [\n    ('red', 5),\n    ('blue', 17),\n    ('orange', 9),",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "increment_with_report",
        "kind": 2,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "def increment_with_report(current, increments):\n    added_count = 0\n    def missing():\n        nonlocal added_count  # Stateful closure\n        added_count += 1\n        return 0\n    result = defaultdict(missing, current)\n    for key, amount in increments:\n        result[key] += amount\n    return result, added_count",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "names = ['Socrates', 'Archimedes', 'Plato', 'Aristotle']\nnames.sort(key=len)\nprint(names)\n# Example 2\ndef log_missing():\n    print('Key added')\n    return 0\n# Example 3\nfrom collections import defaultdict\ncurrent = {'green': 12, 'blue': 3}",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "current",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "current = {'green': 12, 'blue': 3}\nincrements = [\n    ('red', 5),\n    ('blue', 17),\n    ('orange', 9),\n]\nresult = defaultdict(log_missing, current)\nprint('Before:', dict(result))\nfor key, amount in increments:\n    result[key] += amount",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "increments",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "increments = [\n    ('red', 5),\n    ('blue', 17),\n    ('orange', 9),\n]\nresult = defaultdict(log_missing, current)\nprint('Before:', dict(result))\nfor key, amount in increments:\n    result[key] += amount\nprint('After: ', dict(result))",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "result = defaultdict(log_missing, current)\nprint('Before:', dict(result))\nfor key, amount in increments:\n    result[key] += amount\nprint('After: ', dict(result))\n# Example 4\ndef increment_with_report(current, increments):\n    added_count = 0\n    def missing():\n        nonlocal added_count  # Stateful closure",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "counter = CountMissing()\nresult = defaultdict(counter.missing, current)  # Method ref\nfor key, amount in increments:\n    result[key] += amount\nassert counter.added == 2\nprint(result)\n# Example 8\nclass BetterCountMissing:\n    def __init__(self):\n        self.added = 0",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "result = defaultdict(counter.missing, current)  # Method ref\nfor key, amount in increments:\n    result[key] += amount\nassert counter.added == 2\nprint(result)\n# Example 8\nclass BetterCountMissing:\n    def __init__(self):\n        self.added = 0\n    def __call__(self):",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "counter = BetterCountMissing()\nassert counter() == 0\nassert callable(counter)\n# Example 9\ncounter = BetterCountMissing()\nresult = defaultdict(counter, current)  # Relies on __call__\nfor key, amount in increments:\n    result[key] += amount\nassert counter.added == 2\nprint(result)",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "counter = BetterCountMissing()\nresult = defaultdict(counter, current)  # Relies on __call__\nfor key, amount in increments:\n    result[key] += amount\nassert counter.added == 2\nprint(result)",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_38",
        "description": "example_code.item_38",
        "peekOfCode": "result = defaultdict(counter, current)  # Relies on __call__\nfor key, amount in increments:\n    result[key] += amount\nassert counter.added == 2\nprint(result)",
        "detail": "example_code.item_38",
        "documentation": {}
    },
    {
        "label": "InputData",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class InputData:\n    def read(self):\n        raise NotImplementedError\n# Example 2\nclass PathInputData(InputData):\n    def __init__(self, path):\n        super().__init__()\n        self.path = path\n    def read(self):\n        with open(self.path) as f:",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "PathInputData",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class PathInputData(InputData):\n    def __init__(self, path):\n        super().__init__()\n        self.path = path\n    def read(self):\n        with open(self.path) as f:\n            return f.read()\n# Example 3\nclass Worker:\n    def __init__(self, input_data):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class Worker:\n    def __init__(self, input_data):\n        self.input_data = input_data\n        self.result = None\n    def map(self):\n        raise NotImplementedError\n    def reduce(self, other):\n        raise NotImplementedError\n# Example 4\nclass LineCountWorker(Worker):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "LineCountWorker",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class LineCountWorker(Worker):\n    def map(self):\n        data = self.input_data.read()\n        self.result = data.count('\\n')\n    def reduce(self, other):\n        self.result += other.result\n# Example 5\nimport os\ndef generate_inputs(data_dir):\n    for name in os.listdir(data_dir):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "GenericInputData",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class GenericInputData:\n    def read(self):\n        raise NotImplementedError\n    @classmethod\n    def generate_inputs(cls, config):\n        raise NotImplementedError\n# Example 11\nclass PathInputData(GenericInputData):\n    def __init__(self, path):\n        super().__init__()",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "PathInputData",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class PathInputData(GenericInputData):\n    def __init__(self, path):\n        super().__init__()\n        self.path = path\n    def read(self):\n        with open(self.path) as f:\n            return f.read()\n    @classmethod\n    def generate_inputs(cls, config):\n        data_dir = config['data_dir']",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "GenericWorker",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class GenericWorker:\n    def __init__(self, input_data):\n        self.input_data = input_data\n        self.result = None\n    def map(self):\n        raise NotImplementedError\n    def reduce(self, other):\n        raise NotImplementedError\n    @classmethod\n    def create_workers(cls, input_class, config):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "LineCountWorker",
        "kind": 6,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "class LineCountWorker(GenericWorker):\n    def map(self):\n        data = self.input_data.read()\n        self.result = data.count('\\n')\n    def reduce(self, other):\n        self.result += other.result\n# Example 14\ndef mapreduce(worker_class, input_class, config):\n    workers = worker_class.create_workers(input_class, config)\n    return execute(workers)",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass InputData:\n    def read(self):\n        raise NotImplementedError",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "generate_inputs",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def generate_inputs(data_dir):\n    for name in os.listdir(data_dir):\n        yield PathInputData(os.path.join(data_dir, name))\n# Example 6\ndef create_workers(input_list):\n    workers = []\n    for input_data in input_list:\n        workers.append(LineCountWorker(input_data))\n    return workers\n# Example 7",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "create_workers",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def create_workers(input_list):\n    workers = []\n    for input_data in input_list:\n        workers.append(LineCountWorker(input_data))\n    return workers\n# Example 7\nfrom threading import Thread\ndef execute(workers):\n    threads = [Thread(target=w.map) for w in workers]\n    for thread in threads: thread.start()",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "execute",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def execute(workers):\n    threads = [Thread(target=w.map) for w in workers]\n    for thread in threads: thread.start()\n    for thread in threads: thread.join()\n    first, *rest = workers\n    for worker in rest:\n        first.reduce(worker)\n    return first.result\n# Example 8\ndef mapreduce(data_dir):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "mapreduce",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def mapreduce(data_dir):\n    inputs = generate_inputs(data_dir)\n    workers = create_workers(inputs)\n    return execute(workers)\n# Example 9\nimport os\nimport random\ndef write_test_files(tmpdir):\n    os.makedirs(tmpdir)\n    for i in range(100):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "write_test_files",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def write_test_files(tmpdir):\n    os.makedirs(tmpdir)\n    for i in range(100):\n        with open(os.path.join(tmpdir, str(i)), 'w') as f:\n            f.write('\\n' * random.randint(0, 100))\ntmpdir = 'test_inputs'\nwrite_test_files(tmpdir)\nresult = mapreduce(tmpdir)\nprint(f'There are {result} lines')\n# Example 10",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "mapreduce",
        "kind": 2,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "def mapreduce(worker_class, input_class, config):\n    workers = worker_class.create_workers(input_class, config)\n    return execute(workers)\n# Example 15\nconfig = {'data_dir': tmpdir}\nresult = mapreduce(LineCountWorker, PathInputData, config)\nprint(f'There are {result} lines')",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "tmpdir",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "tmpdir = 'test_inputs'\nwrite_test_files(tmpdir)\nresult = mapreduce(tmpdir)\nprint(f'There are {result} lines')\n# Example 10\nclass GenericInputData:\n    def read(self):\n        raise NotImplementedError\n    @classmethod\n    def generate_inputs(cls, config):",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "result = mapreduce(tmpdir)\nprint(f'There are {result} lines')\n# Example 10\nclass GenericInputData:\n    def read(self):\n        raise NotImplementedError\n    @classmethod\n    def generate_inputs(cls, config):\n        raise NotImplementedError\n# Example 11",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "config = {'data_dir': tmpdir}\nresult = mapreduce(LineCountWorker, PathInputData, config)\nprint(f'There are {result} lines')",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_39",
        "description": "example_code.item_39",
        "peekOfCode": "result = mapreduce(LineCountWorker, PathInputData, config)\nprint(f'There are {result} lines')",
        "detail": "example_code.item_39",
        "documentation": {}
    },
    {
        "label": "MyBaseClass",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class MyBaseClass:\n    def __init__(self, value):\n        self.value = value\nclass MyChildClass(MyBaseClass):\n    def __init__(self):\n        MyBaseClass.__init__(self, 5)\n    def times_two(self):\n        return self.value * 2\nfoo = MyChildClass()\nassert foo.times_two() == 10",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "MyChildClass",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class MyChildClass(MyBaseClass):\n    def __init__(self):\n        MyBaseClass.__init__(self, 5)\n    def times_two(self):\n        return self.value * 2\nfoo = MyChildClass()\nassert foo.times_two() == 10\n# Example 2\nclass TimesTwo:\n    def __init__(self):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "TimesTwo",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class TimesTwo:\n    def __init__(self):\n        self.value *= 2\nclass PlusFive:\n    def __init__(self):\n        self.value += 5\n# Example 3\nclass OneWay(MyBaseClass, TimesTwo, PlusFive):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "PlusFive",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class PlusFive:\n    def __init__(self):\n        self.value += 5\n# Example 3\nclass OneWay(MyBaseClass, TimesTwo, PlusFive):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        TimesTwo.__init__(self)\n        PlusFive.__init__(self)\n# Example 4",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "OneWay",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class OneWay(MyBaseClass, TimesTwo, PlusFive):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        TimesTwo.__init__(self)\n        PlusFive.__init__(self)\n# Example 4\nfoo = OneWay(5)\nprint('First ordering value is (5 * 2) + 5 =', foo.value)\n# Example 5\nclass AnotherWay(MyBaseClass, PlusFive, TimesTwo):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "AnotherWay",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class AnotherWay(MyBaseClass, PlusFive, TimesTwo):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        TimesTwo.__init__(self)\n        PlusFive.__init__(self)\n# Example 6\nbar = AnotherWay(5)\nprint('Second ordering value is', bar.value)\n# Example 7\nclass TimesSeven(MyBaseClass):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "TimesSeven",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class TimesSeven(MyBaseClass):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        self.value *= 7\nclass PlusNine(MyBaseClass):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        self.value += 9\n# Example 8\nclass ThisWay(TimesSeven, PlusNine):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "PlusNine",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class PlusNine(MyBaseClass):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        self.value += 9\n# Example 8\nclass ThisWay(TimesSeven, PlusNine):\n    def __init__(self, value):\n        TimesSeven.__init__(self, value)\n        PlusNine.__init__(self, value)\nfoo = ThisWay(5)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "ThisWay",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class ThisWay(TimesSeven, PlusNine):\n    def __init__(self, value):\n        TimesSeven.__init__(self, value)\n        PlusNine.__init__(self, value)\nfoo = ThisWay(5)\nprint('Should be (5 * 7) + 9 = 44 but is', foo.value)\n# Example 9\nclass MyBaseClass:\n    def __init__(self, value):\n        self.value = value",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "MyBaseClass",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class MyBaseClass:\n    def __init__(self, value):\n        self.value = value\nclass TimesSevenCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value *= 7\nclass PlusNineCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "TimesSevenCorrect",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class TimesSevenCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value *= 7\nclass PlusNineCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value += 9\n# Example 10\nclass GoodWay(TimesSevenCorrect, PlusNineCorrect):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "PlusNineCorrect",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class PlusNineCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value += 9\n# Example 10\nclass GoodWay(TimesSevenCorrect, PlusNineCorrect):\n    def __init__(self, value):\n        super().__init__(value)\nfoo = GoodWay(5)\nprint('Should be 7 * (5 + 9) = 98 and is', foo.value)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "GoodWay",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class GoodWay(TimesSevenCorrect, PlusNineCorrect):\n    def __init__(self, value):\n        super().__init__(value)\nfoo = GoodWay(5)\nprint('Should be 7 * (5 + 9) = 98 and is', foo.value)\n# Example 11\nmro_str = '\\n'.join(repr(cls) for cls in GoodWay.mro())\nprint(mro_str)\n# Example 12\nclass ExplicitTrisect(MyBaseClass):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "ExplicitTrisect",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class ExplicitTrisect(MyBaseClass):\n    def __init__(self, value):\n        super(ExplicitTrisect, self).__init__(value)\n        self.value /= 3\nassert ExplicitTrisect(9).value == 3\n# Example 13\nclass AutomaticTrisect(MyBaseClass):\n    def __init__(self, value):\n        super(__class__, self).__init__(value)\n        self.value /= 3",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "AutomaticTrisect",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class AutomaticTrisect(MyBaseClass):\n    def __init__(self, value):\n        super(__class__, self).__init__(value)\n        self.value /= 3\nclass ImplicitTrisect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value /= 3\nassert ExplicitTrisect(9).value == 3\nassert AutomaticTrisect(9).value == 3",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "ImplicitTrisect",
        "kind": 6,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "class ImplicitTrisect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value /= 3\nassert ExplicitTrisect(9).value == 3\nassert AutomaticTrisect(9).value == 3\nassert ImplicitTrisect(9).value == 3",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass MyBaseClass:\n    def __init__(self, value):\n        self.value = value",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "foo = MyChildClass()\nassert foo.times_two() == 10\n# Example 2\nclass TimesTwo:\n    def __init__(self):\n        self.value *= 2\nclass PlusFive:\n    def __init__(self):\n        self.value += 5\n# Example 3",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "foo = OneWay(5)\nprint('First ordering value is (5 * 2) + 5 =', foo.value)\n# Example 5\nclass AnotherWay(MyBaseClass, PlusFive, TimesTwo):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        TimesTwo.__init__(self)\n        PlusFive.__init__(self)\n# Example 6\nbar = AnotherWay(5)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "bar = AnotherWay(5)\nprint('Second ordering value is', bar.value)\n# Example 7\nclass TimesSeven(MyBaseClass):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)\n        self.value *= 7\nclass PlusNine(MyBaseClass):\n    def __init__(self, value):\n        MyBaseClass.__init__(self, value)",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "foo = ThisWay(5)\nprint('Should be (5 * 7) + 9 = 44 but is', foo.value)\n# Example 9\nclass MyBaseClass:\n    def __init__(self, value):\n        self.value = value\nclass TimesSevenCorrect(MyBaseClass):\n    def __init__(self, value):\n        super().__init__(value)\n        self.value *= 7",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "foo = GoodWay(5)\nprint('Should be 7 * (5 + 9) = 98 and is', foo.value)\n# Example 11\nmro_str = '\\n'.join(repr(cls) for cls in GoodWay.mro())\nprint(mro_str)\n# Example 12\nclass ExplicitTrisect(MyBaseClass):\n    def __init__(self, value):\n        super(ExplicitTrisect, self).__init__(value)\n        self.value /= 3",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "mro_str",
        "kind": 5,
        "importPath": "example_code.item_40",
        "description": "example_code.item_40",
        "peekOfCode": "mro_str = '\\n'.join(repr(cls) for cls in GoodWay.mro())\nprint(mro_str)\n# Example 12\nclass ExplicitTrisect(MyBaseClass):\n    def __init__(self, value):\n        super(ExplicitTrisect, self).__init__(value)\n        self.value /= 3\nassert ExplicitTrisect(9).value == 3\n# Example 13\nclass AutomaticTrisect(MyBaseClass):",
        "detail": "example_code.item_40",
        "documentation": {}
    },
    {
        "label": "ToDictMixin",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class ToDictMixin:\n    def to_dict(self):\n        return self._traverse_dict(self.__dict__)\n# Example 2\n    def _traverse_dict(self, instance_dict):\n        output = {}\n        for key, value in instance_dict.items():\n            output[key] = self._traverse(key, value)\n        return output\n    def _traverse(self, key, value):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "BinaryTree",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class BinaryTree(ToDictMixin):\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n# Example 4\ntree = BinaryTree(10,\n    left=BinaryTree(7, right=BinaryTree(9)),\n    right=BinaryTree(13, left=BinaryTree(11)))\norig_print = print",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "BinaryTreeWithParent",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class BinaryTreeWithParent(BinaryTree):\n    def __init__(self, value, left=None,\n                 right=None, parent=None):\n        super().__init__(value, left=left, right=right)\n        self.parent = parent\n# Example 6\n    def _traverse(self, key, value):\n        if (isinstance(value, BinaryTreeWithParent) and\n                key == 'parent'):\n            return value.value  # Prevent cycles",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "NamedSubTree",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name\n        self.tree_with_parent = tree_with_parent\nmy_tree = NamedSubTree('foobar', root.left.right)\norig_print = print\nprint = pprint\nprint(my_tree.to_dict())  # No infinite loop\nprint = orig_print\n# Example 9",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "JsonMixin",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class JsonMixin:\n    @classmethod\n    def from_json(cls, data):\n        kwargs = json.loads(data)\n        return cls(**kwargs)\n    def to_json(self):\n        return json.dumps(self.to_dict())\n# Example 10\nclass DatacenterRack(ToDictMixin, JsonMixin):\n    def __init__(self, switch=None, machines=None):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "DatacenterRack",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class DatacenterRack(ToDictMixin, JsonMixin):\n    def __init__(self, switch=None, machines=None):\n        self.switch = Switch(**switch)\n        self.machines = [\n            Machine(**kwargs) for kwargs in machines]\nclass Switch(ToDictMixin, JsonMixin):\n    def __init__(self, ports=None, speed=None):\n        self.ports = ports\n        self.speed = speed\nclass Machine(ToDictMixin, JsonMixin):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "Switch",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class Switch(ToDictMixin, JsonMixin):\n    def __init__(self, ports=None, speed=None):\n        self.ports = ports\n        self.speed = speed\nclass Machine(ToDictMixin, JsonMixin):\n    def __init__(self, cores=None, ram=None, disk=None):\n        self.cores = cores\n        self.ram = ram\n        self.disk = disk\n# Example 11",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "Machine",
        "kind": 6,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "class Machine(ToDictMixin, JsonMixin):\n    def __init__(self, cores=None, ram=None, disk=None):\n        self.cores = cores\n        self.ram = ram\n        self.disk = disk\n# Example 11\nserialized = \"\"\"{\n    \"switch\": {\"ports\": 5, \"speed\": 1e9},\n    \"machines\": [\n        {\"cores\": 8, \"ram\": 32e9, \"disk\": 5e12},",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass ToDictMixin:\n    def to_dict(self):\n        return self._traverse_dict(self.__dict__)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "tree = BinaryTree(10,\n    left=BinaryTree(7, right=BinaryTree(9)),\n    right=BinaryTree(13, left=BinaryTree(11)))\norig_print = print\nprint = pprint\nprint(tree.to_dict())\nprint = orig_print\n# Example 5\nclass BinaryTreeWithParent(BinaryTree):\n    def __init__(self, value, left=None,",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "orig_print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "orig_print = print\nprint = pprint\nprint(tree.to_dict())\nprint = orig_print\n# Example 5\nclass BinaryTreeWithParent(BinaryTree):\n    def __init__(self, value, left=None,\n                 right=None, parent=None):\n        super().__init__(value, left=left, right=right)\n        self.parent = parent",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = pprint\nprint(tree.to_dict())\nprint = orig_print\n# Example 5\nclass BinaryTreeWithParent(BinaryTree):\n    def __init__(self, value, left=None,\n                 right=None, parent=None):\n        super().__init__(value, left=left, right=right)\n        self.parent = parent\n# Example 6",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = orig_print\n# Example 5\nclass BinaryTreeWithParent(BinaryTree):\n    def __init__(self, value, left=None,\n                 right=None, parent=None):\n        super().__init__(value, left=left, right=right)\n        self.parent = parent\n# Example 6\n    def _traverse(self, key, value):\n        if (isinstance(value, BinaryTreeWithParent) and",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "root = BinaryTreeWithParent(10)\nroot.left = BinaryTreeWithParent(7, parent=root)\nroot.left.right = BinaryTreeWithParent(9, parent=root.left)\norig_print = print\nprint = pprint\nprint(root.to_dict())\nprint = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "root.left",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "root.left = BinaryTreeWithParent(7, parent=root)\nroot.left.right = BinaryTreeWithParent(9, parent=root.left)\norig_print = print\nprint = pprint\nprint(root.to_dict())\nprint = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "root.left.right",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "root.left.right = BinaryTreeWithParent(9, parent=root.left)\norig_print = print\nprint = pprint\nprint(root.to_dict())\nprint = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name\n        self.tree_with_parent = tree_with_parent",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "orig_print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "orig_print = print\nprint = pprint\nprint(root.to_dict())\nprint = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name\n        self.tree_with_parent = tree_with_parent\nmy_tree = NamedSubTree('foobar', root.left.right)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = pprint\nprint(root.to_dict())\nprint = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name\n        self.tree_with_parent = tree_with_parent\nmy_tree = NamedSubTree('foobar', root.left.right)\norig_print = print",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = orig_print\n# Example 8\nclass NamedSubTree(ToDictMixin):\n    def __init__(self, name, tree_with_parent):\n        self.name = name\n        self.tree_with_parent = tree_with_parent\nmy_tree = NamedSubTree('foobar', root.left.right)\norig_print = print\nprint = pprint\nprint(my_tree.to_dict())  # No infinite loop",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "my_tree",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "my_tree = NamedSubTree('foobar', root.left.right)\norig_print = print\nprint = pprint\nprint(my_tree.to_dict())  # No infinite loop\nprint = orig_print\n# Example 9\nimport json\nclass JsonMixin:\n    @classmethod\n    def from_json(cls, data):",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "orig_print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "orig_print = print\nprint = pprint\nprint(my_tree.to_dict())  # No infinite loop\nprint = orig_print\n# Example 9\nimport json\nclass JsonMixin:\n    @classmethod\n    def from_json(cls, data):\n        kwargs = json.loads(data)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = pprint\nprint(my_tree.to_dict())  # No infinite loop\nprint = orig_print\n# Example 9\nimport json\nclass JsonMixin:\n    @classmethod\n    def from_json(cls, data):\n        kwargs = json.loads(data)\n        return cls(**kwargs)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "print = orig_print\n# Example 9\nimport json\nclass JsonMixin:\n    @classmethod\n    def from_json(cls, data):\n        kwargs = json.loads(data)\n        return cls(**kwargs)\n    def to_json(self):\n        return json.dumps(self.to_dict())",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "serialized",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "serialized = \"\"\"{\n    \"switch\": {\"ports\": 5, \"speed\": 1e9},\n    \"machines\": [\n        {\"cores\": 8, \"ram\": 32e9, \"disk\": 5e12},\n        {\"cores\": 4, \"ram\": 16e9, \"disk\": 1e12},\n        {\"cores\": 2, \"ram\": 4e9, \"disk\": 500e9}\n    ]\n}\"\"\"\ndeserialized = DatacenterRack.from_json(serialized)\nroundtrip = deserialized.to_json()",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "deserialized",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "deserialized = DatacenterRack.from_json(serialized)\nroundtrip = deserialized.to_json()\nassert json.loads(serialized) == json.loads(roundtrip)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "roundtrip",
        "kind": 5,
        "importPath": "example_code.item_41",
        "description": "example_code.item_41",
        "peekOfCode": "roundtrip = deserialized.to_json()\nassert json.loads(serialized) == json.loads(roundtrip)",
        "detail": "example_code.item_41",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyObject:\n    def __init__(self):\n        self.public_field = 5\n        self.__private_field = 10\n    def get_private_field(self):\n        return self.__private_field\n# Example 2\nfoo = MyObject()\nassert foo.public_field == 5\n# Example 3",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyOtherObject",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyOtherObject:\n    def __init__(self):\n        self.__private_field = 71\n    @classmethod\n    def get_private_field_of_instance(cls, instance):\n        return instance.__private_field\nbar = MyOtherObject()\nassert MyOtherObject.get_private_field_of_instance(bar) == 71\n# Example 6\ntry:",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyStringClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyStringClass:\n    def __init__(self, value):\n        self.__value = value\n    def get_value(self):\n        return str(self.__value)\nfoo = MyStringClass(5)\nassert foo.get_value() == '5'\n# Example 10\nclass MyIntegerSubclass(MyStringClass):\n    def get_value(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyIntegerSubclass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyIntegerSubclass(MyStringClass):\n    def get_value(self):\n        return int(self._MyStringClass__value)\nfoo = MyIntegerSubclass('5')\nassert foo.get_value() == 5\n# Example 11\nclass MyBaseClass:\n    def __init__(self, value):\n        self.__value = value\n    def get_value(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyBaseClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyBaseClass:\n    def __init__(self, value):\n        self.__value = value\n    def get_value(self):\n        return self.__value\nclass MyStringClass(MyBaseClass):\n    def get_value(self):\n        return str(super().get_value())         # Updated\nclass MyIntegerSubclass(MyStringClass):\n    def get_value(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyStringClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyStringClass(MyBaseClass):\n    def get_value(self):\n        return str(super().get_value())         # Updated\nclass MyIntegerSubclass(MyStringClass):\n    def get_value(self):\n        return int(self._MyStringClass__value)  # Not updated\n# Example 12\ntry:\n    foo = MyIntegerSubclass(5)\n    foo.get_value()",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyIntegerSubclass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyIntegerSubclass(MyStringClass):\n    def get_value(self):\n        return int(self._MyStringClass__value)  # Not updated\n# Example 12\ntry:\n    foo = MyIntegerSubclass(5)\n    foo.get_value()\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyStringClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyStringClass:\n    def __init__(self, value):\n        # This stores the user-supplied value for the object.\n        # It should be coercible to a string. Once assigned in\n        # the object it should be treated as immutable.\n        self._value = value\n    def get_value(self):\n        return str(self._value)\nclass MyIntegerSubclass(MyStringClass):\n    def get_value(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "MyIntegerSubclass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class MyIntegerSubclass(MyStringClass):\n    def get_value(self):\n        return self._value\nfoo = MyIntegerSubclass(5)\nassert foo.get_value() == 5\n# Example 14\nclass ApiClass:\n    def __init__(self):\n        self._value = 5\n    def get(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "ApiClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class ApiClass:\n    def __init__(self):\n        self._value = 5\n    def get(self):\n        return self._value\nclass Child(ApiClass):\n    def __init__(self):\n        super().__init__()\n        self._value = 'hello'  # Conflicts\na = Child()",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class Child(ApiClass):\n    def __init__(self):\n        super().__init__()\n        self._value = 'hello'  # Conflicts\na = Child()\nprint(f'{a.get()} and {a._value} should be different')\n# Example 15\nclass ApiClass:\n    def __init__(self):\n        self.__value = 5       # Double underscore",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "ApiClass",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class ApiClass:\n    def __init__(self):\n        self.__value = 5       # Double underscore\n    def get(self):\n        return self.__value    # Double underscore\nclass Child(ApiClass):\n    def __init__(self):\n        super().__init__()\n        self._value = 'hello'  # OK!\na = Child()",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "class Child(ApiClass):\n    def __init__(self):\n        super().__init__()\n        self._value = 'hello'  # OK!\na = Child()\nprint(f'{a.get()} and {a._value} are different')",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass MyObject:\n    def __init__(self):\n        self.public_field = 5",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "foo = MyObject()\nassert foo.public_field == 5\n# Example 3\nassert foo.get_private_field() == 10\n# Example 4\ntry:\n    foo.__private_field\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "bar = MyOtherObject()\nassert MyOtherObject.get_private_field_of_instance(bar) == 71\n# Example 6\ntry:\n    class MyParentObject:\n        def __init__(self):\n            self.__private_field = 71\n    class MyChildObject(MyParentObject):\n        def get_private_field(self):\n            return self.__private_field",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "foo = MyStringClass(5)\nassert foo.get_value() == '5'\n# Example 10\nclass MyIntegerSubclass(MyStringClass):\n    def get_value(self):\n        return int(self._MyStringClass__value)\nfoo = MyIntegerSubclass('5')\nassert foo.get_value() == 5\n# Example 11\nclass MyBaseClass:",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "foo = MyIntegerSubclass('5')\nassert foo.get_value() == 5\n# Example 11\nclass MyBaseClass:\n    def __init__(self, value):\n        self.__value = value\n    def get_value(self):\n        return self.__value\nclass MyStringClass(MyBaseClass):\n    def get_value(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "foo = MyIntegerSubclass(5)\nassert foo.get_value() == 5\n# Example 14\nclass ApiClass:\n    def __init__(self):\n        self._value = 5\n    def get(self):\n        return self._value\nclass Child(ApiClass):\n    def __init__(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "a = Child()\nprint(f'{a.get()} and {a._value} should be different')\n# Example 15\nclass ApiClass:\n    def __init__(self):\n        self.__value = 5       # Double underscore\n    def get(self):\n        return self.__value    # Double underscore\nclass Child(ApiClass):\n    def __init__(self):",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_42",
        "description": "example_code.item_42",
        "peekOfCode": "a = Child()\nprint(f'{a.get()} and {a._value} are different')",
        "detail": "example_code.item_42",
        "documentation": {}
    },
    {
        "label": "FrequencyList",
        "kind": 6,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "class FrequencyList(list):\n    def __init__(self, members):\n        super().__init__(members)\n    def frequency(self):\n        counts = {}\n        for item in self:\n            counts[item] = counts.get(item, 0) + 1\n        return counts\n# Example 2\nfoo = FrequencyList(['a', 'b', 'a', 'c', 'b', 'a', 'd'])",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "BinaryNode",
        "kind": 6,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "class BinaryNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n# Example 4\nbar = [1, 2, 3]\nbar[0]\n# Example 5\nbar.__getitem__(0)",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "IndexableNode",
        "kind": 6,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "class IndexableNode(BinaryNode):\n    def _traverse(self):\n        if self.left is not None:\n            yield from self.left._traverse()\n        yield self\n        if self.right is not None:\n            yield from self.right._traverse()\n    def __getitem__(self, index):\n        for i, item in enumerate(self._traverse()):\n            if i == index:",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "SequenceNode",
        "kind": 6,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "class SequenceNode(IndexableNode):\n    def __len__(self):\n        for count, _ in enumerate(self._traverse(), 1):\n            pass\n        return count\n# Example 11\ntree = SequenceNode(\n    10,\n    left=SequenceNode(\n        5,",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "BetterNode",
        "kind": 6,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "class BetterNode(SequenceNode, Sequence):\n    pass\ntree = BetterNode(\n    10,\n    left=BetterNode(\n        5,\n        left=BetterNode(2),\n        right=BetterNode(\n            6,\n            right=BetterNode(7))),",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass FrequencyList(list):\n    def __init__(self, members):\n        super().__init__(members)",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "foo = FrequencyList(['a', 'b', 'a', 'c', 'b', 'a', 'd'])\nprint('Length is', len(foo))\nfoo.pop()\nprint('After pop:', repr(foo))\nprint('Frequency:', foo.frequency())\n# Example 3\nclass BinaryNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "bar = [1, 2, 3]\nbar[0]\n# Example 5\nbar.__getitem__(0)\n# Example 6\nclass IndexableNode(BinaryNode):\n    def _traverse(self):\n        if self.left is not None:\n            yield from self.left._traverse()\n        yield self",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "tree = IndexableNode(\n    10,\n    left=IndexableNode(\n        5,\n        left=IndexableNode(2),\n        right=IndexableNode(\n            6,\n            right=IndexableNode(7))),\n    right=IndexableNode(\n        15,",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "tree = SequenceNode(\n    10,\n    left=SequenceNode(\n        5,\n        left=SequenceNode(2),\n        right=SequenceNode(\n            6,\n            right=SequenceNode(7))),\n    right=SequenceNode(\n        15,",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "example_code.item_43",
        "description": "example_code.item_43",
        "peekOfCode": "tree = BetterNode(\n    10,\n    left=BetterNode(\n        5,\n        left=BetterNode(2),\n        right=BetterNode(\n            6,\n            right=BetterNode(7))),\n    right=BetterNode(\n        15,",
        "detail": "example_code.item_43",
        "documentation": {}
    },
    {
        "label": "OldResistor",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class OldResistor:\n    def __init__(self, ohms):\n        self._ohms = ohms\n    def get_ohms(self):\n        return self._ohms\n    def set_ohms(self, ohms):\n        self._ohms = ohms\n# Example 2\nr0 = OldResistor(50e3)\nprint('Before:', r0.get_ohms())",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "Resistor",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class Resistor:\n    def __init__(self, ohms):\n        self.ohms = ohms\n        self.voltage = 0\n        self.current = 0\nr1 = Resistor(50e3)\nr1.ohms = 10e3\nprint(f'{r1.ohms} ohms, '\n      f'{r1.voltage} volts, '\n      f'{r1.current} amps')",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "VoltageResistance",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class VoltageResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)\n        self._voltage = 0\n    @property\n    def voltage(self):\n        return self._voltage\n    @voltage.setter\n    def voltage(self, voltage):\n        self._voltage = voltage",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "BoundedResistance",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class BoundedResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)\n    @property\n    def ohms(self):\n        return self._ohms\n    @ohms.setter\n    def ohms(self, ohms):\n        if ohms <= 0:\n            raise ValueError(f'ohms must be > 0; got {ohms}')",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "FixedResistance",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class FixedResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)\n    @property\n    def ohms(self):\n        return self._ohms\n    @ohms.setter\n    def ohms(self, ohms):\n        if hasattr(self, '_ohms'):\n            raise AttributeError(\"Ohms is immutable\")",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "MysteriousResistor",
        "kind": 6,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "class MysteriousResistor(Resistor):\n    @property\n    def ohms(self):\n        self.voltage = self._ohms * self.current\n        return self._ohms\n    @ohms.setter\n    def ohms(self, ohms):\n        self._ohms = ohms\n# Example 14\nr7 = MysteriousResistor(10)",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass OldResistor:\n    def __init__(self, ohms):\n        self._ohms = ohms",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r0",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r0 = OldResistor(50e3)\nprint('Before:', r0.get_ohms())\nr0.set_ohms(10e3)\nprint('After: ', r0.get_ohms())\n# Example 3\nr0.set_ohms(r0.get_ohms() - 4e3)\nassert r0.get_ohms() == 6e3\n# Example 4\nclass Resistor:\n    def __init__(self, ohms):",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r1 = Resistor(50e3)\nr1.ohms = 10e3\nprint(f'{r1.ohms} ohms, '\n      f'{r1.voltage} volts, '\n      f'{r1.current} amps')\n# Example 5\nr1.ohms += 5e3\n# Example 6\nclass VoltageResistance(Resistor):\n    def __init__(self, ohms):",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r1.ohms",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r1.ohms = 10e3\nprint(f'{r1.ohms} ohms, '\n      f'{r1.voltage} volts, '\n      f'{r1.current} amps')\n# Example 5\nr1.ohms += 5e3\n# Example 6\nclass VoltageResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r2 = VoltageResistance(1e3)\nprint(f'Before: {r2.current:.2f} amps')\nr2.voltage = 10\nprint(f'After:  {r2.current:.2f} amps')\n# Example 8\nclass BoundedResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)\n    @property\n    def ohms(self):",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r2.voltage",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r2.voltage = 10\nprint(f'After:  {r2.current:.2f} amps')\n# Example 8\nclass BoundedResistance(Resistor):\n    def __init__(self, ohms):\n        super().__init__(ohms)\n    @property\n    def ohms(self):\n        return self._ohms\n    @ohms.setter",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r7",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r7 = MysteriousResistor(10)\nr7.current = 0.01\nprint(f'Before: {r7.voltage:.2f}')\nr7.ohms\nprint(f'After:  {r7.voltage:.2f}')",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "r7.current",
        "kind": 5,
        "importPath": "example_code.item_44",
        "description": "example_code.item_44",
        "peekOfCode": "r7.current = 0.01\nprint(f'Before: {r7.voltage:.2f}')\nr7.ohms\nprint(f'After:  {r7.voltage:.2f}')",
        "detail": "example_code.item_44",
        "documentation": {}
    },
    {
        "label": "Bucket",
        "kind": 6,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "class Bucket:\n    def __init__(self, period):\n        self.period_delta = timedelta(seconds=period)\n        self.reset_time = datetime.now()\n        self.quota = 0\n    def __repr__(self):\n        return f'Bucket(quota={self.quota})'\nbucket = Bucket(60)\nprint(bucket)\n# Example 2",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "NewBucket",
        "kind": 6,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "class NewBucket:\n    def __init__(self, period):\n        self.period_delta = timedelta(seconds=period)\n        self.reset_time = datetime.now()\n        self.max_quota = 0\n        self.quota_consumed = 0\n    def __repr__(self):\n        return (f'NewBucket(max_quota={self.max_quota}, '\n                f'quota_consumed={self.quota_consumed})')\n# Example 8",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom datetime import datetime, timedelta\nclass Bucket:\n    def __init__(self, period):",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "fill",
        "kind": 2,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "def fill(bucket, amount):\n    now = datetime.now()\n    if (now - bucket.reset_time) > bucket.period_delta:\n        bucket.quota = 0\n        bucket.reset_time = now\n    bucket.quota += amount\n# Example 3\ndef deduct(bucket, amount):\n    now = datetime.now()\n    if (now - bucket.reset_time) > bucket.period_delta:",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "deduct",
        "kind": 2,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "def deduct(bucket, amount):\n    now = datetime.now()\n    if (now - bucket.reset_time) > bucket.period_delta:\n        return False  # Bucket hasn't been filled this period\n    if bucket.quota - amount < 0:\n        return False  # Bucket was filled, but not enough\n    bucket.quota -= amount\n    return True       # Bucket had enough, quota consumed\n# Example 4\nbucket = Bucket(60)",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "bucket = Bucket(60)\nprint(bucket)\n# Example 2\ndef fill(bucket, amount):\n    now = datetime.now()\n    if (now - bucket.reset_time) > bucket.period_delta:\n        bucket.quota = 0\n        bucket.reset_time = now\n    bucket.quota += amount\n# Example 3",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "bucket = Bucket(60)\nfill(bucket, 100)\nprint(bucket)\n# Example 5\nif deduct(bucket, 99):\n    print('Had 99 quota')\nelse:\n    print('Not enough for 99 quota')\nprint(bucket)\n# Example 6",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "bucket = NewBucket(60)\nprint('Initial', bucket)\nfill(bucket, 100)\nprint('Filled', bucket)\nif deduct(bucket, 99):\n    print('Had 99 quota')\nelse:\n    print('Not enough for 99 quota')\nprint('Now', bucket)\nif deduct(bucket, 3):",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "example_code.item_45",
        "description": "example_code.item_45",
        "peekOfCode": "bucket = NewBucket(6000)\nassert bucket.max_quota == 0\nassert bucket.quota_consumed == 0\nassert bucket.quota == 0\nfill(bucket, 100)\nassert bucket.max_quota == 100\nassert bucket.quota_consumed == 0\nassert bucket.quota == 100\nassert deduct(bucket, 10)\nassert bucket.max_quota == 100",
        "detail": "example_code.item_45",
        "documentation": {}
    },
    {
        "label": "Homework",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Homework:\n    def __init__(self):\n        self._grade = 0\n    @property\n    def grade(self):\n        return self._grade\n    @grade.setter\n    def grade(self, value):\n        if not (0 <= value <= 100):\n            raise ValueError(",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Exam:\n    def __init__(self):\n        self._writing_grade = 0\n        self._math_grade = 0\n    @staticmethod\n    def _check_grade(value):\n        if not (0 <= value <= 100):\n            raise ValueError(\n                'Grade must be between 0 and 100')\n# Example 4",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Grade:\n    def __get__(self, instance, instance_type):\n        pass\n    def __set__(self, instance, value):\n        pass\nclass Exam:\n    # Class attributes\n    math_grade = Grade()\n    writing_grade = Grade()\n    science_grade = Grade()",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Exam:\n    # Class attributes\n    math_grade = Grade()\n    writing_grade = Grade()\n    science_grade = Grade()\n# Example 6\nexam = Exam()\nexam.writing_grade = 40\n# Example 7\nExam.__dict__['writing_grade'].__set__(exam, 40)",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Grade:\n    def __init__(self):\n        self._value = 0\n    def __get__(self, instance, instance_type):\n        return self._value\n    def __set__(self, instance, value):\n        if not (0 <= value <= 100):\n            raise ValueError(\n                'Grade must be between 0 and 100')\n        self._value = value",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Exam:\n    math_grade = Grade()\n    writing_grade = Grade()\n    science_grade = Grade()\nfirst_exam = Exam()\nfirst_exam.writing_grade = 82\nfirst_exam.science_grade = 99\nprint('Writing', first_exam.writing_grade)\nprint('Science', first_exam.science_grade)\n# Example 12",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Grade:\n    def __init__(self):\n        self._values = {}\n    def __get__(self, instance, instance_type):\n        if instance is None:\n            return self\n        return self._values.get(instance, 0)\n    def __set__(self, instance, value):\n        if not (0 <= value <= 100):\n            raise ValueError(",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Grade",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Grade:\n    def __init__(self):\n        self._values = WeakKeyDictionary()\n    def __get__(self, instance, instance_type):\n        if instance is None:\n            return self\n        return self._values.get(instance, 0)\n    def __set__(self, instance, value):\n        if not (0 <= value <= 100):\n            raise ValueError(",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "class Exam:\n    math_grade = Grade()\n    writing_grade = Grade()\n    science_grade = Grade()\nfirst_exam = Exam()\nfirst_exam.writing_grade = 82\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'First  {first_exam.writing_grade} is right')\nprint(f'Second {second_exam.writing_grade} is right')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Homework:\n    def __init__(self):\n        self._grade = 0",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "galileo",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "galileo = Homework()\ngalileo.grade = 95\nassert galileo.grade == 95\n# Example 3\nclass Exam:\n    def __init__(self):\n        self._writing_grade = 0\n        self._math_grade = 0\n    @staticmethod\n    def _check_grade(value):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "galileo.grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "galileo.grade = 95\nassert galileo.grade == 95\n# Example 3\nclass Exam:\n    def __init__(self):\n        self._writing_grade = 0\n        self._math_grade = 0\n    @staticmethod\n    def _check_grade(value):\n        if not (0 <= value <= 100):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "galileo",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "galileo = Exam()\ngalileo.writing_grade = 85\ngalileo.math_grade = 99\nassert galileo.writing_grade == 85\nassert galileo.math_grade == 99\n# Example 5\nclass Grade:\n    def __get__(self, instance, instance_type):\n        pass\n    def __set__(self, instance, value):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "galileo.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "galileo.writing_grade = 85\ngalileo.math_grade = 99\nassert galileo.writing_grade == 85\nassert galileo.math_grade == 99\n# Example 5\nclass Grade:\n    def __get__(self, instance, instance_type):\n        pass\n    def __set__(self, instance, value):\n        pass",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "galileo.math_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "galileo.math_grade = 99\nassert galileo.writing_grade == 85\nassert galileo.math_grade == 99\n# Example 5\nclass Grade:\n    def __get__(self, instance, instance_type):\n        pass\n    def __set__(self, instance, value):\n        pass\nclass Exam:",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "exam",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "exam = Exam()\nexam.writing_grade = 40\n# Example 7\nExam.__dict__['writing_grade'].__set__(exam, 40)\n# Example 8\nexam.writing_grade\n# Example 9\nExam.__dict__['writing_grade'].__get__(exam, Exam)\n# Example 10\nclass Grade:",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "exam.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "exam.writing_grade = 40\n# Example 7\nExam.__dict__['writing_grade'].__set__(exam, 40)\n# Example 8\nexam.writing_grade\n# Example 9\nExam.__dict__['writing_grade'].__get__(exam, Exam)\n# Example 10\nclass Grade:\n    def __init__(self):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "first_exam",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "first_exam = Exam()\nfirst_exam.writing_grade = 82\nfirst_exam.science_grade = 99\nprint('Writing', first_exam.writing_grade)\nprint('Science', first_exam.science_grade)\n# Example 12\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'Second {second_exam.writing_grade} is right')\nprint(f'First  {first_exam.writing_grade} is wrong; '",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "first_exam.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "first_exam.writing_grade = 82\nfirst_exam.science_grade = 99\nprint('Writing', first_exam.writing_grade)\nprint('Science', first_exam.science_grade)\n# Example 12\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'Second {second_exam.writing_grade} is right')\nprint(f'First  {first_exam.writing_grade} is wrong; '\n      f'should be 82')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "first_exam.science_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "first_exam.science_grade = 99\nprint('Writing', first_exam.writing_grade)\nprint('Science', first_exam.science_grade)\n# Example 12\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'Second {second_exam.writing_grade} is right')\nprint(f'First  {first_exam.writing_grade} is wrong; '\n      f'should be 82')\n# Example 13",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "second_exam",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "second_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'Second {second_exam.writing_grade} is right')\nprint(f'First  {first_exam.writing_grade} is wrong; '\n      f'should be 82')\n# Example 13\nclass Grade:\n    def __init__(self):\n        self._values = {}\n    def __get__(self, instance, instance_type):",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "second_exam.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "second_exam.writing_grade = 75\nprint(f'Second {second_exam.writing_grade} is right')\nprint(f'First  {first_exam.writing_grade} is wrong; '\n      f'should be 82')\n# Example 13\nclass Grade:\n    def __init__(self):\n        self._values = {}\n    def __get__(self, instance, instance_type):\n        if instance is None:",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "first_exam",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "first_exam = Exam()\nfirst_exam.writing_grade = 82\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'First  {first_exam.writing_grade} is right')\nprint(f'Second {second_exam.writing_grade} is right')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "first_exam.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "first_exam.writing_grade = 82\nsecond_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'First  {first_exam.writing_grade} is right')\nprint(f'Second {second_exam.writing_grade} is right')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "second_exam",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "second_exam = Exam()\nsecond_exam.writing_grade = 75\nprint(f'First  {first_exam.writing_grade} is right')\nprint(f'Second {second_exam.writing_grade} is right')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "second_exam.writing_grade",
        "kind": 5,
        "importPath": "example_code.item_46",
        "description": "example_code.item_46",
        "peekOfCode": "second_exam.writing_grade = 75\nprint(f'First  {first_exam.writing_grade} is right')\nprint(f'Second {second_exam.writing_grade} is right')",
        "detail": "example_code.item_46",
        "documentation": {}
    },
    {
        "label": "LazyRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class LazyRecord:\n    def __init__(self):\n        self.exists = 5\n    def __getattr__(self, name):\n        value = f'Value for {name}'\n        setattr(self, name, value)\n        return value\n# Example 2\ndata = LazyRecord()\nprint('Before:', data.__dict__)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "LoggingLazyRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class LoggingLazyRecord(LazyRecord):\n    def __getattr__(self, name):\n        print(f'* Called __getattr__({name!r}), '\n              f'populating instance dictionary')\n        result = super().__getattr__(name)\n        print(f'* Returning {result!r}')\n        return result\ndata = LoggingLazyRecord()\nprint('exists:     ', data.exists)\nprint('First foo:  ', data.foo)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "ValidatingRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class ValidatingRecord:\n    def __init__(self):\n        self.exists = 5\n    def __getattribute__(self, name):\n        print(f'* Called __getattribute__({name!r})')\n        try:\n            value = super().__getattribute__(name)\n            print(f'* Found {name!r}, returning {value!r}')\n            return value\n        except AttributeError:",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "SavingRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class SavingRecord:\n    def __setattr__(self, name, value):\n        # Save some data for the record\n        pass\n        super().__setattr__(name, value)\n# Example 9\nclass LoggingSavingRecord(SavingRecord):\n    def __setattr__(self, name, value):\n        print(f'* Called __setattr__({name!r}, {value!r})')\n        super().__setattr__(name, value)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "LoggingSavingRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class LoggingSavingRecord(SavingRecord):\n    def __setattr__(self, name, value):\n        print(f'* Called __setattr__({name!r}, {value!r})')\n        super().__setattr__(name, value)\ndata = LoggingSavingRecord()\nprint('Before: ', data.__dict__)\ndata.foo = 5\nprint('After:  ', data.__dict__)\ndata.foo = 7\nprint('Finally:', data.__dict__)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "BrokenDictionaryRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class BrokenDictionaryRecord:\n    def __init__(self, data):\n        self._data = {}\n    def __getattribute__(self, name):\n        print(f'* Called __getattribute__({name!r})')\n        return self._data[name]\n# Example 11\ntry:\n    data = BrokenDictionaryRecord({'foo': 3})\n    data.foo",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "DictionaryRecord",
        "kind": 6,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "class DictionaryRecord:\n    def __init__(self, data):\n        self._data = data\n    def __getattribute__(self, name):\n        # Prevent weird interactions with isinstance() used\n        # by example code harness.\n        if name == '__class__':\n            return DictionaryRecord\n        print(f'* Called __getattribute__({name!r})')\n        data_dict = super().__getattribute__('_data')",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass LazyRecord:\n    def __init__(self):\n        self.exists = 5",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = LazyRecord()\nprint('Before:', data.__dict__)\nprint('foo:   ', data.foo)\nprint('After: ', data.__dict__)\n# Example 3\nclass LoggingLazyRecord(LazyRecord):\n    def __getattr__(self, name):\n        print(f'* Called __getattr__({name!r}), '\n              f'populating instance dictionary')\n        result = super().__getattr__(name)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = LoggingLazyRecord()\nprint('exists:     ', data.exists)\nprint('First foo:  ', data.foo)\nprint('Second foo: ', data.foo)\n# Example 4\nclass ValidatingRecord:\n    def __init__(self):\n        self.exists = 5\n    def __getattribute__(self, name):\n        print(f'* Called __getattribute__({name!r})')",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = ValidatingRecord()\nprint('exists:     ', data.exists)\nprint('First foo:  ', data.foo)\nprint('Second foo: ', data.foo)\n# Example 5\ntry:\n    class MissingPropertyRecord:\n        def __getattr__(self, name):\n            if name == 'bad_name':\n                raise AttributeError(f'{name} is missing')",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = LoggingLazyRecord()  # Implements __getattr__\nprint('Before:         ', data.__dict__)\nprint('Has first foo:  ', hasattr(data, 'foo'))\nprint('After:          ', data.__dict__)\nprint('Has second foo: ', hasattr(data, 'foo'))\n# Example 7\ndata = ValidatingRecord()  # Implements __getattribute__\nprint('Has first foo:  ', hasattr(data, 'foo'))\nprint('Has second foo: ', hasattr(data, 'foo'))\n# Example 8",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = ValidatingRecord()  # Implements __getattribute__\nprint('Has first foo:  ', hasattr(data, 'foo'))\nprint('Has second foo: ', hasattr(data, 'foo'))\n# Example 8\nclass SavingRecord:\n    def __setattr__(self, name, value):\n        # Save some data for the record\n        pass\n        super().__setattr__(name, value)\n# Example 9",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = LoggingSavingRecord()\nprint('Before: ', data.__dict__)\ndata.foo = 5\nprint('After:  ', data.__dict__)\ndata.foo = 7\nprint('Finally:', data.__dict__)\n# Example 10\nclass BrokenDictionaryRecord:\n    def __init__(self, data):\n        self._data = {}",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data.foo",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data.foo = 5\nprint('After:  ', data.__dict__)\ndata.foo = 7\nprint('Finally:', data.__dict__)\n# Example 10\nclass BrokenDictionaryRecord:\n    def __init__(self, data):\n        self._data = {}\n    def __getattribute__(self, name):\n        print(f'* Called __getattribute__({name!r})')",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data.foo",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data.foo = 7\nprint('Finally:', data.__dict__)\n# Example 10\nclass BrokenDictionaryRecord:\n    def __init__(self, data):\n        self._data = {}\n    def __getattribute__(self, name):\n        print(f'* Called __getattribute__({name!r})')\n        return self._data[name]\n# Example 11",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_47",
        "description": "example_code.item_47",
        "peekOfCode": "data = DictionaryRecord({'foo': 3})\nprint('foo: ', data.foo)",
        "detail": "example_code.item_47",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Meta(type):\n    def __new__(meta, name, bases, class_dict):\n        global print\n        orig_print = print\n        print(f'* Running {meta}.__new__ for {name}')\n        print('Bases:', bases)\n        print = pprint\n        print(class_dict)\n        print = orig_print\n        return type.__new__(meta, name, bases, class_dict)",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class MyClass(metaclass=Meta):\n    stuff = 123\n    def foo(self):\n        pass\nclass MySubclass(MyClass):\n    other = 567\n    def bar(self):\n        pass\n# Example 2\nclass ValidatePolygon(type):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "MySubclass",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class MySubclass(MyClass):\n    other = 567\n    def bar(self):\n        pass\n# Example 2\nclass ValidatePolygon(type):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate subclasses of the Polygon class\n        if bases:\n            if class_dict['sides'] < 3:",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "ValidatePolygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class ValidatePolygon(type):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate subclasses of the Polygon class\n        if bases:\n            if class_dict['sides'] < 3:\n                raise ValueError('Polygons need 3+ sides')\n        return type.__new__(meta, name, bases, class_dict)\nclass Polygon(metaclass=ValidatePolygon):\n    sides = None  # Must be specified by subclasses\n    @classmethod",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Polygon(metaclass=ValidatePolygon):\n    sides = None  # Must be specified by subclasses\n    @classmethod\n    def interior_angles(cls):\n        return (cls.sides - 2) * 180\nclass Triangle(Polygon):\n    sides = 3\nclass Rectangle(Polygon):\n    sides = 4\nclass Nonagon(Polygon):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Triangle",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Triangle(Polygon):\n    sides = 3\nclass Rectangle(Polygon):\n    sides = 4\nclass Nonagon(Polygon):\n    sides = 9\nassert Triangle.interior_angles() == 180\nassert Rectangle.interior_angles() == 360\nassert Nonagon.interior_angles() == 1260\n# Example 3",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Rectangle(Polygon):\n    sides = 4\nclass Nonagon(Polygon):\n    sides = 9\nassert Triangle.interior_angles() == 180\nassert Rectangle.interior_angles() == 360\nassert Nonagon.interior_angles() == 1260\n# Example 3\ntry:\n    print('Before class')",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Nonagon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Nonagon(Polygon):\n    sides = 9\nassert Triangle.interior_angles() == 180\nassert Rectangle.interior_angles() == 360\nassert Nonagon.interior_angles() == 1260\n# Example 3\ntry:\n    print('Before class')\n    class Line(Polygon):\n        print('Before sides')",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "BetterPolygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class BetterPolygon:\n    sides = None  # Must be specified by subclasses\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        if cls.sides < 3:\n            raise ValueError('Polygons need 3+ sides')\n    @classmethod\n    def interior_angles(cls):\n        return (cls.sides - 2) * 180\nclass Hexagon(BetterPolygon):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Hexagon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Hexagon(BetterPolygon):\n    sides = 6\nassert Hexagon.interior_angles() == 720\n# Example 5\ntry:\n    print('Before class')\n    class Point(BetterPolygon):\n        sides = 1\n    print('After class')\nexcept:",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "ValidateFilled",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class ValidateFilled(type):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate subclasses of the Filled class\n        if bases:\n            if class_dict['color'] not in ('red', 'green'):\n                raise ValueError('Fill color must be supported')\n        return type.__new__(meta, name, bases, class_dict)\nclass Filled(metaclass=ValidateFilled):\n    color = None  # Must be specified by subclasses\n# Example 7",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Filled",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Filled(metaclass=ValidateFilled):\n    color = None  # Must be specified by subclasses\n# Example 7\ntry:\n    class RedPentagon(Filled, Polygon):\n        color = 'blue'\n        sides = 5\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "ValidatePolygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class ValidatePolygon(type):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate non-root classes\n        if not class_dict.get('is_root'):\n            if class_dict['sides'] < 3:\n                raise ValueError('Polygons need 3+ sides')\n        return type.__new__(meta, name, bases, class_dict)\nclass Polygon(metaclass=ValidatePolygon):\n    is_root = True\n    sides = None  # Must be specified by subclasses",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Polygon(metaclass=ValidatePolygon):\n    is_root = True\n    sides = None  # Must be specified by subclasses\nclass ValidateFilledPolygon(ValidatePolygon):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate non-root classes\n        if not class_dict.get('is_root'):\n            if class_dict['color'] not in ('red', 'green'):\n                raise ValueError('Fill color must be supported')\n        return super().__new__(meta, name, bases, class_dict)",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "ValidateFilledPolygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class ValidateFilledPolygon(ValidatePolygon):\n    def __new__(meta, name, bases, class_dict):\n        # Only validate non-root classes\n        if not class_dict.get('is_root'):\n            if class_dict['color'] not in ('red', 'green'):\n                raise ValueError('Fill color must be supported')\n        return super().__new__(meta, name, bases, class_dict)\nclass FilledPolygon(Polygon, metaclass=ValidateFilledPolygon):\n    is_root = True\n    color = None  # Must be specified by subclasses",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "FilledPolygon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class FilledPolygon(Polygon, metaclass=ValidateFilledPolygon):\n    is_root = True\n    color = None  # Must be specified by subclasses\n# Example 9\nclass GreenPentagon(FilledPolygon):\n    color = 'green'\n    sides = 5\ngreenie = GreenPentagon()\nassert isinstance(greenie, Polygon)\n# Example 10",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "GreenPentagon",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class GreenPentagon(FilledPolygon):\n    color = 'green'\n    sides = 5\ngreenie = GreenPentagon()\nassert isinstance(greenie, Polygon)\n# Example 10\ntry:\n    class OrangePentagon(FilledPolygon):\n        color = 'orange'\n        sides = 5",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Filled",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Filled:\n    color = None  # Must be specified by subclasses\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        if cls.color not in ('red', 'green', 'blue'):\n            raise ValueError('Fills need a valid color')\n# Example 13\nclass RedTriangle(Filled, BetterPolygon):\n    color = 'red'\n    sides = 3",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "RedTriangle",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class RedTriangle(Filled, BetterPolygon):\n    color = 'red'\n    sides = 3\nruddy = RedTriangle()\nassert isinstance(ruddy, Filled)\nassert isinstance(ruddy, BetterPolygon)\n# Example 14\ntry:\n    print('Before class')\n    class BlueLine(Filled, BetterPolygon):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Top",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Top:\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Top for {cls}')\nclass Left(Top):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Left for {cls}')\nclass Right(Top):\n    def __init_subclass__(cls):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Left",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Left(Top):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Left for {cls}')\nclass Right(Top):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Right for {cls}')\nclass Bottom(Left, Right):\n    def __init_subclass__(cls):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Right",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Right(Top):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Right for {cls}')\nclass Bottom(Left, Right):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Bottom for {cls}')",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Bottom",
        "kind": 6,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "class Bottom(Left, Right):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        print(f'Bottom for {cls}')",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Meta(type):\n    def __new__(meta, name, bases, class_dict):\n        global print",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "greenie",
        "kind": 5,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "greenie = GreenPentagon()\nassert isinstance(greenie, Polygon)\n# Example 10\ntry:\n    class OrangePentagon(FilledPolygon):\n        color = 'orange'\n        sides = 5\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "ruddy",
        "kind": 5,
        "importPath": "example_code.item_48",
        "description": "example_code.item_48",
        "peekOfCode": "ruddy = RedTriangle()\nassert isinstance(ruddy, Filled)\nassert isinstance(ruddy, BetterPolygon)\n# Example 14\ntry:\n    print('Before class')\n    class BlueLine(Filled, BetterPolygon):\n        color = 'blue'\n        sides = 2\n    print('After class')",
        "detail": "example_code.item_48",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Serializable:\n    def __init__(self, *args):\n        self.args = args\n    def serialize(self):\n        return json.dumps({'args': self.args})\n# Example 2\nclass Point2D(Serializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Point2D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Point2D(Serializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f'Point2D({self.x}, {self.y})'\npoint = Point2D(5, 3)\nprint('Object:    ', point)\nprint('Serialized:', point.serialize())",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Deserializable",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Deserializable(Serializable):\n    @classmethod\n    def deserialize(cls, json_data):\n        params = json.loads(json_data)\n        return cls(*params['args'])\n# Example 4\nclass BetterPoint2D(Deserializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "BetterPoint2D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class BetterPoint2D(Deserializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f'Point2D({self.x}, {self.y})'\nbefore = BetterPoint2D(5, 3)\nprint('Before:    ', before)\ndata = before.serialize()",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "BetterSerializable",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class BetterSerializable:\n    def __init__(self, *args):\n        self.args = args\n    def serialize(self):\n        return json.dumps({\n            'class': self.__class__.__name__,\n            'args': self.args,\n        })\n    def __repr__(self):\n        name = self.__class__.__name__",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "EvenBetterPoint2D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class EvenBetterPoint2D(BetterSerializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x\n        self.y = y\nregister_class(EvenBetterPoint2D)\n# Example 8\nbefore = EvenBetterPoint2D(5, 3)\nprint('Before:    ', before)\ndata = before.serialize()",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Point3D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Point3D(BetterSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)\n        self.x = x\n        self.y = y\n        self.z = z\n# Forgot to call register_class! Whoops!\n# Example 10\ntry:\n    point = Point3D(5, 9, -4)",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Meta(type):\n    def __new__(meta, name, bases, class_dict):\n        cls = type.__new__(meta, name, bases, class_dict)\n        register_class(cls)\n        return cls\nclass RegisteredSerializable(BetterSerializable,\n                             metaclass=Meta):\n    pass\n# Example 12\nclass Vector3D(RegisteredSerializable):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "RegisteredSerializable",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class RegisteredSerializable(BetterSerializable,\n                             metaclass=Meta):\n    pass\n# Example 12\nclass Vector3D(RegisteredSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)\n        self.x, self.y, self.z = x, y, z\nbefore = Vector3D(10, -7, 3)\nprint('Before:    ', before)",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Vector3D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Vector3D(RegisteredSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)\n        self.x, self.y, self.z = x, y, z\nbefore = Vector3D(10, -7, 3)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))\n# Example 13",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "BetterRegisteredSerializable",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class BetterRegisteredSerializable(BetterSerializable):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        register_class(cls)\nclass Vector1D(BetterRegisteredSerializable):\n    def __init__(self, magnitude):\n        super().__init__(magnitude)\n        self.magnitude = magnitude\nbefore = Vector1D(6)\nprint('Before:    ', before)",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Vector1D",
        "kind": 6,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "class Vector1D(BetterRegisteredSerializable):\n    def __init__(self, magnitude):\n        super().__init__(magnitude)\n        self.magnitude = magnitude\nbefore = Vector1D(6)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport json\nclass Serializable:\n    def __init__(self, *args):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "register_class",
        "kind": 2,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "def register_class(target_class):\n    registry[target_class.__name__] = target_class\ndef deserialize(data):\n    params = json.loads(data)\n    name = params['class']\n    target_class = registry[name]\n    return target_class(*params['args'])\n# Example 7\nclass EvenBetterPoint2D(BetterSerializable):\n    def __init__(self, x, y):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "deserialize",
        "kind": 2,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "def deserialize(data):\n    params = json.loads(data)\n    name = params['class']\n    target_class = registry[name]\n    return target_class(*params['args'])\n# Example 7\nclass EvenBetterPoint2D(BetterSerializable):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n        self.x = x",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "point",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "point = Point2D(5, 3)\nprint('Object:    ', point)\nprint('Serialized:', point.serialize())\n# Example 3\nclass Deserializable(Serializable):\n    @classmethod\n    def deserialize(cls, json_data):\n        params = json.loads(json_data)\n        return cls(*params['args'])\n# Example 4",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "before = BetterPoint2D(5, 3)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nafter = BetterPoint2D.deserialize(data)\nprint('After:     ', after)\n# Example 5\nclass BetterSerializable:\n    def __init__(self, *args):\n        self.args = args",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "data = before.serialize()\nprint('Serialized:', data)\nafter = BetterPoint2D.deserialize(data)\nprint('After:     ', after)\n# Example 5\nclass BetterSerializable:\n    def __init__(self, *args):\n        self.args = args\n    def serialize(self):\n        return json.dumps({",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "after",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "after = BetterPoint2D.deserialize(data)\nprint('After:     ', after)\n# Example 5\nclass BetterSerializable:\n    def __init__(self, *args):\n        self.args = args\n    def serialize(self):\n        return json.dumps({\n            'class': self.__class__.__name__,\n            'args': self.args,",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "registry",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "registry = {}\ndef register_class(target_class):\n    registry[target_class.__name__] = target_class\ndef deserialize(data):\n    params = json.loads(data)\n    name = params['class']\n    target_class = registry[name]\n    return target_class(*params['args'])\n# Example 7\nclass EvenBetterPoint2D(BetterSerializable):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "before = EvenBetterPoint2D(5, 3)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nafter = deserialize(data)\nprint('After:     ', after)\n# Example 9\nclass Point3D(BetterSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "data = before.serialize()\nprint('Serialized:', data)\nafter = deserialize(data)\nprint('After:     ', after)\n# Example 9\nclass Point3D(BetterSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)\n        self.x = x\n        self.y = y",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "after",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "after = deserialize(data)\nprint('After:     ', after)\n# Example 9\nclass Point3D(BetterSerializable):\n    def __init__(self, x, y, z):\n        super().__init__(x, y, z)\n        self.x = x\n        self.y = y\n        self.z = z\n# Forgot to call register_class! Whoops!",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "before = Vector3D(10, -7, 3)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))\n# Example 13\nclass BetterRegisteredSerializable(BetterSerializable):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        register_class(cls)",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "data = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))\n# Example 13\nclass BetterRegisteredSerializable(BetterSerializable):\n    def __init_subclass__(cls):\n        super().__init_subclass__()\n        register_class(cls)\nclass Vector1D(BetterRegisteredSerializable):\n    def __init__(self, magnitude):",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "before = Vector1D(6)\nprint('Before:    ', before)\ndata = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_49",
        "description": "example_code.item_49",
        "peekOfCode": "data = before.serialize()\nprint('Serialized:', data)\nprint('After:     ', deserialize(data))",
        "detail": "example_code.item_49",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Field:\n    def __init__(self, name):\n        self.name = name\n        self.internal_name = '_' + self.name\n    def __get__(self, instance, instance_type):\n        if instance is None:\n            return self\n        return getattr(instance, self.internal_name, '')\n    def __set__(self, instance, value):\n        setattr(instance, self.internal_name, value)",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Customer:\n    # Class attributes\n    first_name = Field('first_name')\n    last_name = Field('last_name')\n    prefix = Field('prefix')\n    suffix = Field('suffix')\n# Example 3\ncust = Customer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Euclid'",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Customer:\n    # Left side is redundant with right side\n    first_name = Field('first_name')\n    last_name = Field('last_name')\n    prefix = Field('prefix')\n    suffix = Field('suffix')\n# Example 5\nclass Meta(type):\n    def __new__(meta, name, bases, class_dict):\n        for key, value in class_dict.items():",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Meta(type):\n    def __new__(meta, name, bases, class_dict):\n        for key, value in class_dict.items():\n            if isinstance(value, Field):\n                value.name = key\n                value.internal_name = '_' + key\n        cls = type.__new__(meta, name, bases, class_dict)\n        return cls\n# Example 6\nclass DatabaseRow(metaclass=Meta):",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "DatabaseRow",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class DatabaseRow(metaclass=Meta):\n    pass\n# Example 7\nclass Field:\n    def __init__(self):\n        # These will be assigned by the metaclass.\n        self.name = None\n        self.internal_name = None\n    def __get__(self, instance, instance_type):\n        if instance is None:",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Field:\n    def __init__(self):\n        # These will be assigned by the metaclass.\n        self.name = None\n        self.internal_name = None\n    def __get__(self, instance, instance_type):\n        if instance is None:\n            return self\n        return getattr(instance, self.internal_name, '')\n    def __set__(self, instance, value):",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "BetterCustomer",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class BetterCustomer(DatabaseRow):\n    first_name = Field()\n    last_name = Field()\n    prefix = Field()\n    suffix = Field()\n# Example 9\ncust = BetterCustomer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Euler'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class Field:\n    def __init__(self):\n        self.name = None\n        self.internal_name = None\n    def __set_name__(self, owner, name):\n        # Called on class creation for each descriptor\n        self.name = name\n        self.internal_name = '_' + name\n    def __get__(self, instance, instance_type):\n        if instance is None:",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "FixedCustomer",
        "kind": 6,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "class FixedCustomer:\n    first_name = Field()\n    last_name = Field()\n    prefix = Field()\n    suffix = Field()\ncust = FixedCustomer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Mersenne'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Field:\n    def __init__(self, name):\n        self.name = name",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust = Customer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Euclid'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')\n# Example 4\nclass Customer:\n    # Left side is redundant with right side\n    first_name = Field('first_name')\n    last_name = Field('last_name')\n    prefix = Field('prefix')",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust.first_name",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust.first_name = 'Euclid'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')\n# Example 4\nclass Customer:\n    # Left side is redundant with right side\n    first_name = Field('first_name')\n    last_name = Field('last_name')\n    prefix = Field('prefix')\n    suffix = Field('suffix')\n# Example 5",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust = BetterCustomer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Euler'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')\n# Example 10\ntry:\n    class BrokenCustomer:\n        first_name = Field()\n        last_name = Field()\n        prefix = Field()",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust.first_name",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust.first_name = 'Euler'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')\n# Example 10\ntry:\n    class BrokenCustomer:\n        first_name = Field()\n        last_name = Field()\n        prefix = Field()\n        suffix = Field()\n    cust = BrokenCustomer()",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust = FixedCustomer()\nprint(f'Before: {cust.first_name!r} {cust.__dict__}')\ncust.first_name = 'Mersenne'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "cust.first_name",
        "kind": 5,
        "importPath": "example_code.item_50",
        "description": "example_code.item_50",
        "peekOfCode": "cust.first_name = 'Mersenne'\nprint(f'After:  {cust.first_name!r} {cust.__dict__}')",
        "detail": "example_code.item_50",
        "documentation": {}
    },
    {
        "label": "TraceDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceDict(dict):\n    @trace_func\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    @trace_func\n    def __setitem__(self, *args, **kwargs):\n        return super().__setitem__(*args, **kwargs)\n    @trace_func\n    def __getitem__(self, *args, **kwargs):\n        return super().__getitem__(*args, **kwargs)",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceMeta",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceMeta(type):\n    def __new__(meta, name, bases, class_dict):\n        klass = super().__new__(meta, name, bases, class_dict)\n        for key in dir(klass):\n            value = getattr(klass, key)\n            if isinstance(value, trace_types):\n                wrapped = trace_func(value)\n                setattr(klass, key, wrapped)\n        return klass\n# Example 5",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceDict(dict, metaclass=TraceMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceMeta",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceMeta(type):\n    def __new__(meta, name, bases, class_dict):\n        klass = type.__new__(meta, name, bases, class_dict)\n        for key in dir(klass):\n            value = getattr(klass, key)\n            if isinstance(value, trace_types):\n                wrapped = trace_func(value)\n                setattr(klass, key, wrapped)\n        return klass\nclass OtherMeta(TraceMeta):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "OtherMeta",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class OtherMeta(TraceMeta):\n    pass\nclass SimpleDict(dict, metaclass=OtherMeta):\n    pass\nclass TraceDict(SimpleDict, metaclass=TraceMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "SimpleDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class SimpleDict(dict, metaclass=OtherMeta):\n    pass\nclass TraceDict(SimpleDict, metaclass=TraceMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceDict(SimpleDict, metaclass=TraceMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class MyClass:\n    pass\nprint(MyClass)\nprint(MyClass.extra_param)\n# Example 9\ndef trace(klass):\n    for key in dir(klass):\n        value = getattr(klass, key)\n        if isinstance(value, trace_types):\n            wrapped = trace_func(value)",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceDict(dict):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "OtherMeta",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class OtherMeta(type):\n    pass\n@trace\nclass TraceDict(dict, metaclass=OtherMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TraceDict",
        "kind": 6,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "class TraceDict(dict, metaclass=OtherMeta):\n    pass\ntrace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom functools import wraps\ndef trace_func(func):\n    if hasattr(func, 'tracing'):  # Only decorate once",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_func",
        "kind": 2,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "def trace_func(func):\n    if hasattr(func, 'tracing'):  # Only decorate once\n        return func\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        result = None\n        try:\n            result = func(*args, **kwargs)\n            return result\n        except Exception as e:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "my_class_decorator",
        "kind": 2,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "def my_class_decorator(klass):\n    klass.extra_param = 'hello'\n    return klass\n@my_class_decorator\nclass MyClass:\n    pass\nprint(MyClass)\nprint(MyClass.extra_param)\n# Example 9\ndef trace(klass):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace",
        "kind": 2,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "def trace(klass):\n    for key in dir(klass):\n        value = getattr(klass, key)\n        if isinstance(value, trace_types):\n            wrapped = trace_func(value)\n            setattr(klass, key, wrapped)\n    return klass\n# Example 10\n@trace\nclass TraceDict(dict):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 4",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict['there']",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 4\nimport types",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_types",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_types = (\n    types.MethodType,\n    types.FunctionType,\n    types.BuiltinFunctionType,\n    types.BuiltinMethodType,\n    types.MethodDescriptorType,\n    types.ClassMethodDescriptorType)\nclass TraceMeta(type):\n    def __new__(meta, name, bases, class_dict):\n        klass = super().__new__(meta, name, bases, class_dict)",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 6",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict['there']",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 6\ntry:",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 8",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict['there']",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 8\ndef my_class_decorator(klass):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 11",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict['there']",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False\n# Example 11\nclass OtherMeta(type):",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict = TraceDict([('hi', 1)])\ntrace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "trace_dict['there']",
        "kind": 5,
        "importPath": "example_code.item_51",
        "description": "example_code.item_51",
        "peekOfCode": "trace_dict['there'] = 2\ntrace_dict['hi']\ntry:\n    trace_dict['does not exist']\nexcept KeyError:\n    pass  # Expected\nelse:\n    assert False",
        "detail": "example_code.item_51",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport subprocess\n# Enable these lines to make this example work on Windows\n# import os",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "run_encrypt",
        "kind": 2,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "def run_encrypt(data):\n    env = os.environ.copy()\n    env['password'] = 'zf7ShyBhZOraQDdE/FiZpm/m/8f9X+M1'\n    proc = subprocess.Popen(\n        ['openssl', 'enc', '-des3', '-pass', 'env:password'],\n        env=env,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE)\n    proc.stdin.write(data)\n    proc.stdin.flush()  # Ensure that the child gets input",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "run_hash",
        "kind": 2,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "def run_hash(input_stdin):\n    return subprocess.Popen(\n        ['openssl', 'dgst', '-whirlpool', '-binary'],\n        stdin=input_stdin,\n        stdout=subprocess.PIPE)\n# Example 9\nencrypt_procs = []\nhash_procs = []\nfor _ in range(3):\n    data = os.urandom(100)",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "result = subprocess.run(\n    ['echo', 'Hello from the child!'],\n    capture_output=True,\n    # Enable this line to make this example work on Windows\n    # shell=True,\n    encoding='utf-8')\nresult.check_returncode()  # No exception means it exited cleanly\nprint(result.stdout)\n# Example 2\n# Use this line instead to make this example work on Windows",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "proc = subprocess.Popen(['sleep', '1'])\nwhile proc.poll() is None:\n    print('Working...')\n    # Some time-consuming work here\n    import time\n    time.sleep(0.3)\nprint('Exit status', proc.poll())\n# Example 3\nimport time\nstart = time.time()",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "start = time.time()\nsleep_procs = []\nfor _ in range(10):\n    # Use this line instead to make this example work on Windows\n    # proc = subprocess.Popen(['sleep', '1'], shell=True)\n    proc = subprocess.Popen(['sleep', '1'])\n    sleep_procs.append(proc)\n# Example 4\nfor proc in sleep_procs:\n    proc.communicate()",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "sleep_procs",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "sleep_procs = []\nfor _ in range(10):\n    # Use this line instead to make this example work on Windows\n    # proc = subprocess.Popen(['sleep', '1'], shell=True)\n    proc = subprocess.Popen(['sleep', '1'])\n    sleep_procs.append(proc)\n# Example 4\nfor proc in sleep_procs:\n    proc.communicate()\nend = time.time()",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "end = time.time()\ndelta = end - start\nprint(f'Finished in {delta:.3} seconds')\n# Example 5\nimport os\n# On Windows, after installing OpenSSL, you may need to\n# alias it in your PowerShell path with a command like:\n# $env:path = $env:path + \";C:\\Program Files\\OpenSSL-Win64\\bin\"\ndef run_encrypt(data):\n    env = os.environ.copy()",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "delta = end - start\nprint(f'Finished in {delta:.3} seconds')\n# Example 5\nimport os\n# On Windows, after installing OpenSSL, you may need to\n# alias it in your PowerShell path with a command like:\n# $env:path = $env:path + \";C:\\Program Files\\OpenSSL-Win64\\bin\"\ndef run_encrypt(data):\n    env = os.environ.copy()\n    env['password'] = 'zf7ShyBhZOraQDdE/FiZpm/m/8f9X+M1'",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "procs",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "procs = []\nfor _ in range(3):\n    data = os.urandom(10)\n    proc = run_encrypt(data)\n    procs.append(proc)\n# Example 7\nfor proc in procs:\n    out, _ = proc.communicate()\n    print(out[-10:])\n# Example 8",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "encrypt_procs",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "encrypt_procs = []\nhash_procs = []\nfor _ in range(3):\n    data = os.urandom(100)\n    encrypt_proc = run_encrypt(data)\n    encrypt_procs.append(encrypt_proc)\n    hash_proc = run_hash(encrypt_proc.stdout)\n    hash_procs.append(hash_proc)\n    # Ensure that the child consumes the input stream and\n    # the communicate() method doesn't inadvertently steal",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "hash_procs",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "hash_procs = []\nfor _ in range(3):\n    data = os.urandom(100)\n    encrypt_proc = run_encrypt(data)\n    encrypt_procs.append(encrypt_proc)\n    hash_proc = run_hash(encrypt_proc.stdout)\n    hash_procs.append(hash_proc)\n    # Ensure that the child consumes the input stream and\n    # the communicate() method doesn't inadvertently steal\n    # input from the child. Also lets SIGPIPE propagate to",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "example_code.item_52",
        "description": "example_code.item_52",
        "peekOfCode": "proc = subprocess.Popen(['sleep', '10'])\ntry:\n    proc.communicate(timeout=0.1)\nexcept subprocess.TimeoutExpired:\n    proc.terminate()\n    proc.wait()\nprint('Exit status', proc.poll())",
        "detail": "example_code.item_52",
        "documentation": {}
    },
    {
        "label": "FactorizeThread",
        "kind": 6,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "class FactorizeThread(Thread):\n    def __init__(self, number):\n        super().__init__()\n        self.number = number\n    def run(self):\n        self.factors = list(factorize(self.number))\n# Example 4\nstart = time.time()\nthreads = []\nfor number in numbers:",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef factorize(number):\n    for i in range(1, number + 1):\n        if number % i == 0:",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "factorize",
        "kind": 2,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "def factorize(number):\n    for i in range(1, number + 1):\n        if number % i == 0:\n            yield i\n# Example 2\nimport time\nnumbers = [2139079, 1214759, 1516637, 1852285]\nstart = time.time()\nfor number in numbers:\n    list(factorize(number))",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "slow_systemcall",
        "kind": 2,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "def slow_systemcall():\n    select.select([socket.socket()], [], [], 0.1)\n# Example 7\nstart = time.time()\nfor _ in range(5):\n    slow_systemcall()\nend = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 8",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "compute_helicopter_location",
        "kind": 2,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "def compute_helicopter_location(index):\n    pass\nfor i in range(5):\n    compute_helicopter_location(i)\nfor thread in threads:\n    thread.join()\nend = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "numbers = [2139079, 1214759, 1516637, 1852285]\nstart = time.time()\nfor number in numbers:\n    list(factorize(number))\nend = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 3\nfrom threading import Thread\nclass FactorizeThread(Thread):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "start = time.time()\nfor number in numbers:\n    list(factorize(number))\nend = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 3\nfrom threading import Thread\nclass FactorizeThread(Thread):\n    def __init__(self, number):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "end = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 3\nfrom threading import Thread\nclass FactorizeThread(Thread):\n    def __init__(self, number):\n        super().__init__()\n        self.number = number\n    def run(self):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "delta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 3\nfrom threading import Thread\nclass FactorizeThread(Thread):\n    def __init__(self, number):\n        super().__init__()\n        self.number = number\n    def run(self):\n        self.factors = list(factorize(self.number))",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "start = time.time()\nthreads = []\nfor number in numbers:\n    thread = FactorizeThread(number)\n    thread.start()\n    threads.append(thread)\n# Example 5\nfor thread in threads:\n    thread.join()\nend = time.time()",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "threads = []\nfor number in numbers:\n    thread = FactorizeThread(number)\n    thread.start()\n    threads.append(thread)\n# Example 5\nfor thread in threads:\n    thread.join()\nend = time.time()\ndelta = end - start",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "end = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 6\nimport select\nimport socket\ndef slow_systemcall():\n    select.select([socket.socket()], [], [], 0.1)\n# Example 7\nstart = time.time()",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "delta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 6\nimport select\nimport socket\ndef slow_systemcall():\n    select.select([socket.socket()], [], [], 0.1)\n# Example 7\nstart = time.time()\nfor _ in range(5):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "start = time.time()\nfor _ in range(5):\n    slow_systemcall()\nend = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 8\nstart = time.time()\nthreads = []\nfor _ in range(5):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "end = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 8\nstart = time.time()\nthreads = []\nfor _ in range(5):\n    thread = Thread(target=slow_systemcall)\n    thread.start()\n    threads.append(thread)",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "delta = end - start\nprint(f'Took {delta:.3f} seconds')\n# Example 8\nstart = time.time()\nthreads = []\nfor _ in range(5):\n    thread = Thread(target=slow_systemcall)\n    thread.start()\n    threads.append(thread)\n# Example 9",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "start = time.time()\nthreads = []\nfor _ in range(5):\n    thread = Thread(target=slow_systemcall)\n    thread.start()\n    threads.append(thread)\n# Example 9\ndef compute_helicopter_location(index):\n    pass\nfor i in range(5):",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "threads = []\nfor _ in range(5):\n    thread = Thread(target=slow_systemcall)\n    thread.start()\n    threads.append(thread)\n# Example 9\ndef compute_helicopter_location(index):\n    pass\nfor i in range(5):\n    compute_helicopter_location(i)",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "end = time.time()\ndelta = end - start\nprint(f'Took {delta:.3f} seconds')",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "example_code.item_53",
        "description": "example_code.item_53",
        "peekOfCode": "delta = end - start\nprint(f'Took {delta:.3f} seconds')",
        "detail": "example_code.item_53",
        "documentation": {}
    },
    {
        "label": "Counter",
        "kind": 6,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "class Counter:\n    def __init__(self):\n        self.count = 0\n    def increment(self, offset):\n        self.count += offset\n# Example 2\ndef worker(sensor_index, how_many, counter):\n    # I have a barrier in here so the workers synchronize\n    # when they start counting, otherwise it's hard to get a race\n    # because the overhead of starting a thread is high.",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "LockingCounter",
        "kind": 6,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "class LockingCounter:\n    def __init__(self):\n        self.lock = Lock()\n        self.count = 0\n    def increment(self, offset):\n        with self.lock:\n            self.count += offset\n# Example 8\nBARRIER = Barrier(5)\ncounter = LockingCounter()",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Counter:\n    def __init__(self):\n        self.count = 0",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "worker",
        "kind": 2,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "def worker(sensor_index, how_many, counter):\n    # I have a barrier in here so the workers synchronize\n    # when they start counting, otherwise it's hard to get a race\n    # because the overhead of starting a thread is high.\n    BARRIER.wait()\n    for _ in range(how_many):\n        # Read from the sensor\n        # Nothing actually happens here, but this is where\n        # the blocking I/O would go.\n        counter.increment(1)",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "BARRIER",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "BARRIER = Barrier(5)\nfrom threading import Thread\nhow_many = 10**5\ncounter = Counter()\nthreads = []\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "how_many",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "how_many = 10**5\ncounter = Counter()\nthreads = []\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "counter = Counter()\nthreads = []\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\nexpected = how_many * 5",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "threads = []\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\nexpected = how_many * 5\nfound = counter.count",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "expected",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "expected = how_many * 5\nfound = counter.count\nprint(f'Counter should be {expected}, got {found}')\n# Example 4\ncounter.count += 1\n# Example 5\nvalue = getattr(counter, 'count')\nresult = value + 1\nsetattr(counter, 'count', result)\n# Example 6",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "found = counter.count\nprint(f'Counter should be {expected}, got {found}')\n# Example 4\ncounter.count += 1\n# Example 5\nvalue = getattr(counter, 'count')\nresult = value + 1\nsetattr(counter, 'count', result)\n# Example 6\n# Running in Thread A",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "value = getattr(counter, 'count')\nresult = value + 1\nsetattr(counter, 'count', result)\n# Example 6\n# Running in Thread A\nvalue_a = getattr(counter, 'count')\n# Context switch to Thread B\nvalue_b = getattr(counter, 'count')\nresult_b = value_b + 1\nsetattr(counter, 'count', result_b)",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "result = value + 1\nsetattr(counter, 'count', result)\n# Example 6\n# Running in Thread A\nvalue_a = getattr(counter, 'count')\n# Context switch to Thread B\nvalue_b = getattr(counter, 'count')\nresult_b = value_b + 1\nsetattr(counter, 'count', result_b)\n# Context switch back to Thread A",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "value_a",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "value_a = getattr(counter, 'count')\n# Context switch to Thread B\nvalue_b = getattr(counter, 'count')\nresult_b = value_b + 1\nsetattr(counter, 'count', result_b)\n# Context switch back to Thread A\nresult_a = value_a + 1\nsetattr(counter, 'count', result_a)\n# Example 7\nfrom threading import Lock",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "value_b",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "value_b = getattr(counter, 'count')\nresult_b = value_b + 1\nsetattr(counter, 'count', result_b)\n# Context switch back to Thread A\nresult_a = value_a + 1\nsetattr(counter, 'count', result_a)\n# Example 7\nfrom threading import Lock\nclass LockingCounter:\n    def __init__(self):",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "result_b",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "result_b = value_b + 1\nsetattr(counter, 'count', result_b)\n# Context switch back to Thread A\nresult_a = value_a + 1\nsetattr(counter, 'count', result_a)\n# Example 7\nfrom threading import Lock\nclass LockingCounter:\n    def __init__(self):\n        self.lock = Lock()",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "result_a",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "result_a = value_a + 1\nsetattr(counter, 'count', result_a)\n# Example 7\nfrom threading import Lock\nclass LockingCounter:\n    def __init__(self):\n        self.lock = Lock()\n        self.count = 0\n    def increment(self, offset):\n        with self.lock:",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "BARRIER",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "BARRIER = Barrier(5)\ncounter = LockingCounter()\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\nexpected = how_many * 5",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "counter = LockingCounter()\nfor i in range(5):\n    thread = Thread(target=worker,\n                    args=(i, how_many, counter))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\nexpected = how_many * 5\nfound = counter.count",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "expected",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "expected = how_many * 5\nfound = counter.count\nprint(f'Counter should be {expected}, got {found}')",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_54",
        "description": "example_code.item_54",
        "peekOfCode": "found = counter.count\nprint(f'Counter should be {expected}, got {found}')",
        "detail": "example_code.item_54",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        self.items = deque()\n        self.lock = Lock()\n# Example 3\n    def put(self, item):\n        with self.lock:\n            self.items.append(item)\n# Example 4\n    def get(self):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "class Worker(Thread):\n    def __init__(self, func, in_queue, out_queue):\n        super().__init__()\n        self.func = func\n        self.in_queue = in_queue\n        self.out_queue = out_queue\n        self.polled_count = 0\n        self.work_done = 0\n# Example 6\n    def run(self):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "ClosableQueue",
        "kind": 6,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "class ClosableQueue(Queue):\n    SENTINEL = object()\n    def close(self):\n        self.put(self.SENTINEL)\n# Example 18\n    def __iter__(self):\n        while True:\n            item = self.get()\n            try:\n                if item is self.SENTINEL:",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "StoppableWorker",
        "kind": 6,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "class StoppableWorker(Thread):\n    def __init__(self, func, in_queue, out_queue):\n        super().__init__()\n        self.func = func\n        self.in_queue = in_queue\n        self.out_queue = out_queue\n    def run(self):\n        for item in self.in_queue:\n            result = self.func(item)\n            self.out_queue.put(result)",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef download(item):\n    return item\ndef resize(item):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def download(item):\n    return item\ndef resize(item):\n    return item\ndef upload(item):\n    return item\n# Example 2\nfrom collections import deque\nfrom threading import Lock\nclass MyQueue:",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def resize(item):\n    return item\ndef upload(item):\n    return item\n# Example 2\nfrom collections import deque\nfrom threading import Lock\nclass MyQueue:\n    def __init__(self):\n        self.items = deque()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def upload(item):\n    return item\n# Example 2\nfrom collections import deque\nfrom threading import Lock\nclass MyQueue:\n    def __init__(self):\n        self.items = deque()\n        self.lock = Lock()\n# Example 3",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def consumer():\n    print('Consumer waiting')\n    my_queue.get()              # Runs after put() below\n    print('Consumer done')\nthread = Thread(target=consumer)\nthread.start()\n# Example 12\nprint('Producer putting')\nmy_queue.put(object())          # Runs before get() above\nprint('Producer done')",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def consumer():\n    time.sleep(0.1)             # Wait\n    my_queue.get()              # Runs second\n    print('Consumer got 1')\n    my_queue.get()              # Runs fourth\n    print('Consumer got 2')\n    print('Consumer done')\nthread = Thread(target=consumer)\nthread.start()\n# Example 14",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def consumer():\n    print('Consumer waiting')\n    work = in_queue.get()       # Done second\n    print('Consumer working')\n    # Doing work\n    print('Consumer done')\n    in_queue.task_done()        # Done third\nthread = Thread(target=consumer)\nthread.start()\n# Example 16",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "start_threads",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def start_threads(count, *args):\n    threads = [StoppableWorker(*args) for _ in range(count)]\n    for thread in threads:\n        thread.start()\n    return threads\ndef stop_threads(closable_queue, threads):\n    for _ in threads:\n        closable_queue.close()\n    closable_queue.join()\n    for thread in threads:",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "stop_threads",
        "kind": 2,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "def stop_threads(closable_queue, threads):\n    for _ in threads:\n        closable_queue.close()\n    closable_queue.join()\n    for thread in threads:\n        thread.join()\n# Example 24\ndownload_queue = ClosableQueue()\nresize_queue = ClosableQueue()\nupload_queue = ClosableQueue()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "download_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "download_queue = MyQueue()\nresize_queue = MyQueue()\nupload_queue = MyQueue()\ndone_queue = MyQueue()\nthreads = [\n    Worker(download, download_queue, resize_queue),\n    Worker(resize, resize_queue, upload_queue),\n    Worker(upload, upload_queue, done_queue),\n]\n# Example 8",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "resize_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "resize_queue = MyQueue()\nupload_queue = MyQueue()\ndone_queue = MyQueue()\nthreads = [\n    Worker(download, download_queue, resize_queue),\n    Worker(resize, resize_queue, upload_queue),\n    Worker(upload, upload_queue, done_queue),\n]\n# Example 8\nfor thread in threads:",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "upload_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "upload_queue = MyQueue()\ndone_queue = MyQueue()\nthreads = [\n    Worker(download, download_queue, resize_queue),\n    Worker(resize, resize_queue, upload_queue),\n    Worker(upload, upload_queue, done_queue),\n]\n# Example 8\nfor thread in threads:\n    thread.start()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "done_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "done_queue = MyQueue()\nthreads = [\n    Worker(download, download_queue, resize_queue),\n    Worker(resize, resize_queue, upload_queue),\n    Worker(upload, upload_queue, done_queue),\n]\n# Example 8\nfor thread in threads:\n    thread.start()\nfor _ in range(1000):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "threads = [\n    Worker(download, download_queue, resize_queue),\n    Worker(resize, resize_queue, upload_queue),\n    Worker(upload, upload_queue, done_queue),\n]\n# Example 8\nfor thread in threads:\n    thread.start()\nfor _ in range(1000):\n    download_queue.put(object())",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "processed = len(done_queue.items)\npolled = sum(t.polled_count for t in threads)\nprint(f'Processed {processed} items after '\n      f'polling {polled} times')\n# Example 11\nfrom queue import Queue\nmy_queue = Queue()\ndef consumer():\n    print('Consumer waiting')\n    my_queue.get()              # Runs after put() below",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "polled",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "polled = sum(t.polled_count for t in threads)\nprint(f'Processed {processed} items after '\n      f'polling {polled} times')\n# Example 11\nfrom queue import Queue\nmy_queue = Queue()\ndef consumer():\n    print('Consumer waiting')\n    my_queue.get()              # Runs after put() below\n    print('Consumer done')",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "my_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "my_queue = Queue()\ndef consumer():\n    print('Consumer waiting')\n    my_queue.get()              # Runs after put() below\n    print('Consumer done')\nthread = Thread(target=consumer)\nthread.start()\n# Example 12\nprint('Producer putting')\nmy_queue.put(object())          # Runs before get() above",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "thread = Thread(target=consumer)\nthread.start()\n# Example 12\nprint('Producer putting')\nmy_queue.put(object())          # Runs before get() above\nprint('Producer done')\nthread.join()\n# Example 13\nmy_queue = Queue(1)             # Buffer size of 1\ndef consumer():",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "my_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "my_queue = Queue(1)             # Buffer size of 1\ndef consumer():\n    time.sleep(0.1)             # Wait\n    my_queue.get()              # Runs second\n    print('Consumer got 1')\n    my_queue.get()              # Runs fourth\n    print('Consumer got 2')\n    print('Consumer done')\nthread = Thread(target=consumer)\nthread.start()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "thread = Thread(target=consumer)\nthread.start()\n# Example 14\nmy_queue.put(object())          # Runs first\nprint('Producer put 1')\nmy_queue.put(object())          # Runs third\nprint('Producer put 2')\nprint('Producer done')\nthread.join()\n# Example 15",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "in_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "in_queue = Queue()\ndef consumer():\n    print('Consumer waiting')\n    work = in_queue.get()       # Done second\n    print('Consumer working')\n    # Doing work\n    print('Consumer done')\n    in_queue.task_done()        # Done third\nthread = Thread(target=consumer)\nthread.start()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "thread = Thread(target=consumer)\nthread.start()\n# Example 16\nprint('Producer putting')\nin_queue.put(object())         # Done first\nprint('Producer waiting')\nin_queue.join()                # Done fourth\nprint('Producer done')\nthread.join()\n# Example 17",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "download_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "download_queue = ClosableQueue()\nresize_queue = ClosableQueue()\nupload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(download, download_queue, resize_queue),\n    StoppableWorker(resize, resize_queue, upload_queue),\n    StoppableWorker(upload, upload_queue, done_queue),\n]\n# Example 21",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "resize_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "resize_queue = ClosableQueue()\nupload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(download, download_queue, resize_queue),\n    StoppableWorker(resize, resize_queue, upload_queue),\n    StoppableWorker(upload, upload_queue, done_queue),\n]\n# Example 21\nfor thread in threads:",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "upload_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "upload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(download, download_queue, resize_queue),\n    StoppableWorker(resize, resize_queue, upload_queue),\n    StoppableWorker(upload, upload_queue, done_queue),\n]\n# Example 21\nfor thread in threads:\n    thread.start()",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "done_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "done_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(download, download_queue, resize_queue),\n    StoppableWorker(resize, resize_queue, upload_queue),\n    StoppableWorker(upload, upload_queue, done_queue),\n]\n# Example 21\nfor thread in threads:\n    thread.start()\nfor _ in range(1000):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "threads = [\n    StoppableWorker(download, download_queue, resize_queue),\n    StoppableWorker(resize, resize_queue, upload_queue),\n    StoppableWorker(upload, upload_queue, done_queue),\n]\n# Example 21\nfor thread in threads:\n    thread.start()\nfor _ in range(1000):\n    download_queue.put(object())",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "download_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "download_queue = ClosableQueue()\nresize_queue = ClosableQueue()\nupload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\ndownload_threads = start_threads(\n    3, download, download_queue, resize_queue)\nresize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "resize_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "resize_queue = ClosableQueue()\nupload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\ndownload_threads = start_threads(\n    3, download, download_queue, resize_queue)\nresize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "upload_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "upload_queue = ClosableQueue()\ndone_queue = ClosableQueue()\ndownload_threads = start_threads(\n    3, download, download_queue, resize_queue)\nresize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):\n    download_queue.put(object())",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "done_queue",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "done_queue = ClosableQueue()\ndownload_threads = start_threads(\n    3, download, download_queue, resize_queue)\nresize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):\n    download_queue.put(object())\nstop_threads(download_queue, download_threads)",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "download_threads",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "download_threads = start_threads(\n    3, download, download_queue, resize_queue)\nresize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):\n    download_queue.put(object())\nstop_threads(download_queue, download_threads)\nstop_threads(resize_queue, resize_threads)",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "resize_threads",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "resize_threads = start_threads(\n    4, resize, resize_queue, upload_queue)\nupload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):\n    download_queue.put(object())\nstop_threads(download_queue, download_threads)\nstop_threads(resize_queue, resize_threads)\nstop_threads(upload_queue, upload_threads)\nprint(done_queue.qsize(), 'items finished')",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "upload_threads",
        "kind": 5,
        "importPath": "example_code.item_55",
        "description": "example_code.item_55",
        "peekOfCode": "upload_threads = start_threads(\n    5, upload, upload_queue, done_queue)\nfor _ in range(1000):\n    download_queue.put(object())\nstop_threads(download_queue, download_threads)\nstop_threads(resize_queue, resize_threads)\nstop_threads(upload_queue, upload_threads)\nprint(done_queue.qsize(), 'items finished')",
        "detail": "example_code.item_55",
        "documentation": {}
    },
    {
        "label": "Grid",
        "kind": 6,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "class Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]\n    def set(self, y, x, state):",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "ColumnPrinter",
        "kind": 6,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "class ColumnPrinter:\n    def __init__(self):\n        self.columns = []\n    def append(self, data):\n        self.columns.append(data)\n    def __str__(self):\n        row_count = 1\n        for data in self.columns:\n            row_count = max(\n                row_count, len(data.splitlines()) + 1)",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nALIVE = '*'\nEMPTY = '-'\n# Example 2",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "fake_get",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def fake_get(y, x):\n    position = (y, x)\n    seen.add(position)\n    return ALIVE if position in alive else EMPTY\ncount = count_neighbors(10, 5, fake_get)\nassert count == 2\nexpected_seen = {\n    (9, 5),  (9, 6),  (10, 6), (11, 6),\n    (11, 5), (11, 4), (10, 4), (9, 4)\n}",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:\n        if neighbors == 3:\n            return ALIVE     # Regenerate\n    return state",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "step_cell",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def step_cell(y, x, get, set):\n    state = get(y, x)\n    neighbors = count_neighbors(y, x, get)\n    next_state = game_logic(state, neighbors)\n    set(y, x, next_state)\nalive = {(10, 5), (9, 5), (9, 6)}\nnew_state = None\ndef fake_get(y, x):\n    return ALIVE if (y, x) in alive else EMPTY\ndef fake_set(y, x, state):",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "fake_get",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def fake_get(y, x):\n    return ALIVE if (y, x) in alive else EMPTY\ndef fake_set(y, x, state):\n    global new_state\n    new_state = state\n# Stay alive\nstep_cell(10, 5, fake_get, fake_set)\nassert new_state == ALIVE\n# Stay dead\nalive.remove((10, 5))",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "fake_set",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def fake_set(y, x, state):\n    global new_state\n    new_state = state\n# Stay alive\nstep_cell(10, 5, fake_get, fake_set)\nassert new_state == ALIVE\n# Stay dead\nalive.remove((10, 5))\nstep_cell(10, 5, fake_get, fake_set)\nassert new_state == EMPTY",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def simulate(grid):\n    next_grid = Grid(grid.height, grid.width)\n    for y in range(grid.height):\n        for x in range(grid.width):\n            step_cell(y, x, grid.get, next_grid.set)\n    return next_grid\n# Example 8\nclass ColumnPrinter:\n    def __init__(self):\n        self.columns = []",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "def game_logic(state, neighbors):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "ALIVE",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "ALIVE = '*'\nEMPTY = '-'\n# Example 2\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "EMPTY = '-'\n# Example 2\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "grid = Grid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\nprint(grid)\n# Example 4\ndef count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "alive",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "alive = {(9, 5), (9, 6)}\nseen = set()\ndef fake_get(y, x):\n    position = (y, x)\n    seen.add(position)\n    return ALIVE if position in alive else EMPTY\ncount = count_neighbors(10, 5, fake_get)\nassert count == 2\nexpected_seen = {\n    (9, 5),  (9, 6),  (10, 6), (11, 6),",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "seen",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "seen = set()\ndef fake_get(y, x):\n    position = (y, x)\n    seen.add(position)\n    return ALIVE if position in alive else EMPTY\ncount = count_neighbors(10, 5, fake_get)\nassert count == 2\nexpected_seen = {\n    (9, 5),  (9, 6),  (10, 6), (11, 6),\n    (11, 5), (11, 4), (10, 4), (9, 4)",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "count = count_neighbors(10, 5, fake_get)\nassert count == 2\nexpected_seen = {\n    (9, 5),  (9, 6),  (10, 6), (11, 6),\n    (11, 5), (11, 4), (10, 4), (9, 4)\n}\nassert seen == expected_seen\n# Example 5\ndef game_logic(state, neighbors):\n    if state == ALIVE:",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "expected_seen",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "expected_seen = {\n    (9, 5),  (9, 6),  (10, 6), (11, 6),\n    (11, 5), (11, 4), (10, 4), (9, 4)\n}\nassert seen == expected_seen\n# Example 5\ndef game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "alive",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "alive = {(10, 5), (9, 5), (9, 6)}\nnew_state = None\ndef fake_get(y, x):\n    return ALIVE if (y, x) in alive else EMPTY\ndef fake_set(y, x, state):\n    global new_state\n    new_state = state\n# Stay alive\nstep_cell(10, 5, fake_get, fake_set)\nassert new_state == ALIVE",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "new_state",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "new_state = None\ndef fake_get(y, x):\n    return ALIVE if (y, x) in alive else EMPTY\ndef fake_set(y, x, state):\n    global new_state\n    new_state = state\n# Stay alive\nstep_cell(10, 5, fake_get, fake_set)\nassert new_state == ALIVE\n# Stay dead",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_56",
        "description": "example_code.item_56",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate(grid)\nprint(columns)\n# Example 9\ndef game_logic(state, neighbors):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)",
        "detail": "example_code.item_56",
        "documentation": {}
    },
    {
        "label": "Grid",
        "kind": 6,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "class Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]\n    def set(self, y, x, state):",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "LockingGrid",
        "kind": 6,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "class LockingGrid(Grid):\n    def __init__(self, height, width):\n        super().__init__(height, width)\n        self.lock = Lock()\n    def __str__(self):\n        with self.lock:\n            return super().__str__()\n    def get(self, y, x):\n        with self.lock:\n            return super().get(y, x)",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "ColumnPrinter",
        "kind": 6,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "class ColumnPrinter:\n    def __init__(self):\n        self.columns = []\n    def append(self, data):\n        self.columns.append(data)\n    def __str__(self):\n        row_count = 1\n        for data in self.columns:\n            row_count = max(\n                row_count, len(data.splitlines()) + 1)",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom threading import Lock\nALIVE = '*'\nEMPTY = '-'",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def game_logic(state, neighbors):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)\ndef game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:\n        if neighbors == 3:\n            return ALIVE     # Regenerate\n    return state",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "step_cell",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def step_cell(y, x, get, set):\n    state = get(y, x)\n    neighbors = count_neighbors(y, x, get)\n    next_state = game_logic(state, neighbors)\n    set(y, x, next_state)\ndef simulate_threaded(grid):\n    next_grid = LockingGrid(grid.height, grid.width)\n    threads = []\n    for y in range(grid.height):\n        for x in range(grid.width):",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "simulate_threaded",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def simulate_threaded(grid):\n    next_grid = LockingGrid(grid.height, grid.width)\n    threads = []\n    for y in range(grid.height):\n        for x in range(grid.width):\n            args = (y, x, grid.get, next_grid.set)\n            thread = Thread(target=step_cell, args=args)\n            thread.start()  # Fan out\n            threads.append(thread)\n    for thread in threads:",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "def game_logic(state, neighbors):\n    raise OSError('Problem with I/O')\n# Example 5\nimport contextlib\nimport io\nfake_stderr = io.StringIO()\nwith contextlib.redirect_stderr(fake_stderr):\n    thread = Thread(target=game_logic, args=(ALIVE, 3))\n    thread.start()\n    thread.join()",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "ALIVE",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "ALIVE = '*'\nEMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "EMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "grid = LockingGrid(5, 9)            # Changed\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_threaded(grid)  # Changed",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_threaded(grid)  # Changed\nprint(columns)\n# Example 4\ndef game_logic(state, neighbors):\n    raise OSError('Problem with I/O')\n# Example 5\nimport contextlib",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "fake_stderr",
        "kind": 5,
        "importPath": "example_code.item_57",
        "description": "example_code.item_57",
        "peekOfCode": "fake_stderr = io.StringIO()\nwith contextlib.redirect_stderr(fake_stderr):\n    thread = Thread(target=game_logic, args=(ALIVE, 3))\n    thread.start()\n    thread.join()\nprint(fake_stderr.getvalue())",
        "detail": "example_code.item_57",
        "documentation": {}
    },
    {
        "label": "ClosableQueue",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class ClosableQueue(Queue):\n    SENTINEL = object()\n    def close(self):\n        self.put(self.SENTINEL)\n    def __iter__(self):\n        while True:\n            item = self.get()\n            try:\n                if item is self.SENTINEL:\n                    return  # Cause the thread to exit",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "StoppableWorker",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class StoppableWorker(Thread):\n    def __init__(self, func, in_queue, out_queue, **kwargs):\n        super().__init__(**kwargs)\n        self.func = func\n        self.in_queue = in_queue\n        self.out_queue = out_queue\n    def run(self):\n        for item in self.in_queue:\n            result = self.func(item)\n            self.out_queue.put(result)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "SimulationError",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class SimulationError(Exception):\n    pass\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "Grid",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]\n    def set(self, y, x, state):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "ColumnPrinter",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class ColumnPrinter:\n    def __init__(self):\n        self.columns = []\n    def append(self, data):\n        self.columns.append(data)\n    def __str__(self):\n        row_count = 1\n        for data in self.columns:\n            row_count = max(\n                row_count, len(data.splitlines()) + 1)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "LockingGrid",
        "kind": 6,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "class LockingGrid(Grid):\n    def __init__(self, height, width):\n        super().__init__(height, width)\n        self.lock = Lock()\n    def __str__(self):\n        with self.lock:\n            return super().__str__()\n    def get(self, y, x):\n        with self.lock:\n            return super().get(y, x)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom queue import Queue\nclass ClosableQueue(Queue):\n    SENTINEL = object()",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def game_logic(state, neighbors):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)\ndef game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:\n        if neighbors == 3:\n            return ALIVE     # Regenerate\n    return state",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "game_logic_thread",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def game_logic_thread(item):\n    y, x, state, neighbors = item\n    try:\n        next_state = game_logic(state, neighbors)\n    except Exception as e:\n        next_state = e\n    return (y, x, next_state)\n# Start the threads upfront\nthreads = []\nfor _ in range(5):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "simulate_pipeline",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def simulate_pipeline(grid, in_queue, out_queue):\n    for y in range(grid.height):\n        for x in range(grid.width):\n            state = grid.get(y, x)\n            neighbors = count_neighbors(y, x, grid.get)\n            in_queue.put((y, x, state, neighbors))  # Fan out\n    in_queue.join()\n    out_queue.close()\n    next_grid = Grid(grid.height, grid.width)\n    for item in out_queue:                          # Fan in",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:\n        if neighbors == 3:\n            return ALIVE     # Regenerate\n    return state",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def count_neighbors(y, x, get):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)\n# Example 7\ndef count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "count_neighbors_thread",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def count_neighbors_thread(item):\n    y, x, state, get = item\n    try:\n        neighbors = count_neighbors(y, x, get)\n    except Exception as e:\n        neighbors = e\n    return (y, x, state, neighbors)\ndef game_logic_thread(item):\n    y, x, state, neighbors = item\n    if isinstance(neighbors, Exception):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "game_logic_thread",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def game_logic_thread(item):\n    y, x, state, neighbors = item\n    if isinstance(neighbors, Exception):\n        next_state = neighbors\n    else:\n        try:\n            next_state = game_logic(state, neighbors)\n        except Exception as e:\n            next_state = e\n    return (y, x, next_state)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "simulate_phased_pipeline",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def simulate_phased_pipeline(\n        grid, in_queue, logic_queue, out_queue):\n    for y in range(grid.height):\n        for x in range(grid.width):\n            state = grid.get(y, x)\n            item = (y, x, state, grid.get)\n            in_queue.put(item)          # Fan out\n    in_queue.join()\n    logic_queue.join()                  # Pipeline sequencing\n    out_queue.close()",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "def count_neighbors(*args):\n    raise OSError('Problem with I/O in count_neighbors')\nin_queue = ClosableQueue()\nlogic_queue = ClosableQueue()\nout_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue,\n        daemon=True),\n    StoppableWorker(",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "in_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "in_queue = ClosableQueue()\nout_queue = ClosableQueue()\n# Example 2\nfrom threading import Thread\nclass StoppableWorker(Thread):\n    def __init__(self, func, in_queue, out_queue, **kwargs):\n        super().__init__(**kwargs)\n        self.func = func\n        self.in_queue = in_queue\n        self.out_queue = out_queue",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "out_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "out_queue = ClosableQueue()\n# Example 2\nfrom threading import Thread\nclass StoppableWorker(Thread):\n    def __init__(self, func, in_queue, out_queue, **kwargs):\n        super().__init__(**kwargs)\n        self.func = func\n        self.in_queue = in_queue\n        self.out_queue = out_queue\n    def run(self):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "threads = []\nfor _ in range(5):\n    thread = StoppableWorker(\n        game_logic_thread, in_queue, out_queue)\n    thread.start()\n    threads.append(thread)\n# Example 3\nALIVE = '*'\nEMPTY = '-'\nclass SimulationError(Exception):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "ALIVE",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "ALIVE = '*'\nEMPTY = '-'\nclass SimulationError(Exception):\n    pass\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "EMPTY = '-'\nclass SimulationError(Exception):\n    pass\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "grid = Grid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_pipeline(grid, in_queue, out_queue)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_pipeline(grid, in_queue, out_queue)\nprint(columns)\nfor thread in threads:\n    in_queue.close()\nfor thread in threads:\n    thread.join()\n# Example 6",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "in_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "in_queue = ClosableQueue()\nlogic_queue = ClosableQueue()\nout_queue = ClosableQueue()\nthreads = []\nfor _ in range(5):\n    thread = StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue)\n    thread.start()\n    threads.append(thread)\nfor _ in range(5):",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "logic_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "logic_queue = ClosableQueue()\nout_queue = ClosableQueue()\nthreads = []\nfor _ in range(5):\n    thread = StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue)\n    thread.start()\n    threads.append(thread)\nfor _ in range(5):\n    thread = StoppableWorker(",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "out_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "out_queue = ClosableQueue()\nthreads = []\nfor _ in range(5):\n    thread = StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue)\n    thread.start()\n    threads.append(thread)\nfor _ in range(5):\n    thread = StoppableWorker(\n        game_logic_thread, logic_queue, out_queue)",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "threads = []\nfor _ in range(5):\n    thread = StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue)\n    thread.start()\n    threads.append(thread)\nfor _ in range(5):\n    thread = StoppableWorker(\n        game_logic_thread, logic_queue, out_queue)\n    thread.start()",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "grid = LockingGrid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_phased_pipeline(",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = simulate_phased_pipeline(\n        grid, in_queue, logic_queue, out_queue)\nprint(columns)\nfor thread in threads:\n    in_queue.close()\nfor thread in threads:\n    logic_queue.close()",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "in_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "in_queue = ClosableQueue()\nlogic_queue = ClosableQueue()\nout_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue,\n        daemon=True),\n    StoppableWorker(\n        game_logic_thread, logic_queue, out_queue,\n        daemon=True),",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "logic_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "logic_queue = ClosableQueue()\nout_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue,\n        daemon=True),\n    StoppableWorker(\n        game_logic_thread, logic_queue, out_queue,\n        daemon=True),\n]",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "out_queue",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "out_queue = ClosableQueue()\nthreads = [\n    StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue,\n        daemon=True),\n    StoppableWorker(\n        game_logic_thread, logic_queue, out_queue,\n        daemon=True),\n]\nfor thread in threads:",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "example_code.item_58",
        "description": "example_code.item_58",
        "peekOfCode": "threads = [\n    StoppableWorker(\n        count_neighbors_thread, in_queue, logic_queue,\n        daemon=True),\n    StoppableWorker(\n        game_logic_thread, logic_queue, out_queue,\n        daemon=True),\n]\nfor thread in threads:\n    thread.start()",
        "detail": "example_code.item_58",
        "documentation": {}
    },
    {
        "label": "Grid",
        "kind": 6,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "class Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]\n    def set(self, y, x, state):",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "LockingGrid",
        "kind": 6,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "class LockingGrid(Grid):\n    def __init__(self, height, width):\n        super().__init__(height, width)\n        self.lock = Lock()\n    def __str__(self):\n        with self.lock:\n            return super().__str__()\n    def get(self, y, x):\n        with self.lock:\n            return super().get(y, x)",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "ColumnPrinter",
        "kind": 6,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "class ColumnPrinter:\n    def __init__(self):\n        self.columns = []\n    def append(self, data):\n        self.columns.append(data)\n    def __str__(self):\n        row_count = 1\n        for data in self.columns:\n            row_count = max(\n                row_count, len(data.splitlines()) + 1)",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nALIVE = '*'\nEMPTY = '-'\nclass Grid:",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def game_logic(state, neighbors):\n    # Do some blocking input/output in here:\n    data = my_socket.recv(100)\ndef game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "game_logic",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def game_logic(state, neighbors):\n    if state == ALIVE:\n        if neighbors < 2:\n            return EMPTY     # Die: Too few\n        elif neighbors > 3:\n            return EMPTY     # Die: Too many\n    else:\n        if neighbors == 3:\n            return ALIVE     # Regenerate\n    return state",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "step_cell",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def step_cell(y, x, get, set):\n    state = get(y, x)\n    neighbors = count_neighbors(y, x, get)\n    next_state = game_logic(state, neighbors)\n    set(y, x, next_state)\n# Example 2\nfrom concurrent.futures import ThreadPoolExecutor\ndef simulate_pool(pool, grid):\n    next_grid = LockingGrid(grid.height, grid.width)\n    futures = []",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "simulate_pool",
        "kind": 2,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "def simulate_pool(pool, grid):\n    next_grid = LockingGrid(grid.height, grid.width)\n    futures = []\n    for y in range(grid.height):\n        for x in range(grid.width):\n            args = (y, x, grid.get, next_grid.set)\n            future = pool.submit(step_cell, *args)  # Fan out\n            futures.append(future)\n    for future in futures:\n        future.result()                             # Fan in",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "ALIVE",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "ALIVE = '*'\nEMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "EMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "grid = LockingGrid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nwith ThreadPoolExecutor(max_workers=10) as pool:\n    for i in range(5):\n        columns.append(str(grid))",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_59",
        "description": "example_code.item_59",
        "peekOfCode": "columns = ColumnPrinter()\nwith ThreadPoolExecutor(max_workers=10) as pool:\n    for i in range(5):\n        columns.append(str(grid))\n        grid = simulate_pool(pool, grid)\nprint(columns)\n# Example 4\ntry:\n    def game_logic(state, neighbors):\n        raise OSError('Problem with I/O')",
        "detail": "example_code.item_59",
        "documentation": {}
    },
    {
        "label": "Grid",
        "kind": 6,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "class Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]\n    def set(self, y, x, state):",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "ColumnPrinter",
        "kind": 6,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "class ColumnPrinter:\n    def __init__(self):\n        self.columns = []\n    def append(self, data):\n        self.columns.append(data)\n    def __str__(self):\n        row_count = 1\n        for data in self.columns:\n            row_count = max(\n                row_count, len(data.splitlines()) + 1)",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nALIVE = '*'\nEMPTY = '-'\nclass Grid:",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "count_neighbors",
        "kind": 2,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "def count_neighbors(y, x, get):\n    n_ = get(y - 1, x + 0)  # North\n    ne = get(y - 1, x + 1)  # Northeast\n    e_ = get(y + 0, x + 1)  # East\n    se = get(y + 1, x + 1)  # Southeast\n    s_ = get(y + 1, x + 0)  # South\n    sw = get(y + 1, x - 1)  # Southwest\n    w_ = get(y + 0, x - 1)  # West\n    nw = get(y - 1, x - 1)  # Northwest\n    neighbor_states = [n_, ne, e_, se, s_, sw, w_, nw]",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "ALIVE",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "ALIVE = '*'\nEMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "EMPTY = '-'\nclass Grid:\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.rows = []\n        for _ in range(self.height):\n            self.rows.append([EMPTY] * self.width)\n    def get(self, y, x):\n        return self.rows[y % self.height][x % self.width]",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "grid = Grid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = asyncio.run(simulate(grid))   # Run the event loop",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = asyncio.run(simulate(grid))   # Run the event loop\nprint(columns)\nlogging.getLogger().setLevel(logging.DEBUG)\n# Example 5\ntry:\n    async def game_logic(state, neighbors):\n        raise OSError('Problem with I/O')",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "grid = Grid(5, 9)\ngrid.set(0, 3, ALIVE)\ngrid.set(1, 4, ALIVE)\ngrid.set(2, 2, ALIVE)\ngrid.set(2, 3, ALIVE)\ngrid.set(2, 4, ALIVE)\ncolumns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = asyncio.run(simulate(grid))",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "example_code.item_60",
        "description": "example_code.item_60",
        "peekOfCode": "columns = ColumnPrinter()\nfor i in range(5):\n    columns.append(str(grid))\n    grid = asyncio.run(simulate(grid))\nprint(columns)\nlogging.getLogger().setLevel(logging.DEBUG)",
        "detail": "example_code.item_60",
        "documentation": {}
    },
    {
        "label": "EOFError",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class EOFError(Exception):\n    pass\nclass ConnectionBase:\n    def __init__(self, connection):\n        self.connection = connection\n        self.file = connection.makefile('rb')\n    def send(self, command):\n        line = command + '\\n'\n        data = line.encode()\n        self.connection.send(data)",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "ConnectionBase",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class ConnectionBase:\n    def __init__(self, connection):\n        self.connection = connection\n        self.file = connection.makefile('rb')\n    def send(self, command):\n        line = command + '\\n'\n        data = line.encode()\n        self.connection.send(data)\n    def receive(self):\n        line = self.file.readline()",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "UnknownCommandError",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class UnknownCommandError(Exception):\n    pass\nclass Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)\n    def _clear_state(self, lower, upper):\n        self.lower = lower\n        self.upper = upper\n        self.secret = None",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)\n    def _clear_state(self, lower, upper):\n        self.lower = lower\n        self.upper = upper\n        self.secret = None\n        self.guesses = []\n# Example 3",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class Client(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state()\n    def _clear_state(self):\n        self.secret = None\n        self.last_distance = None\n# Example 8\n    @contextlib.contextmanager\n    def session(self, lower, upper, secret):",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "AsyncConnectionBase",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class AsyncConnectionBase:\n    def __init__(self, reader, writer):             # Changed\n        self.reader = reader                        # Changed\n        self.writer = writer                        # Changed\n    async def send(self, command):\n        line = command + '\\n'\n        data = line.encode()\n        self.writer.write(data)                     # Changed\n        await self.writer.drain()                   # Changed\n    async def receive(self):",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class AsyncSession(AsyncConnectionBase):            # Changed\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_values(None, None)\n    def _clear_values(self, lower, upper):\n        self.lower = lower\n        self.upper = upper\n        self.secret = None\n        self.guesses = []\n# Example 16",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "kind": 6,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "class AsyncClient(AsyncConnectionBase):             # Changed\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state()\n    def _clear_state(self):\n        self.secret = None\n        self.last_distance = None\n# Example 21\n    @contextlib.asynccontextmanager                 # Changed\n    async def session(self, lower, upper, secret):  # Changed",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass EOFError(Exception):\n    pass\nclass ConnectionBase:",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "handle_connection",
        "kind": 2,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "def handle_connection(connection):\n    with connection:\n        session = Session(connection)\n        try:\n            session.loop()\n        except EOFError:\n            pass\ndef run_server(address):\n    with socket.socket() as listener:\n        # Allow the port to be reused",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "run_server",
        "kind": 2,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "def run_server(address):\n    with socket.socket() as listener:\n        # Allow the port to be reused\n        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        listener.bind(address)\n        listener.listen()\n        while True:\n            connection, _ = listener.accept()\n            thread = Thread(target=handle_connection,\n                            args=(connection,),",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "run_client",
        "kind": 2,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "def run_client(address):\n    with socket.create_connection(address) as connection:\n        client = Client(connection)\n        with client.session(1, 5, 3):\n            results = [(x, client.report_outcome(x))\n                       for x in client.request_numbers(5)]\n        with client.session(10, 15, 12):\n            for number in client.request_numbers(5):\n                outcome = client.report_outcome(number)\n                results.append((number, outcome))",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "def main():\n    address = ('127.0.0.1', 1234)\n    server_thread = Thread(\n        target=run_server, args=(address,), daemon=True)\n    server_thread.start()\n    results = run_client(address)\n    for number, outcome in results:\n        print(f'Client: {number} is {outcome}')\nmain()\n# Example 14",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "WARMER",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "WARMER = 'Warmer'\nCOLDER = 'Colder'\nUNSURE = 'Unsure'\nCORRECT = 'Correct'\nclass UnknownCommandError(Exception):\n    pass\nclass Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "COLDER",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "COLDER = 'Colder'\nUNSURE = 'Unsure'\nCORRECT = 'Correct'\nclass UnknownCommandError(Exception):\n    pass\nclass Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)\n    def _clear_state(self, lower, upper):",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "UNSURE",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "UNSURE = 'Unsure'\nCORRECT = 'Correct'\nclass UnknownCommandError(Exception):\n    pass\nclass Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)\n    def _clear_state(self, lower, upper):\n        self.lower = lower",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "CORRECT",
        "kind": 5,
        "importPath": "example_code.item_61",
        "description": "example_code.item_61",
        "peekOfCode": "CORRECT = 'Correct'\nclass UnknownCommandError(Exception):\n    pass\nclass Session(ConnectionBase):\n    def __init__(self, *args):\n        super().__init__(*args)\n        self._clear_state(None, None)\n    def _clear_state(self, lower, upper):\n        self.lower = lower\n        self.upper = upper",
        "detail": "example_code.item_61",
        "documentation": {}
    },
    {
        "label": "NoNewData",
        "kind": 6,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "class NoNewData(Exception):\n    pass\ndef readline(handle):\n    offset = handle.tell()\n    handle.seek(0, 2)\n    length = handle.tell()\n    if length == offset:\n        raise NoNewData\n    handle.seek(offset, 0)\n    return handle.readline()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass NoNewData(Exception):\n    pass\ndef readline(handle):",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def readline(handle):\n    offset = handle.tell()\n    handle.seek(0, 2)\n    length = handle.tell()\n    if length == offset:\n        raise NoNewData\n    handle.seek(offset, 0)\n    return handle.readline()\n# Example 2\nimport time",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "tail_file",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def tail_file(handle, interval, write_func):\n    while not handle.closed:\n        try:\n            line = readline(handle)\n        except NoNewData:\n            time.sleep(interval)\n        else:\n            write_func(line)\n# Example 3\nfrom threading import Lock, Thread",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "run_threads",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def run_threads(handles, interval, output_path):\n    with open(output_path, 'wb') as output:\n        lock = Lock()\n        def write(data):\n            with lock:\n                output.write(data)\n        threads = []\n        for handle in handles:\n            args = (handle, interval, write)\n            thread = Thread(target=tail_file, args=args)",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "write_random_data",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def write_random_data(path, write_count, interval):\n    with open(path, 'wb') as f:\n        for i in range(write_count):\n            time.sleep(random.random() * interval)\n            letters = random.choices(\n                string.ascii_lowercase, k=10)\n            data = f'{path}-{i:02}-{\"\".join(letters)}\\n'\n            f.write(data.encode())\n            f.flush()\ndef start_write_threads(directory, file_count):",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "start_write_threads",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def start_write_threads(directory, file_count):\n    paths = []\n    for i in range(file_count):\n        path = os.path.join(directory, str(i))\n        with open(path, 'w'):\n            # Make sure the file at this path will exist when\n            # the reading thread tries to poll it.\n            pass\n        paths.append(path)\n        args = (path, 10, 0.1)",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "close_all",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def close_all(handles):\n    time.sleep(1)\n    for handle in handles:\n        handle.close()\ndef setup():\n    tmpdir = TemporaryDirectory()\n    input_paths = start_write_threads(tmpdir.name, 5)\n    handles = []\n    for path in input_paths:\n        handle = open(path, 'rb')",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def setup():\n    tmpdir = TemporaryDirectory()\n    input_paths = start_write_threads(tmpdir.name, 5)\n    handles = []\n    for path in input_paths:\n        handle = open(path, 'rb')\n        handles.append(handle)\n    Thread(target=close_all, args=(handles,)).start()\n    output_path = os.path.join(tmpdir.name, 'merged')\n    return tmpdir, input_paths, handles, output_path",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "confirm_merge",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def confirm_merge(input_paths, output_path):\n    found = collections.defaultdict(list)\n    with open(output_path, 'rb') as f:\n        for line in f:\n            for path in input_paths:\n                if line.find(path.encode()) == 0:\n                    found[path].append(line)\n    expected = collections.defaultdict(list)\n    for path in input_paths:\n        with open(path, 'rb') as f:",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "tail_file",
        "kind": 2,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "def tail_file(handle, interval, write_func):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    async def write_async(data):\n        write_func(data)\n    coro = tail_async(handle, interval, write_async)\n    loop.run_until_complete(coro)\n# Example 12\ninput_paths = ...\nhandles = ...",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "input_paths",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "input_paths = ...\nhandles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 6\nimport asyncio\n# On Windows, a ProactorEventLoop can't be created within",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "handles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 6\nimport asyncio\n# On Windows, a ProactorEventLoop can't be created within\n# threads because it tries to register signal handlers. This",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "output_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 6\nimport asyncio\n# On Windows, a ProactorEventLoop can't be created within\n# threads because it tries to register signal handlers. This\n# is a work-around to always use the SelectorEventLoop policy",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "policy",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "policy = asyncio.get_event_loop_policy()\npolicy._loop_factory = asyncio.SelectorEventLoop\nasync def run_tasks_mixed(handles, interval, output_path):\n    loop = asyncio.get_event_loop()\n    with open(output_path, 'wb') as output:\n        async def write_async(data):\n            output.write(data)\n        def write(data):\n            coro = write_async(data)\n            future = asyncio.run_coroutine_threadsafe(",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "policy._loop_factory",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "policy._loop_factory = asyncio.SelectorEventLoop\nasync def run_tasks_mixed(handles, interval, output_path):\n    loop = asyncio.get_event_loop()\n    with open(output_path, 'wb') as output:\n        async def write_async(data):\n            output.write(data)\n        def write(data):\n            coro = write_async(data)\n            future = asyncio.run_coroutine_threadsafe(\n                coro, loop)",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "input_paths",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "input_paths = ...\nhandles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks_mixed(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 8\nasync def tail_async(handle, interval, write_func):\n    loop = asyncio.get_event_loop()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "handles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks_mixed(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 8\nasync def tail_async(handle, interval, write_func):\n    loop = asyncio.get_event_loop()\n    while not handle.closed:",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "output_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks_mixed(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 8\nasync def tail_async(handle, interval, write_func):\n    loop = asyncio.get_event_loop()\n    while not handle.closed:\n        try:",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "input_paths",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "input_paths = ...\nhandles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 11\ndef tail_file(handle, interval, write_func):\n    loop = asyncio.new_event_loop()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "handles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 11\ndef tail_file(handle, interval, write_func):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "output_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_tasks(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()\n# Example 11\ndef tail_file(handle, interval, write_func):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    async def write_async(data):",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "input_paths",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "input_paths = ...\nhandles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "handles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "example_code.item_62",
        "description": "example_code.item_62",
        "peekOfCode": "output_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nrun_threads(handles, 0.1, output_path)\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_62",
        "documentation": {}
    },
    {
        "label": "WriteThread",
        "kind": 6,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "class WriteThread(Thread):\n    def __init__(self, output_path):\n        super().__init__()\n        self.output_path = output_path\n        self.output = None\n        self.loop = asyncio.new_event_loop()\n    def run(self):\n        asyncio.set_event_loop(self.loop)\n        with open(self.output_path, 'wb') as self.output:\n            self.loop.run_forever()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "NoNewData",
        "kind": 6,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "class NoNewData(Exception):\n    pass\ndef readline(handle):\n    offset = handle.tell()\n    handle.seek(0, 2)\n    length = handle.tell()\n    if length == offset:\n        raise NoNewData\n    handle.seek(offset, 0)\n    return handle.readline()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport asyncio\n# On Windows, a ProactorEventLoop can't be created within\n# threads because it tries to register signal handlers. This",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def readline(handle):\n    offset = handle.tell()\n    handle.seek(0, 2)\n    length = handle.tell()\n    if length == offset:\n        raise NoNewData\n    handle.seek(offset, 0)\n    return handle.readline()\nasync def tail_async(handle, interval, write_func):\n    loop = asyncio.get_event_loop()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "write_random_data",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def write_random_data(path, write_count, interval):\n    with open(path, 'wb') as f:\n        for i in range(write_count):\n            time.sleep(random.random() * interval)\n            letters = random.choices(\n                string.ascii_lowercase, k=10)\n            data = f'{path}-{i:02}-{\"\".join(letters)}\\n'\n            f.write(data.encode())\n            f.flush()\ndef start_write_threads(directory, file_count):",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "start_write_threads",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def start_write_threads(directory, file_count):\n    paths = []\n    for i in range(file_count):\n        path = os.path.join(directory, str(i))\n        with open(path, 'w'):\n            # Make sure the file at this path will exist when\n            # the reading thread tries to poll it.\n            pass\n        paths.append(path)\n        args = (path, 10, 0.1)",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "close_all",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def close_all(handles):\n    time.sleep(1)\n    for handle in handles:\n        handle.close()\ndef setup():\n    tmpdir = TemporaryDirectory()\n    input_paths = start_write_threads(tmpdir.name, 5)\n    handles = []\n    for path in input_paths:\n        handle = open(path, 'rb')",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def setup():\n    tmpdir = TemporaryDirectory()\n    input_paths = start_write_threads(tmpdir.name, 5)\n    handles = []\n    for path in input_paths:\n        handle = open(path, 'rb')\n        handles.append(handle)\n    Thread(target=close_all, args=(handles,)).start()\n    output_path = os.path.join(tmpdir.name, 'merged')\n    return tmpdir, input_paths, handles, output_path",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "confirm_merge",
        "kind": 2,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "def confirm_merge(input_paths, output_path):\n    found = collections.defaultdict(list)\n    with open(output_path, 'rb') as f:\n        for line in f:\n            for path in input_paths:\n                if line.find(path.encode()) == 0:\n                    found[path].append(line)\n    expected = collections.defaultdict(list)\n    for path in input_paths:\n        with open(path, 'rb') as f:",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "policy",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "policy = asyncio.get_event_loop_policy()\npolicy._loop_factory = asyncio.SelectorEventLoop\nasync def run_tasks(handles, interval, output_path):\n    with open(output_path, 'wb') as output:\n        async def write_async(data):\n            output.write(data)\n        tasks = []\n        for handle in handles:\n            coro = tail_async(handle, interval, write_async)\n            task = asyncio.create_task(coro)",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "policy._loop_factory",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "policy._loop_factory = asyncio.SelectorEventLoop\nasync def run_tasks(handles, interval, output_path):\n    with open(output_path, 'wb') as output:\n        async def write_async(data):\n            output.write(data)\n        tasks = []\n        for handle in handles:\n            coro = tail_async(handle, interval, write_async)\n            task = asyncio.create_task(coro)\n            tasks.append(task)",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "input_paths",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "input_paths = ...\nhandles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_fully_async(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "handles = ...\noutput_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_fully_async(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "example_code.item_63",
        "description": "example_code.item_63",
        "peekOfCode": "output_path = ...\ntmpdir, input_paths, handles, output_path = setup()\nasyncio.run(run_fully_async(handles, 0.1, output_path))\nconfirm_merge(input_paths, output_path)\ntmpdir.cleanup()",
        "detail": "example_code.item_63",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef try_finally_example(filename):\n    print('* Opening file')\n    handle = open(filename, encoding='utf-8') # May raise OSError",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "try_finally_example",
        "kind": 2,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "def try_finally_example(filename):\n    print('* Opening file')\n    handle = open(filename, encoding='utf-8') # May raise OSError\n    try:\n        print('* Reading data')\n        return handle.read()  # May raise UnicodeDecodeError\n    finally:\n        print('* Calling close()')\n        handle.close()        # Always runs after try block\n# Example 2",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "load_json_key",
        "kind": 2,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "def load_json_key(data, key):\n    try:\n        print('* Loading JSON data')\n        result_dict = json.loads(data)  # May raise ValueError\n    except ValueError as e:\n        print('* Handling ValueError')\n        raise KeyError(key) from e\n    else:\n        print('* Looking up key')\n        return result_dict[key]         # May raise KeyError",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "divide_json",
        "kind": 2,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "def divide_json(path):\n    print('* Opening file')\n    handle = open(path, 'r+')   # May raise OSError\n    try:\n        print('* Reading data')\n        data = handle.read()    # May raise UnicodeDecodeError\n        print('* Loading JSON data')\n        op = json.loads(data)   # May raise ValueError\n        print('* Performing calculation')\n        value = (",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "UNDEFINED",
        "kind": 5,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "UNDEFINED = object()\nDIE_IN_ELSE_BLOCK = False\ndef divide_json(path):\n    print('* Opening file')\n    handle = open(path, 'r+')   # May raise OSError\n    try:\n        print('* Reading data')\n        data = handle.read()    # May raise UnicodeDecodeError\n        print('* Loading JSON data')\n        op = json.loads(data)   # May raise ValueError",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "DIE_IN_ELSE_BLOCK",
        "kind": 5,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "DIE_IN_ELSE_BLOCK = False\ndef divide_json(path):\n    print('* Opening file')\n    handle = open(path, 'r+')   # May raise OSError\n    try:\n        print('* Reading data')\n        data = handle.read()    # May raise UnicodeDecodeError\n        print('* Loading JSON data')\n        op = json.loads(data)   # May raise ValueError\n        print('* Performing calculation')",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "temp_path",
        "kind": 5,
        "importPath": "example_code.item_65",
        "description": "example_code.item_65",
        "peekOfCode": "temp_path = 'random_data.json'\nwith open(temp_path, 'w') as f:\n    f.write('{\"numerator\": 1, \"denominator\": 10}')\nassert divide_json(temp_path) == 0.1\n# Example 10\nwith open(temp_path, 'w') as f:\n    f.write('{\"numerator\": 1, \"denominator\": 0}')\nassert divide_json(temp_path) is UNDEFINED\n# Example 11\ntry:",
        "detail": "example_code.item_65",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nfrom threading import Lock\nlock = Lock()\nwith lock:",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "def my_function():\n    logging.debug('Some debug data')\n    logging.error('Error log here')\n    logging.debug('More debug data')\n# Example 4\nmy_function()\n# Example 5\nfrom contextlib import contextmanager\n@contextmanager\ndef debug_logging(level):",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "debug_logging",
        "kind": 2,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "def debug_logging(level):\n    logger = logging.getLogger()\n    old_level = logger.getEffectiveLevel()\n    logger.setLevel(level)\n    try:\n        yield\n    finally:\n        logger.setLevel(old_level)\n# Example 6\nwith debug_logging(logging.DEBUG):",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "log_level",
        "kind": 2,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "def log_level(level, name):\n    logger = logging.getLogger(name)\n    old_level = logger.getEffectiveLevel()\n    logger.setLevel(level)\n    try:\n        yield logger\n    finally:\n        logger.setLevel(old_level)\n# Example 9\nwith log_level(logging.DEBUG, 'my-log') as logger:",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "lock = Lock()\nwith lock:\n    # Do something while maintaining an invariant\n    pass\n# Example 2\nlock.acquire()\ntry:\n    # Do something while maintaining an invariant\n    pass\nfinally:",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "example_code.item_66",
        "description": "example_code.item_66",
        "peekOfCode": "logger = logging.getLogger('my-log')\nlogger.debug('Debug will not print')\nlogger.error('Error will print')\n# Example 11\nwith log_level(logging.DEBUG, 'other-log') as logger:\n    logger.debug(f'This is a message for {logger.name}!')\n    logging.debug('This will not print')",
        "detail": "example_code.item_66",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nimport time\nnow = 1552774475\nlocal_tuple = time.localtime(now)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "now = 1552774475\nlocal_tuple = time.localtime(now)\ntime_format = '%Y-%m-%d %H:%M:%S'\ntime_str = time.strftime(time_format, local_tuple)\nprint(time_str)\n# Example 2\ntime_tuple = time.strptime(time_str, time_format)\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "local_tuple",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "local_tuple = time.localtime(now)\ntime_format = '%Y-%m-%d %H:%M:%S'\ntime_str = time.strftime(time_format, local_tuple)\nprint(time_str)\n# Example 2\ntime_tuple = time.strptime(time_str, time_format)\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3\nimport os",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "time_format",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "time_format = '%Y-%m-%d %H:%M:%S'\ntime_str = time.strftime(time_format, local_tuple)\nprint(time_str)\n# Example 2\ntime_tuple = time.strptime(time_str, time_format)\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3\nimport os\nif os.name == 'nt':",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "time_str",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "time_str = time.strftime(time_format, local_tuple)\nprint(time_str)\n# Example 2\ntime_tuple = time.strptime(time_str, time_format)\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3\nimport os\nif os.name == 'nt':\n    print(\"This example doesn't work on Windows\")",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "time_tuple",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "time_tuple = time.strptime(time_str, time_format)\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3\nimport os\nif os.name == 'nt':\n    print(\"This example doesn't work on Windows\")\nelse:\n    parse_format = '%Y-%m-%d %H:%M:%S %Z'\n    depart_sfo = '2019-03-16 15:45:16 PDT'",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "utc_now",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "utc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 3\nimport os\nif os.name == 'nt':\n    print(\"This example doesn't work on Windows\")\nelse:\n    parse_format = '%Y-%m-%d %H:%M:%S %Z'\n    depart_sfo = '2019-03-16 15:45:16 PDT'\n    time_tuple = time.strptime(depart_sfo, parse_format)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "now = datetime(2019, 3, 16, 22, 14, 35)\nnow_utc = now.replace(tzinfo=timezone.utc)\nnow_local = now_utc.astimezone()\nprint(now_local)\n# Example 6\ntime_str = '2019-03-16 15:14:35'\nnow = datetime.strptime(time_str, time_format)\ntime_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "now_utc",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "now_utc = now.replace(tzinfo=timezone.utc)\nnow_local = now_utc.astimezone()\nprint(now_local)\n# Example 6\ntime_str = '2019-03-16 15:14:35'\nnow = datetime.strptime(time_str, time_format)\ntime_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "now_local",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "now_local = now_utc.astimezone()\nprint(now_local)\n# Example 6\ntime_str = '2019-03-16 15:14:35'\nnow = datetime.strptime(time_str, time_format)\ntime_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7\nimport pytz",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "time_str",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "time_str = '2019-03-16 15:14:35'\nnow = datetime.strptime(time_str, time_format)\ntime_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7\nimport pytz\narrival_nyc = '2019-03-16 23:33:24'\nnyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "now = datetime.strptime(time_str, time_format)\ntime_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7\nimport pytz\narrival_nyc = '2019-03-16 23:33:24'\nnyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "time_tuple",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "time_tuple = now.timetuple()\nutc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7\nimport pytz\narrival_nyc = '2019-03-16 23:33:24'\nnyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "utc_now",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "utc_now = time.mktime(time_tuple)\nprint(utc_now)\n# Example 7\nimport pytz\narrival_nyc = '2019-03-16 23:33:24'\nnyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "arrival_nyc",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "arrival_nyc = '2019-03-16 23:33:24'\nnyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)\n# Example 8\npacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "nyc_dt_naive",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "nyc_dt_naive = datetime.strptime(arrival_nyc, time_format)\neastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)\n# Example 8\npacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "eastern",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "eastern = pytz.timezone('US/Eastern')\nnyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)\n# Example 8\npacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9\nnepal = pytz.timezone('Asia/Katmandu')",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "nyc_dt",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "nyc_dt = eastern.localize(nyc_dt_naive)\nutc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)\n# Example 8\npacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9\nnepal = pytz.timezone('Asia/Katmandu')\nnepal_dt = nepal.normalize(utc_dt.astimezone(nepal))",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "utc_dt",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "utc_dt = pytz.utc.normalize(nyc_dt.astimezone(pytz.utc))\nprint(utc_dt)\n# Example 8\npacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9\nnepal = pytz.timezone('Asia/Katmandu')\nnepal_dt = nepal.normalize(utc_dt.astimezone(nepal))\nprint(nepal_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "pacific",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "pacific = pytz.timezone('US/Pacific')\nsf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9\nnepal = pytz.timezone('Asia/Katmandu')\nnepal_dt = nepal.normalize(utc_dt.astimezone(nepal))\nprint(nepal_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "sf_dt",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "sf_dt = pacific.normalize(utc_dt.astimezone(pacific))\nprint(sf_dt)\n# Example 9\nnepal = pytz.timezone('Asia/Katmandu')\nnepal_dt = nepal.normalize(utc_dt.astimezone(nepal))\nprint(nepal_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "nepal",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "nepal = pytz.timezone('Asia/Katmandu')\nnepal_dt = nepal.normalize(utc_dt.astimezone(nepal))\nprint(nepal_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "nepal_dt",
        "kind": 5,
        "importPath": "example_code.item_67",
        "description": "example_code.item_67",
        "peekOfCode": "nepal_dt = nepal.normalize(utc_dt.astimezone(nepal))\nprint(nepal_dt)",
        "detail": "example_code.item_67",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class GameState:\n    def __init__(self):\n        self.level = 0\n        self.lives = 4\n# Example 2\nstate = GameState()\nstate.level += 1  # Player beat a level\nstate.lives -= 1  # Player had to try again\nprint(state.__dict__)\n# Example 3",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class GameState:\n    def __init__(self):\n        self.level = 0\n        self.lives = 4\n        self.points = 0  # New field\n# Example 6\nstate = GameState()\nserialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)\nprint(state_after.__dict__)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class GameState:\n    def __init__(self, level=0, lives=4, points=0):\n        self.level = level\n        self.lives = lives\n        self.points = points\n# Example 10\ndef pickle_game_state(game_state):\n    kwargs = game_state.__dict__\n    return unpickle_game_state, (kwargs,)\n# Example 11",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class GameState:\n    def __init__(self, level=0, lives=4, points=0, magic=5):\n        self.level = level\n        self.lives = lives\n        self.points = points\n        self.magic = magic  # New field\n# Example 15\nprint('Before:', state.__dict__)\nstate_after = pickle.loads(serialized)\nprint('After: ', state_after.__dict__)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class GameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level\n        self.points = points\n        self.magic = magic\n# Example 17\ntry:\n    pickle.loads(serialized)\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "BetterGameState",
        "kind": 6,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "class BetterGameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level\n        self.points = points\n        self.magic = magic\n# Example 22\ntry:\n    pickle.loads(serialized)\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass GameState:\n    def __init__(self):\n        self.level = 0",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "pickle_game_state",
        "kind": 2,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "def pickle_game_state(game_state):\n    kwargs = game_state.__dict__\n    return unpickle_game_state, (kwargs,)\n# Example 11\ndef unpickle_game_state(kwargs):\n    return GameState(**kwargs)\n# Example 12\nimport copyreg\ncopyreg.pickle(GameState, pickle_game_state)\n# Example 13",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "unpickle_game_state",
        "kind": 2,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "def unpickle_game_state(kwargs):\n    return GameState(**kwargs)\n# Example 12\nimport copyreg\ncopyreg.pickle(GameState, pickle_game_state)\n# Example 13\nstate = GameState()\nstate.points += 1000\nserialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "pickle_game_state",
        "kind": 2,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "def pickle_game_state(game_state):\n    kwargs = game_state.__dict__\n    kwargs['version'] = 2\n    return unpickle_game_state, (kwargs,)\n# Example 19\ndef unpickle_game_state(kwargs):\n    version = kwargs.pop('version', 1)\n    if version == 1:\n        del kwargs['lives']\n    return GameState(**kwargs)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "unpickle_game_state",
        "kind": 2,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "def unpickle_game_state(kwargs):\n    version = kwargs.pop('version', 1)\n    if version == 1:\n        del kwargs['lives']\n    return GameState(**kwargs)\n# Example 20\ncopyreg.pickle(GameState, pickle_game_state)\nprint('Before:', state.__dict__)\nstate_after = pickle.loads(serialized)\nprint('After: ', state_after.__dict__)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state = GameState()\nstate.level += 1  # Player beat a level\nstate.lives -= 1  # Player had to try again\nprint(state.__dict__)\n# Example 3\nimport pickle\nstate_path = 'game_state.bin'\nwith open(state_path, 'wb') as f:\n    pickle.dump(state, f)\n# Example 4",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state_path",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state_path = 'game_state.bin'\nwith open(state_path, 'wb') as f:\n    pickle.dump(state, f)\n# Example 4\nwith open(state_path, 'rb') as f:\n    state_after = pickle.load(f)\nprint(state_after.__dict__)\n# Example 5\nclass GameState:\n    def __init__(self):",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state = GameState()\nserialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 7\nwith open(state_path, 'rb') as f:\n    state_after = pickle.load(f)\nprint(state_after.__dict__)\n# Example 8\nassert isinstance(state_after, GameState)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "serialized",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "serialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 7\nwith open(state_path, 'rb') as f:\n    state_after = pickle.load(f)\nprint(state_after.__dict__)\n# Example 8\nassert isinstance(state_after, GameState)\n# Example 9",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state_after",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 7\nwith open(state_path, 'rb') as f:\n    state_after = pickle.load(f)\nprint(state_after.__dict__)\n# Example 8\nassert isinstance(state_after, GameState)\n# Example 9\nclass GameState:",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state = GameState()\nstate.points += 1000\nserialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 14\nclass GameState:\n    def __init__(self, level=0, lives=4, points=0, magic=5):\n        self.level = level\n        self.lives = lives",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "serialized",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "serialized = pickle.dumps(state)\nstate_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 14\nclass GameState:\n    def __init__(self, level=0, lives=4, points=0, magic=5):\n        self.level = level\n        self.lives = lives\n        self.points = points\n        self.magic = magic  # New field",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state_after",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state_after = pickle.loads(serialized)\nprint(state_after.__dict__)\n# Example 14\nclass GameState:\n    def __init__(self, level=0, lives=4, points=0, magic=5):\n        self.level = level\n        self.lives = lives\n        self.points = points\n        self.magic = magic  # New field\n# Example 15",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state_after",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state_after = pickle.loads(serialized)\nprint('After: ', state_after.__dict__)\n# Example 16\nclass GameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level\n        self.points = points\n        self.magic = magic\n# Example 17\ntry:",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state_after",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state_after = pickle.loads(serialized)\nprint('After: ', state_after.__dict__)\n# Example 21\ncopyreg.dispatch_table.clear()\nstate = GameState()\nserialized = pickle.dumps(state)\ndel GameState\nclass BetterGameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state = GameState()\nserialized = pickle.dumps(state)\ndel GameState\nclass BetterGameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level\n        self.points = points\n        self.magic = magic\n# Example 22\ntry:",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "serialized",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "serialized = pickle.dumps(state)\ndel GameState\nclass BetterGameState:\n    def __init__(self, level=0, points=0, magic=5):\n        self.level = level\n        self.points = points\n        self.magic = magic\n# Example 22\ntry:\n    pickle.loads(serialized)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "state = BetterGameState()\nserialized = pickle.dumps(state)\nprint(serialized)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "serialized",
        "kind": 5,
        "importPath": "example_code.item_68",
        "description": "example_code.item_68",
        "peekOfCode": "serialized = pickle.dumps(state)\nprint(serialized)",
        "detail": "example_code.item_68",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nrate = 1.45\nseconds = 3*60 + 42\ncost = rate * seconds / 60",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "rate = 1.45\nseconds = 3*60 + 42\ncost = rate * seconds / 60\nprint(cost)\n# Example 2\nprint(round(cost, 2))\n# Example 3\nfrom decimal import Decimal\nrate = Decimal('1.45')\nseconds = Decimal(3*60 + 42)",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "seconds = 3*60 + 42\ncost = rate * seconds / 60\nprint(cost)\n# Example 2\nprint(round(cost, 2))\n# Example 3\nfrom decimal import Decimal\nrate = Decimal('1.45')\nseconds = Decimal(3*60 + 42)\ncost = rate * seconds / Decimal(60)",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "cost = rate * seconds / 60\nprint(cost)\n# Example 2\nprint(round(cost, 2))\n# Example 3\nfrom decimal import Decimal\nrate = Decimal('1.45')\nseconds = Decimal(3*60 + 42)\ncost = rate * seconds / Decimal(60)\nprint(cost)",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "rate = Decimal('1.45')\nseconds = Decimal(3*60 + 42)\ncost = rate * seconds / Decimal(60)\nprint(cost)\n# Example 4\nprint(Decimal('1.45'))\nprint(Decimal(1.45))\n# Example 5\nprint('456')\nprint(456)",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "seconds = Decimal(3*60 + 42)\ncost = rate * seconds / Decimal(60)\nprint(cost)\n# Example 4\nprint(Decimal('1.45'))\nprint(Decimal(1.45))\n# Example 5\nprint('456')\nprint(456)\n# Example 6",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "cost = rate * seconds / Decimal(60)\nprint(cost)\n# Example 4\nprint(Decimal('1.45'))\nprint(Decimal(1.45))\n# Example 5\nprint('456')\nprint(456)\n# Example 6\nrate = Decimal('0.05')",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "rate = Decimal('0.05')\nseconds = Decimal('5')\nsmall_cost = rate * seconds / Decimal(60)\nprint(small_cost)\n# Example 7\nprint(round(small_cost, 2))\n# Example 8\nfrom decimal import ROUND_UP\nrounded = cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {cost} to {rounded}')",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "seconds = Decimal('5')\nsmall_cost = rate * seconds / Decimal(60)\nprint(small_cost)\n# Example 7\nprint(round(small_cost, 2))\n# Example 8\nfrom decimal import ROUND_UP\nrounded = cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {cost} to {rounded}')\n# Example 9",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "small_cost",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "small_cost = rate * seconds / Decimal(60)\nprint(small_cost)\n# Example 7\nprint(round(small_cost, 2))\n# Example 8\nfrom decimal import ROUND_UP\nrounded = cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {cost} to {rounded}')\n# Example 9\nrounded = small_cost.quantize(Decimal('0.01'), rounding=ROUND_UP)",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "rounded",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "rounded = cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {cost} to {rounded}')\n# Example 9\nrounded = small_cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {small_cost} to {rounded}')",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "rounded",
        "kind": 5,
        "importPath": "example_code.item_69",
        "description": "example_code.item_69",
        "peekOfCode": "rounded = small_cost.quantize(Decimal('0.01'), rounding=ROUND_UP)\nprint(f'Rounded {small_cost} to {rounded}')",
        "detail": "example_code.item_69",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef insertion_sort(data):\n    result = []\n    for value in data:",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def insertion_sort(data):\n    result = []\n    for value in data:\n        insert_value(result, value)\n    return result\n# Example 2\ndef insert_value(array, value):\n    for i, existing in enumerate(array):\n        if existing > value:\n            array.insert(i, value)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "insert_value",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def insert_value(array, value):\n    for i, existing in enumerate(array):\n        if existing > value:\n            array.insert(i, value)\n            return\n    array.append(value)\n# Example 3\nfrom random import randint\nmax_size = 10**4\ndata = [randint(0, max_size) for _ in range(max_size)]",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "insert_value",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def insert_value(array, value):\n    i = bisect_left(array, value)\n    array.insert(i, value)\n# Example 7\nprofiler = Profile()\nprofiler.runcall(test)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "my_utility",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def my_utility(a, b):\n    c = 1\n    for i in range(100):\n        c += a * b\ndef first_func():\n    for _ in range(1000):\n        my_utility(4, 5)\ndef second_func():\n    for _ in range(10):\n        my_utility(1, 3)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "first_func",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def first_func():\n    for _ in range(1000):\n        my_utility(4, 5)\ndef second_func():\n    for _ in range(10):\n        my_utility(1, 3)\ndef my_program():\n    for _ in range(20):\n        first_func()\n        second_func()",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "second_func",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def second_func():\n    for _ in range(10):\n        my_utility(1, 3)\ndef my_program():\n    for _ in range(20):\n        first_func()\n        second_func()\n# Example 9\nprofiler = Profile()\nprofiler.runcall(my_program)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "my_program",
        "kind": 2,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "def my_program():\n    for _ in range(20):\n        first_func()\n        second_func()\n# Example 9\nprofiler = Profile()\nprofiler.runcall(my_program)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "max_size",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "max_size = 10**4\ndata = [randint(0, max_size) for _ in range(max_size)]\ntest = lambda: insertion_sort(data)\n# Example 4\nfrom cProfile import Profile\nprofiler = Profile()\nprofiler.runcall(test)\n# Example 5\nfrom pstats import Stats\nstats = Stats(profiler)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "data = [randint(0, max_size) for _ in range(max_size)]\ntest = lambda: insertion_sort(data)\n# Example 4\nfrom cProfile import Profile\nprofiler = Profile()\nprofiler.runcall(test)\n# Example 5\nfrom pstats import Stats\nstats = Stats(profiler)\nstats = Stats(profiler, stream=STDOUT)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "test = lambda: insertion_sort(data)\n# Example 4\nfrom cProfile import Profile\nprofiler = Profile()\nprofiler.runcall(test)\n# Example 5\nfrom pstats import Stats\nstats = Stats(profiler)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "profiler",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "profiler = Profile()\nprofiler.runcall(test)\n# Example 5\nfrom pstats import Stats\nstats = Stats(profiler)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 6",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "stats = Stats(profiler)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 6\nfrom bisect import bisect_left\ndef insert_value(array, value):\n    i = bisect_left(array, value)\n    array.insert(i, value)",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "stats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 6\nfrom bisect import bisect_left\ndef insert_value(array, value):\n    i = bisect_left(array, value)\n    array.insert(i, value)\n# Example 7",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "profiler",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "profiler = Profile()\nprofiler.runcall(test)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 8\ndef my_utility(a, b):\n    c = 1\n    for i in range(100):",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "stats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 8\ndef my_utility(a, b):\n    c = 1\n    for i in range(100):\n        c += a * b\ndef first_func():",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "profiler",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "profiler = Profile()\nprofiler.runcall(my_program)\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 10\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "stats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_stats()\n# Example 10\nstats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_callers()",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "example_code.item_70",
        "description": "example_code.item_70",
        "peekOfCode": "stats = Stats(profiler, stream=STDOUT)\nstats.strip_dirs()\nstats.sort_stats('cumulative')\nstats.print_callers()",
        "detail": "example_code.item_70",
        "documentation": {}
    },
    {
        "label": "Email",
        "kind": 6,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "class Email:\n    def __init__(self, sender, receiver, message):\n        self.sender = sender\n        self.receiver = receiver\n        self.message = message\n# Example 2\ndef get_emails():\n    yield Email('foo@example.com', 'bar@example.com', 'hello1')\n    yield Email('baz@example.com', 'banana@example.com', 'hello2')\n    yield None",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "NoEmailError",
        "kind": 6,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "class NoEmailError(Exception):\n    pass\ndef try_receive_email():\n    # Returns an Email instance or raises NoEmailError\n    try:\n        email = next(EMAIL_IT)\n    except StopIteration:\n        email = None\n    if not email:\n        raise NoEmailError",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Email:\n    def __init__(self, sender, receiver, message):\n        self.sender = sender",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "get_emails",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def get_emails():\n    yield Email('foo@example.com', 'bar@example.com', 'hello1')\n    yield Email('baz@example.com', 'banana@example.com', 'hello2')\n    yield None\n    yield Email('meep@example.com', 'butter@example.com', 'hello3')\n    yield Email('stuff@example.com', 'avocado@example.com', 'hello4')\n    yield None\n    yield Email('thingy@example.com', 'orange@example.com', 'hello5')\n    yield Email('roger@example.com', 'bob@example.com', 'hello6')\n    yield None",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "try_receive_email",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def try_receive_email():\n    # Returns an Email instance or raises NoEmailError\n    try:\n        email = next(EMAIL_IT)\n    except StopIteration:\n        email = None\n    if not email:\n        raise NoEmailError\n    print(f'Produced email: {email.message}')\n    return email",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "produce_emails",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def produce_emails(queue):\n    while True:\n        try:\n            email = try_receive_email()\n        except NoEmailError:\n            return\n        else:\n            queue.append(email)  # Producer\n# Example 4\ndef consume_one_email(queue):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "consume_one_email",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def consume_one_email(queue):\n    if not queue:\n        return\n    email = queue.pop(0)  # Consumer\n    # Index the message for long-term archival\n    print(f'Consumed email: {email.message}')\n# Example 5\ndef loop(queue, keep_running):\n    while keep_running():\n        produce_emails(queue)",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def loop(queue, keep_running):\n    while keep_running():\n        produce_emails(queue)\n        consume_one_email(queue)\ndef make_test_end():\n    count=list(range(10))\n    def func():\n        if count:\n            count.pop()\n            return True",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "make_test_end",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def make_test_end():\n    count=list(range(10))\n    def func():\n        if count:\n            count.pop()\n            return True\n        return False\n    return func\ndef my_end_func():\n    pass",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "my_end_func",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def my_end_func():\n    pass\nmy_end_func = make_test_end()\nloop([], my_end_func)\n# Example 6\nimport timeit\ndef print_results(count, tests):\n    avg_iteration = sum(tests) / len(tests)\n    print(f'Count {count:>5,} takes {avg_iteration:.6f}s')\n    return count, avg_iteration",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def print_results(count, tests):\n    avg_iteration = sum(tests) / len(tests)\n    print(f'Count {count:>5,} takes {avg_iteration:.6f}s')\n    return count, avg_iteration\ndef list_append_benchmark(count):\n    def run(queue):\n        for i in range(count):\n            queue.append(i)\n    tests = timeit.repeat(\n        setup='queue = []',",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "list_append_benchmark",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def list_append_benchmark(count):\n    def run(queue):\n        for i in range(count):\n            queue.append(i)\n    tests = timeit.repeat(\n        setup='queue = []',\n        stmt='run(queue)',\n        globals=locals(),\n        repeat=1000,\n        number=1)",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "print_delta",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def print_delta(before, after):\n    before_count, before_time = before\n    after_count, after_time = after\n    growth = 1 + (after_count - before_count) / before_count\n    slowdown = 1 + (after_time - before_time) / before_time\n    print(f'{growth:>4.1f}x data size, {slowdown:>4.1f}x time')\nbaseline = list_append_benchmark(500)\nfor count in (1_000, 2_000, 3_000, 4_000, 5_000):\n    print()\n    comparison = list_append_benchmark(count)",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "list_pop_benchmark",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def list_pop_benchmark(count):\n    def prepare():\n        return list(range(count))\n    def run(queue):\n        while queue:\n            queue.pop(0)\n    tests = timeit.repeat(\n        setup='queue = prepare()',\n        stmt='run(queue)',\n        globals=locals(),",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "consume_one_email",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def consume_one_email(queue):\n    if not queue:\n        return\n    email = queue.popleft()  # Consumer\n    # Process the email message\n    print(f'Consumed email: {email.message}')\ndef my_end_func():\n    pass\nmy_end_func = make_test_end()\nEMAIL_IT = get_emails()",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "my_end_func",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def my_end_func():\n    pass\nmy_end_func = make_test_end()\nEMAIL_IT = get_emails()\nloop(collections.deque(), my_end_func)\n# Example 11\ndef deque_append_benchmark(count):\n    def prepare():\n        return collections.deque()\n    def run(queue):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "deque_append_benchmark",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def deque_append_benchmark(count):\n    def prepare():\n        return collections.deque()\n    def run(queue):\n        for i in range(count):\n            queue.append(i)\n    tests = timeit.repeat(\n        setup='queue = prepare()',\n        stmt='run(queue)',\n        globals=locals(),",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "dequeue_popleft_benchmark",
        "kind": 2,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "def dequeue_popleft_benchmark(count):\n    def prepare():\n        return collections.deque(range(count))\n    def run(queue):\n        while queue:\n            queue.popleft()\n    tests = timeit.repeat(\n        setup='queue = prepare()',\n        stmt='run(queue)',\n        globals=locals(),",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "EMAIL_IT",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "EMAIL_IT = get_emails()\nclass NoEmailError(Exception):\n    pass\ndef try_receive_email():\n    # Returns an Email instance or raises NoEmailError\n    try:\n        email = next(EMAIL_IT)\n    except StopIteration:\n        email = None\n    if not email:",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "my_end_func",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "my_end_func = make_test_end()\nloop([], my_end_func)\n# Example 6\nimport timeit\ndef print_results(count, tests):\n    avg_iteration = sum(tests) / len(tests)\n    print(f'Count {count:>5,} takes {avg_iteration:.6f}s')\n    return count, avg_iteration\ndef list_append_benchmark(count):\n    def run(queue):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "baseline = list_append_benchmark(500)\nfor count in (1_000, 2_000, 3_000, 4_000, 5_000):\n    print()\n    comparison = list_append_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 8\ndef list_pop_benchmark(count):\n    def prepare():\n        return list(range(count))\n    def run(queue):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "baseline = list_pop_benchmark(500)\nfor count in (1_000, 2_000, 3_000, 4_000, 5_000):\n    print()\n    comparison = list_pop_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 10\nimport collections\ndef consume_one_email(queue):\n    if not queue:\n        return",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "my_end_func",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "my_end_func = make_test_end()\nEMAIL_IT = get_emails()\nloop(collections.deque(), my_end_func)\n# Example 11\ndef deque_append_benchmark(count):\n    def prepare():\n        return collections.deque()\n    def run(queue):\n        for i in range(count):\n            queue.append(i)",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "EMAIL_IT",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "EMAIL_IT = get_emails()\nloop(collections.deque(), my_end_func)\n# Example 11\ndef deque_append_benchmark(count):\n    def prepare():\n        return collections.deque()\n    def run(queue):\n        for i in range(count):\n            queue.append(i)\n    tests = timeit.repeat(",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "baseline = deque_append_benchmark(500)\nfor count in (1_000, 2_000, 3_000, 4_000, 5_000):\n    print()\n    comparison = deque_append_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 12\ndef dequeue_popleft_benchmark(count):\n    def prepare():\n        return collections.deque(range(count))\n    def run(queue):",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_71",
        "description": "example_code.item_71",
        "peekOfCode": "baseline = dequeue_popleft_benchmark(500)\nfor count in (1_000, 2_000, 3_000, 4_000, 5_000):\n    print()\n    comparison = dequeue_popleft_benchmark(count)\n    print_delta(baseline, comparison)",
        "detail": "example_code.item_71",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndata = list(range(10**5))\nindex = data.index(91234)\nassert index == 91234",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "find_closest",
        "kind": 2,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "def find_closest(sequence, goal):\n    for index, value in enumerate(sequence):\n        if goal < value:\n            return index\n    raise ValueError(f'{goal} is out of bounds')\nindex = find_closest(data, 91234.56)\nassert index == 91235\ntry:\n    find_closest(data, 100000000)\nexcept ValueError:",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "run_linear",
        "kind": 2,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "def run_linear(data, to_lookup):\n    for index in to_lookup:\n        data.index(index)\ndef run_bisect(data, to_lookup):\n    for index in to_lookup:\n        bisect_left(data, index)\nbaseline = timeit.timeit(\n    stmt='run_linear(data, to_lookup)',\n    globals=globals(),\n    number=10)",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "run_bisect",
        "kind": 2,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "def run_bisect(data, to_lookup):\n    for index in to_lookup:\n        bisect_left(data, index)\nbaseline = timeit.timeit(\n    stmt='run_linear(data, to_lookup)',\n    globals=globals(),\n    number=10)\nprint(f'Linear search takes {baseline:.6f}s')\ncomparison = timeit.timeit(\n    stmt='run_bisect(data, to_lookup)',",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "data = list(range(10**5))\nindex = data.index(91234)\nassert index == 91234\n# Example 2\ndef find_closest(sequence, goal):\n    for index, value in enumerate(sequence):\n        if goal < value:\n            return index\n    raise ValueError(f'{goal} is out of bounds')\nindex = find_closest(data, 91234.56)",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "index = data.index(91234)\nassert index == 91234\n# Example 2\ndef find_closest(sequence, goal):\n    for index, value in enumerate(sequence):\n        if goal < value:\n            return index\n    raise ValueError(f'{goal} is out of bounds')\nindex = find_closest(data, 91234.56)\nassert index == 91235",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "index = find_closest(data, 91234.56)\nassert index == 91235\ntry:\n    find_closest(data, 100000000)\nexcept ValueError:\n    pass  # Expected\nelse:\n    assert False\n# Example 3\nfrom bisect import bisect_left",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "index = bisect_left(data, 91234)     # Exact match\nassert index == 91234\nindex = bisect_left(data, 91234.56)  # Closest match\nassert index == 91235\n# Example 4\nimport random\nimport timeit\nsize = 10**5\niterations = 1000\ndata = list(range(size))",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "index = bisect_left(data, 91234.56)  # Closest match\nassert index == 91235\n# Example 4\nimport random\nimport timeit\nsize = 10**5\niterations = 1000\ndata = list(range(size))\nto_lookup = [random.randint(0, size)\n             for _ in range(iterations)]",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "size = 10**5\niterations = 1000\ndata = list(range(size))\nto_lookup = [random.randint(0, size)\n             for _ in range(iterations)]\ndef run_linear(data, to_lookup):\n    for index in to_lookup:\n        data.index(index)\ndef run_bisect(data, to_lookup):\n    for index in to_lookup:",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "iterations",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "iterations = 1000\ndata = list(range(size))\nto_lookup = [random.randint(0, size)\n             for _ in range(iterations)]\ndef run_linear(data, to_lookup):\n    for index in to_lookup:\n        data.index(index)\ndef run_bisect(data, to_lookup):\n    for index in to_lookup:\n        bisect_left(data, index)",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "data = list(range(size))\nto_lookup = [random.randint(0, size)\n             for _ in range(iterations)]\ndef run_linear(data, to_lookup):\n    for index in to_lookup:\n        data.index(index)\ndef run_bisect(data, to_lookup):\n    for index in to_lookup:\n        bisect_left(data, index)\nbaseline = timeit.timeit(",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "to_lookup",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "to_lookup = [random.randint(0, size)\n             for _ in range(iterations)]\ndef run_linear(data, to_lookup):\n    for index in to_lookup:\n        data.index(index)\ndef run_bisect(data, to_lookup):\n    for index in to_lookup:\n        bisect_left(data, index)\nbaseline = timeit.timeit(\n    stmt='run_linear(data, to_lookup)',",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "baseline = timeit.timeit(\n    stmt='run_linear(data, to_lookup)',\n    globals=globals(),\n    number=10)\nprint(f'Linear search takes {baseline:.6f}s')\ncomparison = timeit.timeit(\n    stmt='run_bisect(data, to_lookup)',\n    globals=globals(),\n    number=10)\nprint(f'Bisect search takes {comparison:.6f}s')",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "comparison",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "comparison = timeit.timeit(\n    stmt='run_bisect(data, to_lookup)',\n    globals=globals(),\n    number=10)\nprint(f'Bisect search takes {comparison:.6f}s')\nslowdown = 1 + ((baseline - comparison) / comparison)\nprint(f'{slowdown:.1f}x time')",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "slowdown",
        "kind": 5,
        "importPath": "example_code.item_72",
        "description": "example_code.item_72",
        "peekOfCode": "slowdown = 1 + ((baseline - comparison) / comparison)\nprint(f'{slowdown:.1f}x time')",
        "detail": "example_code.item_72",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "class Book:\n    def __init__(self, title, due_date):\n        self.title = title\n        self.due_date = due_date\n# Example 2\ndef add_book(queue, book):\n    queue.append(book)\n    queue.sort(key=lambda x: x.due_date, reverse=True)\nqueue = []\nadd_book(queue, Book('Don Quixote', '2019-06-07'))",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "NoOverdueBooks",
        "kind": 6,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "class NoOverdueBooks(Exception):\n    pass\ndef next_overdue_book(queue, now):\n    if queue:\n        book = queue[-1]\n        if book.due_date < now:\n            queue.pop()\n            return book\n    raise NoOverdueBooks\n# Example 4",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "class Book:\n    def __init__(self, title, due_date):\n        self.title = title\n        self.due_date = due_date\n    def __lt__(self, other):\n        return self.due_date < other.due_date\n# Example 14\nqueue = []\nadd_book(queue, Book('Pride and Prejudice', '2019-06-01'))\nadd_book(queue, Book('The Time Machine', '2019-05-30'))",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "class Book:\n    def __init__(self, title, due_date):\n        self.title = title\n        self.due_date = due_date\n        self.returned = False  # New field\n    def __lt__(self, other):\n        return self.due_date < other.due_date\n# Example 22\ndef next_overdue_book(queue, now):\n    while queue:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass Book:\n    def __init__(self, title, due_date):\n        self.title = title",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "add_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def add_book(queue, book):\n    queue.append(book)\n    queue.sort(key=lambda x: x.due_date, reverse=True)\nqueue = []\nadd_book(queue, Book('Don Quixote', '2019-06-07'))\nadd_book(queue, Book('Frankenstein', '2019-06-05'))\nadd_book(queue, Book('Les Misérables', '2019-06-08'))\nadd_book(queue, Book('War and Peace', '2019-06-03'))\n# Example 3\nclass NoOverdueBooks(Exception):",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "next_overdue_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def next_overdue_book(queue, now):\n    if queue:\n        book = queue[-1]\n        if book.due_date < now:\n            queue.pop()\n            return book\n    raise NoOverdueBooks\n# Example 4\nnow = '2019-06-10'\nfound = next_overdue_book(queue, now)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "return_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def return_book(queue, book):\n    queue.remove(book)\nqueue = []\nbook = Book('Treasure Island', '2019-06-04')\nadd_book(queue, book)\nprint('Before return:', [x.title for x in queue])\nreturn_book(queue, book)\nprint('After return: ', [x.title for x in queue])\n# Example 6\ntry:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def print_results(count, tests):\n    avg_iteration = sum(tests) / len(tests)\n    print(f'Count {count:>5,} takes {avg_iteration:.6f}s')\n    return count, avg_iteration\ndef print_delta(before, after):\n    before_count, before_time = before\n    after_count, after_time = after\n    growth = 1 + (after_count - before_count) / before_count\n    slowdown = 1 + (after_time - before_time) / before_time\n    print(f'{growth:>4.1f}x data size, {slowdown:>4.1f}x time')",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "print_delta",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def print_delta(before, after):\n    before_count, before_time = before\n    after_count, after_time = after\n    growth = 1 + (after_count - before_count) / before_count\n    slowdown = 1 + (after_time - before_time) / before_time\n    print(f'{growth:>4.1f}x data size, {slowdown:>4.1f}x time')\ndef list_overdue_benchmark(count):\n    def prepare():\n        to_add = list(range(count))\n        random.shuffle(to_add)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "list_overdue_benchmark",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def list_overdue_benchmark(count):\n    def prepare():\n        to_add = list(range(count))\n        random.shuffle(to_add)\n        return [], to_add\n    def run(queue, to_add):\n        for i in to_add:\n            queue.append(i)\n            queue.sort(reverse=True)\n        while queue:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "list_return_benchmark",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def list_return_benchmark(count):\n    def prepare():\n        queue = list(range(count))\n        random.shuffle(queue)\n        to_return = list(range(count))\n        random.shuffle(to_return)\n        return queue, to_return\n    def run(queue, to_return):\n        for i in to_return:\n            queue.remove(i)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "add_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def add_book(queue, book):\n    heappush(queue, book)\n# Example 12\ntry:\n    queue = []\n    add_book(queue, Book('Little Women', '2019-06-05'))\n    add_book(queue, Book('The Time Machine', '2019-05-30'))\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "next_overdue_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def next_overdue_book(queue, now):\n    if queue:\n        book = queue[0]           # Most overdue first\n        if book.due_date < now:\n            heappop(queue)        # Remove the overdue book\n            return book\n    raise NoOverdueBooks\n# Example 18\nnow = '2019-06-02'\nbook = next_overdue_book(queue, now)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "heap_overdue_benchmark",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def heap_overdue_benchmark(count):\n    def prepare():\n        to_add = list(range(count))\n        random.shuffle(to_add)\n        return [], to_add\n    def run(queue, to_add):\n        for i in to_add:\n            heappush(queue, i)\n        while queue:\n            heappop(queue)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "next_overdue_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def next_overdue_book(queue, now):\n    while queue:\n        book = queue[0]\n        if book.returned:\n            heappop(queue)\n            continue\n        if book.due_date < now:\n            heappop(queue)\n            return book\n        break",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "return_book",
        "kind": 2,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "def return_book(queue, book):\n    book.returned = True\nassert not book.returned\nreturn_book(queue, book)\nassert book.returned",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = []\nadd_book(queue, Book('Don Quixote', '2019-06-07'))\nadd_book(queue, Book('Frankenstein', '2019-06-05'))\nadd_book(queue, Book('Les Misérables', '2019-06-08'))\nadd_book(queue, Book('War and Peace', '2019-06-03'))\n# Example 3\nclass NoOverdueBooks(Exception):\n    pass\ndef next_overdue_book(queue, now):\n    if queue:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "now = '2019-06-10'\nfound = next_overdue_book(queue, now)\nprint(found.title)\nfound = next_overdue_book(queue, now)\nprint(found.title)\n# Example 5\ndef return_book(queue, book):\n    queue.remove(book)\nqueue = []\nbook = Book('Treasure Island', '2019-06-04')",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "found = next_overdue_book(queue, now)\nprint(found.title)\nfound = next_overdue_book(queue, now)\nprint(found.title)\n# Example 5\ndef return_book(queue, book):\n    queue.remove(book)\nqueue = []\nbook = Book('Treasure Island', '2019-06-04')\nadd_book(queue, book)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "found = next_overdue_book(queue, now)\nprint(found.title)\n# Example 5\ndef return_book(queue, book):\n    queue.remove(book)\nqueue = []\nbook = Book('Treasure Island', '2019-06-04')\nadd_book(queue, book)\nprint('Before return:', [x.title for x in queue])\nreturn_book(queue, book)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = []\nbook = Book('Treasure Island', '2019-06-04')\nadd_book(queue, book)\nprint('Before return:', [x.title for x in queue])\nreturn_book(queue, book)\nprint('After return: ', [x.title for x in queue])\n# Example 6\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = Book('Treasure Island', '2019-06-04')\nadd_book(queue, book)\nprint('Before return:', [x.title for x in queue])\nreturn_book(queue, book)\nprint('After return: ', [x.title for x in queue])\n# Example 6\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "baseline = list_overdue_benchmark(500)\nfor count in (1_000, 1_500, 2_000):\n    print()\n    comparison = list_overdue_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 9\ndef list_return_benchmark(count):\n    def prepare():\n        queue = list(range(count))\n        random.shuffle(queue)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "baseline = list_return_benchmark(500)\nfor count in (1_000, 1_500, 2_000):\n    print()\n    comparison = list_return_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 11\nfrom heapq import heappush\ndef add_book(queue, book):\n    heappush(queue, book)\n# Example 12",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = []\nadd_book(queue, Book('Pride and Prejudice', '2019-06-01'))\nadd_book(queue, Book('The Time Machine', '2019-05-30'))\nadd_book(queue, Book('Crime and Punishment', '2019-06-06'))\nadd_book(queue, Book('Wuthering Heights', '2019-06-12'))\nprint([b.title for b in queue])\n# Example 15\nqueue = [\n    Book('Pride and Prejudice', '2019-06-01'),\n    Book('The Time Machine', '2019-05-30'),",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = [\n    Book('Pride and Prejudice', '2019-06-01'),\n    Book('The Time Machine', '2019-05-30'),\n    Book('Crime and Punishment', '2019-06-06'),\n    Book('Wuthering Heights', '2019-06-12'),\n]\nqueue.sort()\nprint([b.title for b in queue])\n# Example 16\nfrom heapq import heapify",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = [\n    Book('Pride and Prejudice', '2019-06-01'),\n    Book('The Time Machine', '2019-05-30'),\n    Book('Crime and Punishment', '2019-06-06'),\n    Book('Wuthering Heights', '2019-06-12'),\n]\nheapify(queue)\nprint([b.title for b in queue])\n# Example 17\nfrom heapq import heappop",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "now = '2019-06-02'\nbook = next_overdue_book(queue, now)\nprint(book.title)\nbook = next_overdue_book(queue, now)\nprint(book.title)\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = next_overdue_book(queue, now)\nprint(book.title)\nbook = next_overdue_book(queue, now)\nprint(book.title)\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:\n    assert False  # Doesn't happen",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = next_overdue_book(queue, now)\nprint(book.title)\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:\n    assert False  # Doesn't happen\n# Example 19\ndef heap_overdue_benchmark(count):",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "baseline",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "baseline = heap_overdue_benchmark(500)\nfor count in (1_000, 1_500, 2_000):\n    print()\n    comparison = heap_overdue_benchmark(count)\n    print_delta(baseline, comparison)\n# Example 21\n@functools.total_ordering\nclass Book:\n    def __init__(self, title, due_date):\n        self.title = title",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "queue = []\nbook = Book('Pride and Prejudice', '2019-06-01')\nadd_book(queue, book)\nbook = Book('The Time Machine', '2019-05-30')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Crime and Punishment', '2019-06-06')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = Book('Pride and Prejudice', '2019-06-01')\nadd_book(queue, book)\nbook = Book('The Time Machine', '2019-05-30')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Crime and Punishment', '2019-06-06')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = Book('The Time Machine', '2019-05-30')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Crime and Punishment', '2019-06-06')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)\nnow = '2019-06-11'\nbook = next_overdue_book(queue, now)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book.returned",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book.returned = True\nbook = Book('Crime and Punishment', '2019-06-06')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)\nnow = '2019-06-11'\nbook = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = Book('Crime and Punishment', '2019-06-06')\nadd_book(queue, book)\nbook.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)\nnow = '2019-06-11'\nbook = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:\n    next_overdue_book(queue, now)",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book.returned",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book.returned = True\nbook = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)\nnow = '2019-06-11'\nbook = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = Book('Wuthering Heights', '2019-06-12')\nadd_book(queue, book)\nnow = '2019-06-11'\nbook = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "now = '2019-06-11'\nbook = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:\n    assert False  # Doesn't happen\n# Example 23",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "example_code.item_73",
        "description": "example_code.item_73",
        "peekOfCode": "book = next_overdue_book(queue, now)\nassert book.title == 'Pride and Prejudice'\ntry:\n    next_overdue_book(queue, now)\nexcept NoOverdueBooks:\n    pass          # Expected\nelse:\n    assert False  # Doesn't happen\n# Example 23\ndef return_book(queue, book):",
        "detail": "example_code.item_73",
        "documentation": {}
    },
    {
        "label": "NullSocket",
        "kind": 6,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "class NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):\n        self.handle.write(data)\nsocket = ...             # socket connection to client\nvideo_data = ...         # bytes containing data for video_id\nbyte_offset = ...        # Requested starting position\nsize = 20 * 1024 * 1024  # Requested chunk size\nimport os",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "FakeSocket",
        "kind": 6,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "class FakeSocket:\n    def recv(self, size):\n        return video_view[byte_offset:byte_offset+size]\n    def recv_into(self, buffer):\n        source_data = video_view[byte_offset:byte_offset+size]\n        buffer[:] = source_data\nsocket = ...        # socket connection to the client\nvideo_cache = ...   # Cache of incoming video stream\nbyte_offset = ...   # Incoming buffer position\nsize = 1024 * 1024  # Incoming chunk size",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef timecode_to_index(video_id, timecode):\n    return 1234\n    # Returns the byte offset in the video data",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "timecode_to_index",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def timecode_to_index(video_id, timecode):\n    return 1234\n    # Returns the byte offset in the video data\ndef request_chunk(video_id, byte_offset, size):\n    pass\n    # Returns size bytes of video_id's data from the offset\nvideo_id = ...\ntimecode = '01:09:14:28'\nbyte_offset = timecode_to_index(video_id, timecode)\nsize = 20 * 1024 * 1024",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "request_chunk",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def request_chunk(video_id, byte_offset, size):\n    pass\n    # Returns size bytes of video_id's data from the offset\nvideo_id = ...\ntimecode = '01:09:14:28'\nbyte_offset = timecode_to_index(video_id, timecode)\nsize = 20 * 1024 * 1024\nvideo_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def run_test():\n    chunk = video_data[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 4\ndata = b'shave and a haircut, two bits'",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def run_test():\n    chunk = video_view[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 6\nclass FakeSocket:",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]\n    new_cache = b''.join([before, chunk, after])\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "def run_test():\n    chunk = write_view[byte_offset:byte_offset + size]\n    socket.recv_into(chunk)\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_id",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_id = ...\ntimecode = '01:09:14:28'\nbyte_offset = timecode_to_index(video_id, timecode)\nsize = 20 * 1024 * 1024\nvideo_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "timecode",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "timecode = '01:09:14:28'\nbyte_offset = timecode_to_index(video_id, timecode)\nsize = 20 * 1024 * 1024\nvideo_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):\n        self.handle.write(data)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "byte_offset",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "byte_offset = timecode_to_index(video_id, timecode)\nsize = 20 * 1024 * 1024\nvideo_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):\n        self.handle.write(data)\nsocket = ...             # socket connection to client",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "size = 20 * 1024 * 1024\nvideo_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):\n        self.handle.write(data)\nsocket = ...             # socket connection to client\nvideo_data = ...         # bytes containing data for video_id",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_data",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_data = request_chunk(video_id, byte_offset, size)\n# Example 2\nclass NullSocket:\n    def __init__(self):\n        self.handle = open(os.devnull, 'wb')\n    def send(self, data):\n        self.handle.write(data)\nsocket = ...             # socket connection to client\nvideo_data = ...         # bytes containing data for video_id\nbyte_offset = ...        # Requested starting position",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "socket = ...             # socket connection to client\nvideo_data = ...         # bytes containing data for video_id\nbyte_offset = ...        # Requested starting position\nsize = 20 * 1024 * 1024  # Requested chunk size\nimport os\nsocket = NullSocket()\nvideo_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_data",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_data = ...         # bytes containing data for video_id\nbyte_offset = ...        # Requested starting position\nsize = 20 * 1024 * 1024  # Requested chunk size\nimport os\nsocket = NullSocket()\nvideo_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "byte_offset",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "byte_offset = ...        # Requested starting position\nsize = 20 * 1024 * 1024  # Requested chunk size\nimport os\nsocket = NullSocket()\nvideo_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "size = 20 * 1024 * 1024  # Requested chunk size\nimport os\nsocket = NullSocket()\nvideo_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit\ndef run_test():",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "socket = NullSocket()\nvideo_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit\ndef run_test():\n    chunk = video_data[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_data",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_data = 100 * os.urandom(1024 * 1024)\nbyte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit\ndef run_test():\n    chunk = video_data[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "byte_offset",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "byte_offset = 1234\nchunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit\ndef run_test():\n    chunk = video_data[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(\n    stmt='run_test()',",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "chunk",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "chunk = video_data[byte_offset:byte_offset + size]\nsocket.send(chunk)\n# Example 3\nimport timeit\ndef run_test():\n    chunk = video_data[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "result = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 4\ndata = b'shave and a haircut, two bits'\nview = memoryview(data)\nchunk = view[12:19]\nprint(chunk)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "data = b'shave and a haircut, two bits'\nview = memoryview(data)\nchunk = view[12:19]\nprint(chunk)\nprint('Size:           ', chunk.nbytes)\nprint('Data in view:   ', chunk.tobytes())\nprint('Underlying data:', chunk.obj)\n# Example 5\nvideo_view = memoryview(video_data)\ndef run_test():",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "view = memoryview(data)\nchunk = view[12:19]\nprint(chunk)\nprint('Size:           ', chunk.nbytes)\nprint('Data in view:   ', chunk.tobytes())\nprint('Underlying data:', chunk.obj)\n# Example 5\nvideo_view = memoryview(video_data)\ndef run_test():\n    chunk = video_view[byte_offset:byte_offset + size]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "chunk",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "chunk = view[12:19]\nprint(chunk)\nprint('Size:           ', chunk.nbytes)\nprint('Data in view:   ', chunk.tobytes())\nprint('Underlying data:', chunk.obj)\n# Example 5\nvideo_view = memoryview(video_data)\ndef run_test():\n    chunk = video_view[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_view = memoryview(video_data)\ndef run_test():\n    chunk = video_view[byte_offset:byte_offset + size]\n    # Call socket.send(chunk), but ignoring for benchmark\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 6",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "result = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 6\nclass FakeSocket:\n    def recv(self, size):\n        return video_view[byte_offset:byte_offset+size]\n    def recv_into(self, buffer):",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "socket = ...        # socket connection to the client\nvideo_cache = ...   # Cache of incoming video stream\nbyte_offset = ...   # Incoming buffer position\nsize = 1024 * 1024  # Incoming chunk size\nsocket = FakeSocket()\nvideo_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_cache",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_cache = ...   # Cache of incoming video stream\nbyte_offset = ...   # Incoming buffer position\nsize = 1024 * 1024  # Incoming chunk size\nsocket = FakeSocket()\nvideo_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "byte_offset",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "byte_offset = ...   # Incoming buffer position\nsize = 1024 * 1024  # Incoming chunk size\nsocket = FakeSocket()\nvideo_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "size = 1024 * 1024  # Incoming chunk size\nsocket = FakeSocket()\nvideo_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "socket = FakeSocket()\nvideo_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_cache",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_cache = video_data[:]\nbyte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "byte_offset",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "byte_offset = 1234\nchunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "chunk",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "chunk = socket.recv(size)\nvideo_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_view = memoryview(video_cache)\nbefore = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]\n    new_cache = b''.join([before, chunk, after])",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "before",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "before = video_view[:byte_offset]\nafter = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]\n    new_cache = b''.join([before, chunk, after])\nresult = timeit.timeit(",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "after",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "after = video_view[byte_offset + size:]\nnew_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]\n    new_cache = b''.join([before, chunk, after])\nresult = timeit.timeit(\n    stmt='run_test()',",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "new_cache",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "new_cache = b''.join([before, chunk, after])\n# Example 7\ndef run_test():\n    chunk = socket.recv(size)\n    before = video_view[:byte_offset]\n    after = video_view[byte_offset + size:]\n    new_cache = b''.join([before, chunk, after])\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "result = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')\n# Example 8\ntry:\n    my_bytes = b'hello'\n    my_bytes[0] = b'\\x79'\nexcept:",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "my_array",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "my_array = bytearray(b'hello')\nmy_array[0] = 0x79\nprint(my_array)\n# Example 10\nmy_array = bytearray(b'row, row, row your boat')\nmy_view = memoryview(my_array)\nwrite_view = my_view[3:13]\nwrite_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "my_array[0]",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "my_array[0] = 0x79\nprint(my_array)\n# Example 10\nmy_array = bytearray(b'row, row, row your boat')\nmy_view = memoryview(my_array)\nwrite_view = my_view[3:13]\nwrite_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11\nvideo_array = bytearray(video_cache)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "my_array",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "my_array = bytearray(b'row, row, row your boat')\nmy_view = memoryview(my_array)\nwrite_view = my_view[3:13]\nwrite_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11\nvideo_array = bytearray(video_cache)\nwrite_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "my_view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "my_view = memoryview(my_array)\nwrite_view = my_view[3:13]\nwrite_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11\nvideo_array = bytearray(video_cache)\nwrite_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "write_view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "write_view = my_view[3:13]\nwrite_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11\nvideo_array = bytearray(video_cache)\nwrite_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12\ndef run_test():",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "write_view[:]",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "write_view[:] = b'-10 bytes-'\nprint(my_array)\n# Example 11\nvideo_array = bytearray(video_cache)\nwrite_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12\ndef run_test():\n    chunk = write_view[byte_offset:byte_offset + size]",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "video_array",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "video_array = bytearray(video_cache)\nwrite_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12\ndef run_test():\n    chunk = write_view[byte_offset:byte_offset + size]\n    socket.recv_into(chunk)\nresult = timeit.timeit(\n    stmt='run_test()',",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "write_view",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "write_view = memoryview(video_array)\nchunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12\ndef run_test():\n    chunk = write_view[byte_offset:byte_offset + size]\n    socket.recv_into(chunk)\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "chunk",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "chunk = write_view[byte_offset:byte_offset + size]\nsocket.recv_into(chunk)\n# Example 12\ndef run_test():\n    chunk = write_view[byte_offset:byte_offset + size]\n    socket.recv_into(chunk)\nresult = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_74",
        "description": "example_code.item_74",
        "peekOfCode": "result = timeit.timeit(\n    stmt='run_test()',\n    globals=globals(),\n    number=100) / 100\nprint(f'{result:0.9f} seconds')",
        "detail": "example_code.item_74",
        "documentation": {}
    },
    {
        "label": "OpaqueClass",
        "kind": 6,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "class OpaqueClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nobj = OpaqueClass(1, 'foo')\nprint(obj)\n# Example 9\nclass BetterClass:\n    def __init__(self, x, y):\n        self.x = x",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "BetterClass",
        "kind": 6,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "class BetterClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f'BetterClass({self.x!r}, {self.y!r})'\n# Example 10\nobj = BetterClass(2, 'bar')\nprint(obj)\n# Example 11",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nprint('foo bar')\n# Example 2\nmy_value = 'foo bar'",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "my_value",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "my_value = 'foo bar'\nprint(str(my_value))\nprint('%s' % my_value)\nprint(f'{my_value}')\nprint(format(my_value))\nprint(my_value.__format__('s'))\nprint(my_value.__str__())\n# Example 3\nprint(5)\nprint('5')",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "int_value",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "int_value = 5\nstr_value = '5'\nprint(f'{int_value} == {str_value} ?')\n# Example 4\na = '\\x07'\nprint(repr(a))\n# Example 5\nb = eval(repr(a))\nassert a == b\n# Example 6",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "str_value",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "str_value = '5'\nprint(f'{int_value} == {str_value} ?')\n# Example 4\na = '\\x07'\nprint(repr(a))\n# Example 5\nb = eval(repr(a))\nassert a == b\n# Example 6\nprint(repr(5))",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "a = '\\x07'\nprint(repr(a))\n# Example 5\nb = eval(repr(a))\nassert a == b\n# Example 6\nprint(repr(5))\nprint(repr('5'))\n# Example 7\nprint('%r' % 5)",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "b = eval(repr(a))\nassert a == b\n# Example 6\nprint(repr(5))\nprint(repr('5'))\n# Example 7\nprint('%r' % 5)\nprint('%r' % '5')\nint_value = 5\nstr_value = '5'",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "int_value",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "int_value = 5\nstr_value = '5'\nprint(f'{int_value!r} != {str_value!r}')\n# Example 8\nclass OpaqueClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nobj = OpaqueClass(1, 'foo')\nprint(obj)",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "str_value",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "str_value = '5'\nprint(f'{int_value!r} != {str_value!r}')\n# Example 8\nclass OpaqueClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nobj = OpaqueClass(1, 'foo')\nprint(obj)\n# Example 9",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "obj = OpaqueClass(1, 'foo')\nprint(obj)\n# Example 9\nclass BetterClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f'BetterClass({self.x!r}, {self.y!r})'\n# Example 10",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "obj = BetterClass(2, 'bar')\nprint(obj)\n# Example 11\nobj = OpaqueClass(4, 'baz')\nprint(obj.__dict__)",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "example_code.item_75",
        "description": "example_code.item_75",
        "peekOfCode": "obj = OpaqueClass(4, 'baz')\nprint(obj.__dict__)",
        "detail": "example_code.item_75",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "class DatabaseConnection:\n    def __init__(self, host, port):\n        pass\nclass DatabaseConnectionError(Exception):\n    pass\ndef get_animals(database, species):\n    # Query the Database\n    raise DatabaseConnectionError('Not connected')\n    # Return a list of (name, last_mealtime) tuples\n# Example 2",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "DatabaseConnectionError",
        "kind": 6,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "class DatabaseConnectionError(Exception):\n    pass\ndef get_animals(database, species):\n    # Query the Database\n    raise DatabaseConnectionError('Not connected')\n    # Return a list of (name, last_mealtime) tuples\n# Example 2\ntry:\n    database = DatabaseConnection('localhost', '4444')\n    get_animals(database, 'Meerkat')",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass DatabaseConnection:\n    def __init__(self, host, port):\n        pass",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "get_animals",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def get_animals(database, species):\n    # Query the Database\n    raise DatabaseConnectionError('Not connected')\n    # Return a list of (name, last_mealtime) tuples\n# Example 2\ntry:\n    database = DatabaseConnection('localhost', '4444')\n    get_animals(database, 'Meerkat')\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "get_food_period",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def get_food_period(database, species):\n    # Query the Database\n    pass\n    # Return a time delta\ndef feed_animal(database, name, when):\n    # Write to the Database\n    pass\ndef do_rounds(database, species):\n    now = datetime.datetime.utcnow()\n    feeding_timedelta = get_food_period(database, species)",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "feed_animal",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def feed_animal(database, name, when):\n    # Write to the Database\n    pass\ndef do_rounds(database, species):\n    now = datetime.datetime.utcnow()\n    feeding_timedelta = get_food_period(database, species)\n    animals = get_animals(database, species)\n    fed = 0\n    for name, last_mealtime in animals:\n        if (now - last_mealtime) > feeding_timedelta:",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "do_rounds",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def do_rounds(database, species):\n    now = datetime.datetime.utcnow()\n    feeding_timedelta = get_food_period(database, species)\n    animals = get_animals(database, species)\n    fed = 0\n    for name, last_mealtime in animals:\n        if (now - last_mealtime) > feeding_timedelta:\n            feed_animal(database, name, now)\n            fed += 1\n    return fed",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "do_rounds",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def do_rounds(database, species, *,\n              now_func=datetime.utcnow,\n              food_func=get_food_period,\n              animals_func=get_animals,\n              feed_func=feed_animal):\n    now = now_func()\n    feeding_timedelta = food_func(database, species)\n    animals = animals_func(database, species)\n    fed = 0\n    for name, last_mealtime in animals:",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "get_do_rounds_time",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def get_do_rounds_time():\n    return datetime.datetime.utcnow()\ndef do_rounds(database, species):\n    now = get_do_rounds_time()\nwith patch('__main__.get_do_rounds_time'):\n    pass\n# Example 18\ndef do_rounds(database, species, *, utcnow=datetime.utcnow):\n    now = utcnow()\n    feeding_timedelta = get_food_period(database, species)",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "do_rounds",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def do_rounds(database, species):\n    now = get_do_rounds_time()\nwith patch('__main__.get_do_rounds_time'):\n    pass\n# Example 18\ndef do_rounds(database, species, *, utcnow=datetime.utcnow):\n    now = utcnow()\n    feeding_timedelta = get_food_period(database, species)\n    animals = get_animals(database, species)\n    fed = 0",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "do_rounds",
        "kind": 2,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "def do_rounds(database, species, *, utcnow=datetime.utcnow):\n    now = utcnow()\n    feeding_timedelta = get_food_period(database, species)\n    animals = get_animals(database, species)\n    fed = 0\n    for name, last_mealtime in animals:\n        if (now - last_mealtime) > feeding_timedelta:\n            feed_animal(database, name, now)\n            fed += 1\n    return fed",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "mock",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "mock = Mock(spec=get_animals)\nexpected = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nmock.return_value = expected\n# Example 4\ntry:\n    mock.does_not_exist",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "expected",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "expected = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nmock.return_value = expected\n# Example 4\ntry:\n    mock.does_not_exist\nexcept:",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "mock.return_value",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "mock.return_value = expected\n# Example 4\ntry:\n    mock.does_not_exist\nexcept:\n    logging.exception('Expected')\nelse:\n    assert False\n# Example 5\ndatabase = object()",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "database = object()\nresult = mock(database, 'Meerkat')\nassert result == expected\n# Example 6\nmock.assert_called_once_with(database, 'Meerkat')\n# Example 7\ntry:\n    mock.assert_called_once_with(database, 'Giraffe')\nexcept:\n    logging.exception('Expected')",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "result = mock(database, 'Meerkat')\nassert result == expected\n# Example 6\nmock.assert_called_once_with(database, 'Meerkat')\n# Example 7\ntry:\n    mock.assert_called_once_with(database, 'Giraffe')\nexcept:\n    logging.exception('Expected')\nelse:",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "mock",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "mock = Mock(spec=get_animals)\nmock('database 1', 'Rabbit')\nmock('database 2', 'Bison')\nmock('database 3', 'Meerkat')\nmock.assert_called_with(ANY, 'Meerkat')\n# Example 9\ntry:\n    class MyError(Exception):\n        pass\n    mock = Mock(spec=get_animals)",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "now_func",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "now_func = Mock(spec=datetime.utcnow)\nnow_func.return_value = datetime(2019, 6, 5, 15, 45)\nfood_func = Mock(spec=get_food_period)\nfood_func.return_value = timedelta(hours=3)\nanimals_func = Mock(spec=get_animals)\nanimals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "now_func.return_value",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "now_func.return_value = datetime(2019, 6, 5, 15, 45)\nfood_func = Mock(spec=get_food_period)\nfood_func.return_value = timedelta(hours=3)\nanimals_func = Mock(spec=get_animals)\nanimals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nfeed_func = Mock(spec=feed_animal)",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "food_func",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "food_func = Mock(spec=get_food_period)\nfood_func.return_value = timedelta(hours=3)\nanimals_func = Mock(spec=get_animals)\nanimals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nfeed_func = Mock(spec=feed_animal)\n# Example 13",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "food_func.return_value",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "food_func.return_value = timedelta(hours=3)\nanimals_func = Mock(spec=get_animals)\nanimals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nfeed_func = Mock(spec=feed_animal)\n# Example 13\nresult = do_rounds(",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "animals_func",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "animals_func = Mock(spec=get_animals)\nanimals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nfeed_func = Mock(spec=feed_animal)\n# Example 13\nresult = do_rounds(\n    database,",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "animals_func.return_value",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "animals_func.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 45)),\n]\nfeed_func = Mock(spec=feed_animal)\n# Example 13\nresult = do_rounds(\n    database,\n    'Meerkat',",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "feed_func",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "feed_func = Mock(spec=feed_animal)\n# Example 13\nresult = do_rounds(\n    database,\n    'Meerkat',\n    now_func=now_func,\n    food_func=food_func,\n    animals_func=animals_func,\n    feed_func=feed_func)\nassert result == 2",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_78",
        "description": "example_code.item_78",
        "peekOfCode": "result = do_rounds(\n    database,\n    'Meerkat',\n    now_func=now_func,\n    food_func=food_func,\n    animals_func=animals_func,\n    feed_func=feed_func)\nassert result == 2\n# Example 14\nfrom unittest.mock import call",
        "detail": "example_code.item_78",
        "documentation": {}
    },
    {
        "label": "ZooDatabase",
        "kind": 6,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "class ZooDatabase:\n    def get_animals(self, species):\n        pass\n    def get_food_period(self, species):\n        pass\n    def feed_animal(self, name, when):\n        pass\n# Example 2\nfrom datetime import datetime\ndef do_rounds(database, species, *, utcnow=datetime.utcnow):",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\nclass ZooDatabase:\n    def get_animals(self, species):\n        pass",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "do_rounds",
        "kind": 2,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "def do_rounds(database, species, *, utcnow=datetime.utcnow):\n    now = utcnow()\n    feeding_timedelta = database.get_food_period(species)\n    animals = database.get_animals(species)\n    fed = 0\n    for name, last_mealtime in animals:\n        if (now - last_mealtime) >= feeding_timedelta:\n            database.feed_animal(name, now)\n            fed += 1\n    return fed",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "def get_database():\n    global DATABASE\n    if DATABASE is None:\n        DATABASE = ZooDatabase()\n    return DATABASE\ndef main(argv):\n    database = get_database()\n    species = argv[1]\n    count = do_rounds(database, species)\n    print(f'Fed {count} {species}(s)')",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "def main(argv):\n    database = get_database()\n    species = argv[1]\n    count = do_rounds(database, species)\n    print(f'Fed {count} {species}(s)')\n    return 0\n# Example 8\nimport contextlib\nimport io\nfrom unittest.mock import patch",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "database = Mock(spec=ZooDatabase)\nprint(database.feed_animal)\ndatabase.feed_animal()\ndatabase.feed_animal.assert_any_call()\n# Example 4\nfrom datetime import timedelta\nfrom unittest.mock import call\nnow_func = Mock(spec=datetime.utcnow)\nnow_func.return_value = datetime(2019, 6, 5, 15, 45)\ndatabase = Mock(spec=ZooDatabase)",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "now_func",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "now_func = Mock(spec=datetime.utcnow)\nnow_func.return_value = datetime(2019, 6, 5, 15, 45)\ndatabase = Mock(spec=ZooDatabase)\ndatabase.get_food_period.return_value = timedelta(hours=3)\ndatabase.get_animals.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 55))\n]\n# Example 5",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "now_func.return_value",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "now_func.return_value = datetime(2019, 6, 5, 15, 45)\ndatabase = Mock(spec=ZooDatabase)\ndatabase.get_food_period.return_value = timedelta(hours=3)\ndatabase.get_animals.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 55))\n]\n# Example 5\nresult = do_rounds(database, 'Meerkat', utcnow=now_func)",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "database = Mock(spec=ZooDatabase)\ndatabase.get_food_period.return_value = timedelta(hours=3)\ndatabase.get_animals.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 55))\n]\n# Example 5\nresult = do_rounds(database, 'Meerkat', utcnow=now_func)\nassert result == 2",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "database.get_food_period.return_value",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "database.get_food_period.return_value = timedelta(hours=3)\ndatabase.get_animals.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 55))\n]\n# Example 5\nresult = do_rounds(database, 'Meerkat', utcnow=now_func)\nassert result == 2\ndatabase.get_food_period.assert_called_once_with('Meerkat')",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "database.get_animals.return_value",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "database.get_animals.return_value = [\n    ('Spot', datetime(2019, 6, 5, 11, 15)),\n    ('Fluffy', datetime(2019, 6, 5, 12, 30)),\n    ('Jojo', datetime(2019, 6, 5, 12, 55))\n]\n# Example 5\nresult = do_rounds(database, 'Meerkat', utcnow=now_func)\nassert result == 2\ndatabase.get_food_period.assert_called_once_with('Meerkat')\ndatabase.get_animals.assert_called_once_with('Meerkat')",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "result = do_rounds(database, 'Meerkat', utcnow=now_func)\nassert result == 2\ndatabase.get_food_period.assert_called_once_with('Meerkat')\ndatabase.get_animals.assert_called_once_with('Meerkat')\ndatabase.feed_animal.assert_has_calls(\n    [\n        call('Spot', now_func.return_value),\n        call('Fluffy', now_func.return_value),\n    ],\n    any_order=True)",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "DATABASE",
        "kind": 5,
        "importPath": "example_code.item_79",
        "description": "example_code.item_79",
        "peekOfCode": "DATABASE = None\ndef get_database():\n    global DATABASE\n    if DATABASE is None:\n        DATABASE = ZooDatabase()\n    return DATABASE\ndef main(argv):\n    database = get_database()\n    species = argv[1]\n    count = do_rounds(database, species)",
        "detail": "example_code.item_79",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "class Player:\n    \"\"\"Represents a player of the game.\n    Subclasses may override the 'tick' method to provide\n    custom animations for the player's movement depending\n    on their power level, etc.\n    Public attributes:\n    - power: Unused power-ups (float between 0 and 1).\n    - coins: Coins found during the level (integer).\n    \"\"\"\n# Example 5",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef palindrome(word):\n    \"\"\"Return True if the given word is a palindrome.\"\"\"\n    return word == word[::-1]",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "palindrome",
        "kind": 2,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "def palindrome(word):\n    \"\"\"Return True if the given word is a palindrome.\"\"\"\n    return word == word[::-1]\nassert palindrome('tacocat')\nassert not palindrome('banana')\n# Example 2\nprint(repr(palindrome.__doc__))\n# Example 3\n\"\"\"Library for finding linguistic patterns in words.\nTesting how words relate to each other can be tricky sometimes!",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "find_anagrams",
        "kind": 2,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "def find_anagrams(word, dictionary):\n    \"\"\"Find all anagrams for a word.\n    This function only runs as fast as the test for\n    membership in the 'dictionary' container.\n    Args:\n        word: String of the target word.\n        dictionary: collections.abc.Container with all\n            strings that are known to be actual words.\n    Returns:\n        List of anagrams that were found. Empty if",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_84",
        "description": "example_code.item_84",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_84",
        "documentation": {}
    },
    {
        "label": "find_anagrams",
        "kind": 2,
        "importPath": "example_code.item_84_example_06",
        "description": "example_code.item_84_example_06",
        "peekOfCode": "def find_anagrams(word: str,\n                  dictionary: Container[str]) -> List[str]:\n    pass",
        "detail": "example_code.item_84_example_06",
        "documentation": {}
    },
    {
        "label": "find_anagrams",
        "kind": 2,
        "importPath": "example_code.item_84_example_07",
        "description": "example_code.item_84_example_07",
        "peekOfCode": "def find_anagrams(word: str,\n                  dictionary: Container[str]) -> List[str]:\n    \"\"\"Find all anagrams for a word.\n    This function only runs as fast as the test for\n    membership in the 'dictionary' container.\n    Args:\n        word: Target word.\n        dictionary: All known actual words.\n    Returns:\n        Anagrams that were found.",
        "detail": "example_code.item_84_example_07",
        "documentation": {}
    },
    {
        "label": "Win32Database",
        "kind": 6,
        "importPath": "example_code.item_86",
        "description": "example_code.item_86",
        "peekOfCode": "class Win32Database:\n    pass\nclass PosixDatabase:\n    pass\nif sys.platform.startswith('win32'):\n    Database = Win32Database\nelse:\n    Database = PosixDatabase",
        "detail": "example_code.item_86",
        "documentation": {}
    },
    {
        "label": "PosixDatabase",
        "kind": 6,
        "importPath": "example_code.item_86",
        "description": "example_code.item_86",
        "peekOfCode": "class PosixDatabase:\n    pass\nif sys.platform.startswith('win32'):\n    Database = Win32Database\nelse:\n    Database = PosixDatabase",
        "detail": "example_code.item_86",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_86",
        "description": "example_code.item_86",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 4\n# db_connection.py\nimport sys\nclass Win32Database:",
        "detail": "example_code.item_86",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_86",
        "description": "example_code.item_86",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_86",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_86",
        "description": "example_code.item_86",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 4",
        "detail": "example_code.item_86",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class Error(Exception):\n    \"\"\"Base-class for all exceptions raised by this module.\"\"\"\nclass InvalidDensityError(Error):\n    \"\"\"There was a problem with a provided density value.\"\"\"\nclass InvalidVolumeError(Error):\n    \"\"\"There was a problem with the provided weight value.\"\"\"\ndef determine_weight(volume, density):\n    if density < 0:\n        raise InvalidDensityError('Density must be positive')\n    if volume < 0:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "InvalidDensityError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class InvalidDensityError(Error):\n    \"\"\"There was a problem with a provided density value.\"\"\"\nclass InvalidVolumeError(Error):\n    \"\"\"There was a problem with the provided weight value.\"\"\"\ndef determine_weight(volume, density):\n    if density < 0:\n        raise InvalidDensityError('Density must be positive')\n    if volume < 0:\n        raise InvalidVolumeError('Volume must be positive')\n    if volume == 0:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "InvalidVolumeError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class InvalidVolumeError(Error):\n    \"\"\"There was a problem with the provided weight value.\"\"\"\ndef determine_weight(volume, density):\n    if density < 0:\n        raise InvalidDensityError('Density must be positive')\n    if volume < 0:\n        raise InvalidVolumeError('Volume must be positive')\n    if volume == 0:\n        density / volume\n# Example 3",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "my_module",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class my_module:\n    Error = Error\n    InvalidDensityError = InvalidDensityError\n    @staticmethod\n    def determine_weight(volume, density):\n        if density < 0:\n            raise InvalidDensityError('Density must be positive')\n        if volume < 0:\n            raise InvalidVolumeError('Volume must be positive')\n        if volume == 0:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "NegativeDensityError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class NegativeDensityError(InvalidDensityError):\n    \"\"\"A provided density value was negative.\"\"\"\ndef determine_weight(volume, density):\n    if density < 0:\n        raise NegativeDensityError('Density must be positive')\n# Example 7\ntry:\n    my_module.NegativeDensityError = NegativeDensityError\n    my_module.determine_weight = determine_weight\n    try:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class Error(Exception):\n    \"\"\"Base-class for all exceptions raised by this module.\"\"\"\nclass WeightError(Error):\n    \"\"\"Base-class for weight calculation errors.\"\"\"\nclass VolumeError(Error):\n    \"\"\"Base-class for volume calculation errors.\"\"\"\nclass DensityError(Error):\n    \"\"\"Base-class for density calculation errors.\"\"\"",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "WeightError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class WeightError(Error):\n    \"\"\"Base-class for weight calculation errors.\"\"\"\nclass VolumeError(Error):\n    \"\"\"Base-class for volume calculation errors.\"\"\"\nclass DensityError(Error):\n    \"\"\"Base-class for density calculation errors.\"\"\"",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "VolumeError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class VolumeError(Error):\n    \"\"\"Base-class for volume calculation errors.\"\"\"\nclass DensityError(Error):\n    \"\"\"Base-class for density calculation errors.\"\"\"",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "DensityError",
        "kind": 6,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "class DensityError(Error):\n    \"\"\"Base-class for density calculation errors.\"\"\"",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\n# my_module.py\ndef determine_weight(volume, density):\n    if density <= 0:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "determine_weight",
        "kind": 2,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "def determine_weight(volume, density):\n    if density <= 0:\n        raise ValueError('Density must be positive')\ntry:\n    determine_weight(1, 0)\nexcept ValueError:\n    pass\nelse:\n    assert False\n# Example 2",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "determine_weight",
        "kind": 2,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "def determine_weight(volume, density):\n    if density < 0:\n        raise InvalidDensityError('Density must be positive')\n    if volume < 0:\n        raise InvalidVolumeError('Volume must be positive')\n    if volume == 0:\n        density / volume\n# Example 3\nclass my_module:\n    Error = Error",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "determine_weight",
        "kind": 2,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "def determine_weight(volume, density):\n    if density < 0:\n        raise NegativeDensityError('Density must be positive')\n# Example 7\ntry:\n    my_module.NegativeDensityError = NegativeDensityError\n    my_module.determine_weight = determine_weight\n    try:\n        weight = my_module.determine_weight(1, -1)\n    except my_module.NegativeDensityError:",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "SENTINEL",
        "kind": 5,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "SENTINEL = object()\nweight = SENTINEL\ntry:\n    weight = my_module.determine_weight(-1, 1)\nexcept my_module.InvalidDensityError:\n    weight = 0\nexcept my_module.Error:\n    logging.exception('Bug in the calling code')\nelse:\n    assert False",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "example_code.item_87",
        "description": "example_code.item_87",
        "peekOfCode": "weight = SENTINEL\ntry:\n    weight = my_module.determine_weight(-1, 1)\nexcept my_module.InvalidDensityError:\n    weight = 0\nexcept my_module.Error:\n    logging.exception('Bug in the calling code')\nelse:\n    assert False\nassert weight is SENTINEL",
        "detail": "example_code.item_87",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ndef print_distance(speed, duration):\n    distance = speed * duration\n    print(f'{distance} miles')",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "print_distance",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def print_distance(speed, duration):\n    distance = speed * duration\n    print(f'{distance} miles')\nprint_distance(5, 2.5)\n# Example 2\nprint_distance(1000, 3)\n# Example 3\nCONVERSIONS = {\n    'mph': 1.60934 / 3600 * 1000,   # m/s\n    'hours': 3600,                  # seconds",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def convert(value, units):\n    rate = CONVERSIONS[units]\n    return rate * value\ndef localize(value, units):\n    rate = CONVERSIONS[units]\n    return value / rate\ndef print_distance(speed, duration, *,\n                   speed_units='mph',\n                   time_units='hours',\n                   distance_units='miles'):",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "localize",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def localize(value, units):\n    rate = CONVERSIONS[units]\n    return value / rate\ndef print_distance(speed, duration, *,\n                   speed_units='mph',\n                   time_units='hours',\n                   distance_units='miles'):\n    norm_speed = convert(speed, speed_units)\n    norm_duration = convert(duration, time_units)\n    norm_distance = norm_speed * norm_duration",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "print_distance",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def print_distance(speed, duration, *,\n                   speed_units='mph',\n                   time_units='hours',\n                   distance_units='miles'):\n    norm_speed = convert(speed, speed_units)\n    norm_duration = convert(duration, time_units)\n    norm_distance = norm_speed * norm_duration\n    distance = localize(norm_distance, distance_units)\n    print(f'{distance} {distance_units}')\n# Example 4",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "print_distance",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def print_distance(speed, duration, *,\n                   speed_units=None,\n                   time_units=None,\n                   distance_units=None):\n    if speed_units is None:\n        warnings.warn(\n            'speed_units required', DeprecationWarning)\n        speed_units = 'mph'\n    if time_units is None:\n        warnings.warn(",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "require",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def require(name, value, default):\n    if value is not None:\n        return value\n    warnings.warn(\n        f'{name} will be required soon, update your code',\n        DeprecationWarning,\n        stacklevel=3)\n    return default\ndef print_distance(speed, duration, *,\n                   speed_units=None,",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "print_distance",
        "kind": 2,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "def print_distance(speed, duration, *,\n                   speed_units=None,\n                   time_units=None,\n                   distance_units=None):\n    speed_units = require('speed_units', speed_units, 'mph')\n    time_units = require('time_units', time_units, 'hours')\n    distance_units = require(\n        'distance_units', distance_units, 'miles')\n    norm_speed = convert(speed, speed_units)\n    norm_duration = convert(duration, time_units)",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "CONVERSIONS",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "CONVERSIONS = {\n    'mph': 1.60934 / 3600 * 1000,   # m/s\n    'hours': 3600,                  # seconds\n    'miles': 1.60934 * 1000,        # m\n    'meters': 1,                    # m\n    'm/s': 1,                       # m\n    'seconds': 1,                   # s\n}\ndef convert(value, units):\n    rate = CONVERSIONS[units]",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "fake_stderr",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "fake_stderr = io.StringIO()\nwith contextlib.redirect_stderr(fake_stderr):\n    print_distance(1000, 3,\n                   speed_units='meters',\n                   time_units='seconds')\nprint(fake_stderr.getvalue())\n# Example 7\ndef require(name, value, default):\n    if value is not None:\n        return value",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "fake_stderr",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "fake_stderr = io.StringIO()\nwith contextlib.redirect_stderr(fake_stderr):\n    print_distance(1000, 3,\n                   speed_units='meters',\n                   time_units='seconds')\nprint(fake_stderr.getvalue())\n# Example 9\nwarnings.simplefilter('error')\ntry:\n    warnings.warn('This usage is deprecated',",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "fake_stderr",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "fake_stderr = io.StringIO()\nhandler = logging.StreamHandler(fake_stderr)\nformatter = logging.Formatter(\n    '%(asctime)-15s WARNING] %(message)s')\nhandler.setFormatter(formatter)\nlogging.captureWarnings(True)\nlogger = logging.getLogger('py.warnings')\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\nwarnings.resetwarnings()",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "handler = logging.StreamHandler(fake_stderr)\nformatter = logging.Formatter(\n    '%(asctime)-15s WARNING] %(message)s')\nhandler.setFormatter(formatter)\nlogging.captureWarnings(True)\nlogger = logging.getLogger('py.warnings')\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\nwarnings.resetwarnings()\nwarnings.simplefilter('default')",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "formatter = logging.Formatter(\n    '%(asctime)-15s WARNING] %(message)s')\nhandler.setFormatter(formatter)\nlogging.captureWarnings(True)\nlogger = logging.getLogger('py.warnings')\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\nwarnings.resetwarnings()\nwarnings.simplefilter('default')\nwarnings.warn('This will go to the logs output')",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "logger = logging.getLogger('py.warnings')\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\nwarnings.resetwarnings()\nwarnings.simplefilter('default')\nwarnings.warn('This will go to the logs output')\nprint(fake_stderr.getvalue())\nwarnings.resetwarnings()\n# Example 12\nwith warnings.catch_warnings(record=True) as found_warnings:",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "single_warning",
        "kind": 5,
        "importPath": "example_code.item_89",
        "description": "example_code.item_89",
        "peekOfCode": "single_warning = found_warnings[0]\nassert str(single_warning.message) == (\n    'my_arg will be required soon, update your code')\nassert single_warning.category == DeprecationWarning",
        "detail": "example_code.item_89",
        "documentation": {}
    },
    {
        "label": "Counter",
        "kind": 6,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "class Counter:\n    def __init__(self):\n        self.value = 0\n    def add(self, offset):\n        value += offset\n    def get(self) -> int:\n        self.value\n# Example 6\ntry:\n    counter = Counter()",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "FirstClass",
        "kind": 6,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "class FirstClass:\n    def __init__(self, value):\n        self.value = value\nclass SecondClass:\n    def __init__(self, value):\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)\ndel FirstClass\ndel SecondClass",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "SecondClass",
        "kind": 6,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "class SecondClass:\n    def __init__(self, value):\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)\ndel FirstClass\ndel SecondClass\n# Example 15\ntry:\n    class FirstClass:",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "FirstClass",
        "kind": 6,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "class FirstClass:\n    def __init__(self, value: 'SecondClass') -> None:  # OK\n        self.value = value\nclass SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "SecondClass",
        "kind": 6,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "class SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "close_open_files",
        "kind": 2,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "def close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1\ntry:\n    def subtract(a, b):\n        return a - b",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "TEST_DIR",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "TEST_DIR = tempfile.TemporaryDirectory()\natexit.register(TEST_DIR.cleanup)\n# Make sure Windows processes exit cleanly\nOLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "OLD_CWD",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "OLD_CWD = os.getcwd()\natexit.register(lambda: os.chdir(OLD_CWD))\nos.chdir(TEST_DIR.name)\ndef close_open_files():\n    everything = gc.get_objects()\n    for obj in everything:\n        if isinstance(obj, io.IOBase):\n            obj.close()\natexit.register(close_open_files)\n# Example 1",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "second = SecondClass(5)\nfirst = FirstClass(second)\ndel FirstClass\ndel SecondClass\n# Example 15\ntry:\n    class FirstClass:\n        def __init__(self, value: SecondClass) -> None:  # Breaks\n            self.value = value\n    class SecondClass:",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "first = FirstClass(second)\ndel FirstClass\ndel SecondClass\n# Example 15\ntry:\n    class FirstClass:\n        def __init__(self, value: SecondClass) -> None:  # Breaks\n            self.value = value\n    class SecondClass:\n        def __init__(self, value: int) -> None:",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "second = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "example_code.item_90",
        "description": "example_code.item_90",
        "peekOfCode": "first = FirstClass(second)",
        "detail": "example_code.item_90",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "example_code.item_90_example_02",
        "description": "example_code.item_90_example_02",
        "peekOfCode": "def subtract(a: int, b: int) -> int:  # Function annotation\n    return a - b\nsubtract(10, '5')  # Oops: passed string value",
        "detail": "example_code.item_90_example_02",
        "documentation": {}
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "example_code.item_90_example_04",
        "description": "example_code.item_90_example_04",
        "peekOfCode": "def concat(a: str, b: str) -> str:\n    return a + b\nconcat('first', b'second')  # Oops: passed bytes value",
        "detail": "example_code.item_90_example_04",
        "documentation": {}
    },
    {
        "label": "Counter",
        "kind": 6,
        "importPath": "example_code.item_90_example_08",
        "description": "example_code.item_90_example_08",
        "peekOfCode": "class Counter:\n    def __init__(self) -> None:\n        self.value: int = 0  # Field / variable annotation\n    def add(self, offset: int) -> None:\n        value += offset      # Oops: forgot \"self.\"\n    def get(self) -> int:\n        self.value           # Oops: forgot \"return\"\ncounter = Counter()\ncounter.add(5)\ncounter.add(3)",
        "detail": "example_code.item_90_example_08",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "example_code.item_90_example_08",
        "description": "example_code.item_90_example_08",
        "peekOfCode": "counter = Counter()\ncounter.add(5)\ncounter.add(3)\nassert counter.get() == 8",
        "detail": "example_code.item_90_example_08",
        "documentation": {}
    },
    {
        "label": "combine",
        "kind": 2,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "def combine(func: Func[Value], values: List[Value]) -> Value:\n    assert len(values) > 0\n    result = values[0]\n    for next_value in values[1:]:\n        result = func(result, next_value)\n    return result\nReal = TypeVar('Real', int, float)\ndef add(x: Real, y: Real) -> Real:\n    return x + y\ninputs = [1, 2, 3, 4j]  # Oops: included a complex number",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "def add(x: Real, y: Real) -> Real:\n    return x + y\ninputs = [1, 2, 3, 4j]  # Oops: included a complex number\nresult = combine(add, inputs)\nassert result == 10",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "Value",
        "kind": 5,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "Value = TypeVar('Value')\nFunc = Callable[[Value, Value], Value]\ndef combine(func: Func[Value], values: List[Value]) -> Value:\n    assert len(values) > 0\n    result = values[0]\n    for next_value in values[1:]:\n        result = func(result, next_value)\n    return result\nReal = TypeVar('Real', int, float)\ndef add(x: Real, y: Real) -> Real:",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "Func",
        "kind": 5,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "Func = Callable[[Value, Value], Value]\ndef combine(func: Func[Value], values: List[Value]) -> Value:\n    assert len(values) > 0\n    result = values[0]\n    for next_value in values[1:]:\n        result = func(result, next_value)\n    return result\nReal = TypeVar('Real', int, float)\ndef add(x: Real, y: Real) -> Real:\n    return x + y",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "Real",
        "kind": 5,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "Real = TypeVar('Real', int, float)\ndef add(x: Real, y: Real) -> Real:\n    return x + y\ninputs = [1, 2, 3, 4j]  # Oops: included a complex number\nresult = combine(add, inputs)\nassert result == 10",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 5,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "inputs = [1, 2, 3, 4j]  # Oops: included a complex number\nresult = combine(add, inputs)\nassert result == 10",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "example_code.item_90_example_10",
        "description": "example_code.item_90_example_10",
        "peekOfCode": "result = combine(add, inputs)\nassert result == 10",
        "detail": "example_code.item_90_example_10",
        "documentation": {}
    },
    {
        "label": "get_or_default",
        "kind": 2,
        "importPath": "example_code.item_90_example_12",
        "description": "example_code.item_90_example_12",
        "peekOfCode": "def get_or_default(value: Optional[int],\n                   default: int) -> int: \n    if value is not None:\n        return value\n    return value  # Oops: should have returned \"default\"",
        "detail": "example_code.item_90_example_12",
        "documentation": {}
    },
    {
        "label": "FirstClass",
        "kind": 6,
        "importPath": "example_code.item_90_example_14",
        "description": "example_code.item_90_example_14",
        "peekOfCode": "class FirstClass:\n    def __init__(self, value: SecondClass) -> None:\n        self.value = value\nclass SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_14",
        "documentation": {}
    },
    {
        "label": "SecondClass",
        "kind": 6,
        "importPath": "example_code.item_90_example_14",
        "description": "example_code.item_90_example_14",
        "peekOfCode": "class SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_14",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "example_code.item_90_example_14",
        "description": "example_code.item_90_example_14",
        "peekOfCode": "second = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_14",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "example_code.item_90_example_14",
        "description": "example_code.item_90_example_14",
        "peekOfCode": "first = FirstClass(second)",
        "detail": "example_code.item_90_example_14",
        "documentation": {}
    },
    {
        "label": "FirstClass",
        "kind": 6,
        "importPath": "example_code.item_90_example_17",
        "description": "example_code.item_90_example_17",
        "peekOfCode": "class FirstClass:\n    def __init__(self, value: SecondClass) -> None:  # OK\n        self.value = value\nclass SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_17",
        "documentation": {}
    },
    {
        "label": "SecondClass",
        "kind": 6,
        "importPath": "example_code.item_90_example_17",
        "description": "example_code.item_90_example_17",
        "peekOfCode": "class SecondClass:\n    def __init__(self, value: int) -> None:\n        self.value = value\nsecond = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_17",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "example_code.item_90_example_17",
        "description": "example_code.item_90_example_17",
        "peekOfCode": "second = SecondClass(5)\nfirst = FirstClass(second)",
        "detail": "example_code.item_90_example_17",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "example_code.item_90_example_17",
        "description": "example_code.item_90_example_17",
        "peekOfCode": "first = FirstClass(second)",
        "detail": "example_code.item_90_example_17",
        "documentation": {}
    }
]